
Teamprojekt_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004388  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004448  08004448  00014448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004500  08004500  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004508  08004508  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004508  08004508  00014508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000005c  0800456c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  0800456c  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b034  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d81  00000000  00000000  0002b0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  0002ce80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d5  00000000  00000000  0002d760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014fa5  00000000  00000000  0002de35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c1fd  00000000  00000000  00042dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000815d3  00000000  00000000  0004efd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002398  00000000  00000000  000d05ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d2944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004430 	.word	0x08004430

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004430 	.word	0x08004430

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <feuchtigkeit>:




uint8_t feuchtigkeit (int daten)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	uint8_t pro;
	if(daten >= 2780)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a13      	ldr	r2, [pc, #76]	; (8000524 <feuchtigkeit+0x58>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	dd04      	ble.n	80004e6 <feuchtigkeit+0x1a>
	{
		pro = 0;
 80004dc:	230f      	movs	r3, #15
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
 80004e4:	e016      	b.n	8000514 <feuchtigkeit+0x48>
	}
	else if (daten >= 1180)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a0f      	ldr	r2, [pc, #60]	; (8000528 <feuchtigkeit+0x5c>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	dd0a      	ble.n	8000504 <feuchtigkeit+0x38>
	{
		pro = (2780-daten)/16;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <feuchtigkeit+0x60>)
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	d500      	bpl.n	80004f8 <feuchtigkeit+0x2c>
 80004f6:	330f      	adds	r3, #15
 80004f8:	111b      	asrs	r3, r3, #4
 80004fa:	001a      	movs	r2, r3
 80004fc:	230f      	movs	r3, #15
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	e007      	b.n	8000514 <feuchtigkeit+0x48>
	}
	else if (daten <= 1180)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <feuchtigkeit+0x64>)
 8000508:	4293      	cmp	r3, r2
 800050a:	dc03      	bgt.n	8000514 <feuchtigkeit+0x48>
	{
		pro = 100;
 800050c:	230f      	movs	r3, #15
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	2264      	movs	r2, #100	; 0x64
 8000512:	701a      	strb	r2, [r3, #0]
	}
	return pro;
 8000514:	230f      	movs	r3, #15
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	781b      	ldrb	r3, [r3, #0]
}
 800051a:	0018      	movs	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	b004      	add	sp, #16
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	00000adb 	.word	0x00000adb
 8000528:	0000049b 	.word	0x0000049b
 800052c:	00000adc 	.word	0x00000adc
 8000530:	0000049c 	.word	0x0000049c

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 faf0 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f85e 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f95c 	bl	80007fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000544:	f000 f92a 	bl	800079c <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000548:	f000 f8c4 	bl	80006d4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc);
 800054c:	4b23      	ldr	r3, [pc, #140]	; (80005dc <main+0xa8>)
 800054e:	0018      	movs	r0, r3
 8000550:	f000 fcec 	bl	8000f2c <HAL_ADC_Start>
  while (1)
  {



	 state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	019b      	lsls	r3, r3, #6
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <main+0xac>)
 800055a:	0019      	movs	r1, r3
 800055c:	0010      	movs	r0, r2
 800055e:	f001 f9ed 	bl	800193c <HAL_GPIO_ReadPin>
 8000562:	0003      	movs	r3, r0
 8000564:	001a      	movs	r2, r3
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <main+0xb0>)
 8000568:	701a      	strb	r2, [r3, #0]

	 if(state == GPIO_PIN_RESET)
 800056a:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <main+0xb0>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1f0      	bne.n	8000554 <main+0x20>
	 {
		 HAL_ADC_Start(&hadc);
 8000572:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <main+0xa8>)
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fcd9 	bl	8000f2c <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc, 20);
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <main+0xa8>)
 800057c:	2114      	movs	r1, #20
 800057e:	0018      	movs	r0, r3
 8000580:	f000 fd28 	bl	8000fd4 <HAL_ADC_PollForConversion>
		 daten = HAL_ADC_GetValue(&hadc);
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <main+0xa8>)
 8000586:	0018      	movs	r0, r3
 8000588:	f000 fdc0 	bl	800110c <HAL_ADC_GetValue>
 800058c:	0003      	movs	r3, r0
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <main+0xb4>)
 8000592:	801a      	strh	r2, [r3, #0]
		 prozent = feuchtigkeit(daten);
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <main+0xb4>)
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	0018      	movs	r0, r3
 800059a:	f7ff ff97 	bl	80004cc <feuchtigkeit>
 800059e:	0003      	movs	r3, r0
 80005a0:	001a      	movs	r2, r3
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <main+0xb8>)
 80005a4:	701a      	strb	r2, [r3, #0]
		 sprintf(msg, "Feuchtigkeit: %hu \r\n", prozent);
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <main+0xb8>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	001a      	movs	r2, r3
 80005ac:	4910      	ldr	r1, [pc, #64]	; (80005f0 <main+0xbc>)
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <main+0xc0>)
 80005b0:	0018      	movs	r0, r3
 80005b2:	f003 fa97 	bl	8003ae4 <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <main+0xc0>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f7ff fda5 	bl	8000108 <strlen>
 80005be:	0003      	movs	r3, r0
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	2301      	movs	r3, #1
 80005c4:	425b      	negs	r3, r3
 80005c6:	490b      	ldr	r1, [pc, #44]	; (80005f4 <main+0xc0>)
 80005c8:	480b      	ldr	r0, [pc, #44]	; (80005f8 <main+0xc4>)
 80005ca:	f002 f9db 	bl	8002984 <HAL_UART_Transmit>
		 HAL_Delay(1000);
 80005ce:	23fa      	movs	r3, #250	; 0xfa
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fb12 	bl	8000bfc <HAL_Delay>
	 state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80005d8:	e7bc      	b.n	8000554 <main+0x20>
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	20000078 	.word	0x20000078
 80005e0:	50000800 	.word	0x50000800
 80005e4:	20000174 	.word	0x20000174
 80005e8:	2000015c 	.word	0x2000015c
 80005ec:	2000015e 	.word	0x2000015e
 80005f0:	08004448 	.word	0x08004448
 80005f4:	20000160 	.word	0x20000160
 80005f8:	200000d4 	.word	0x200000d4

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b09f      	sub	sp, #124	; 0x7c
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	2440      	movs	r4, #64	; 0x40
 8000604:	193b      	adds	r3, r7, r4
 8000606:	0018      	movs	r0, r3
 8000608:	2338      	movs	r3, #56	; 0x38
 800060a:	001a      	movs	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f003 fa89 	bl	8003b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000612:	232c      	movs	r3, #44	; 0x2c
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	0018      	movs	r0, r3
 8000618:	2314      	movs	r3, #20
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f003 fa81 	bl	8003b24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	0018      	movs	r0, r3
 8000626:	2328      	movs	r3, #40	; 0x28
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f003 fa7a 	bl	8003b24 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a26      	ldr	r2, [pc, #152]	; (80006d0 <SystemClock_Config+0xd4>)
 8000636:	401a      	ands	r2, r3
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xd0>)
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	0109      	lsls	r1, r1, #4
 800063e:	430a      	orrs	r2, r1
 8000640:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000642:	0021      	movs	r1, r4
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2210      	movs	r2, #16
 8000648:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2201      	movs	r2, #1
 800064e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	22a0      	movs	r2, #160	; 0xa0
 800065a:	0212      	lsls	r2, r2, #8
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	187b      	adds	r3, r7, r1
 8000666:	0018      	movs	r0, r3
 8000668:	f001 f9a2 	bl	80019b0 <HAL_RCC_OscConfig>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000670:	f000 f928 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	212c      	movs	r1, #44	; 0x2c
 8000676:	187b      	adds	r3, r7, r1
 8000678:	220f      	movs	r2, #15
 800067a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2100      	movs	r1, #0
 8000698:	0018      	movs	r0, r3
 800069a:	f001 fd5d 	bl	8002158 <HAL_RCC_ClockConfig>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006a2:	f000 f90f 	bl	80008c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2202      	movs	r2, #2
 80006aa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 ff73 	bl	80025a0 <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006be:	f000 f901 	bl	80008c4 <Error_Handler>
  }
}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b01f      	add	sp, #124	; 0x7c
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	40007000 	.word	0x40007000
 80006d0:	ffffe7ff 	.word	0xffffe7ff

080006d4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	003b      	movs	r3, r7
 80006dc:	0018      	movs	r0, r3
 80006de:	2308      	movs	r3, #8
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f003 fa1e 	bl	8003b24 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <MX_ADC_Init+0xc0>)
 80006ea:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <MX_ADC_Init+0xc4>)
 80006ec:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_ADC_Init+0xc0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_ADC_Init+0xc0>)
 80006f6:	22c0      	movs	r2, #192	; 0xc0
 80006f8:	0612      	lsls	r2, r2, #24
 80006fa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <MX_ADC_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_ADC_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <MX_ADC_Init+0xc0>)
 800070a:	2201      	movs	r2, #1
 800070c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_ADC_Init+0xc0>)
 8000716:	2220      	movs	r2, #32
 8000718:	2100      	movs	r1, #0
 800071a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ADC_Init+0xc0>)
 800071e:	2221      	movs	r2, #33	; 0x21
 8000720:	2100      	movs	r1, #0
 8000722:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_ADC_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_ADC_Init+0xc0>)
 800072c:	22c2      	movs	r2, #194	; 0xc2
 800072e:	32ff      	adds	r2, #255	; 0xff
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_ADC_Init+0xc0>)
 8000734:	222c      	movs	r2, #44	; 0x2c
 8000736:	2100      	movs	r1, #0
 8000738:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_ADC_Init+0xc0>)
 800073c:	2204      	movs	r2, #4
 800073e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_ADC_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_ADC_Init+0xc0>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_ADC_Init+0xc0>)
 800074e:	2201      	movs	r2, #1
 8000750:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_ADC_Init+0xc0>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_ADC_Init+0xc0>)
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fa72 	bl	8000c44 <HAL_ADC_Init>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000764:	f000 f8ae 	bl	80008c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000768:	003b      	movs	r3, r7
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800076e:	003b      	movs	r3, r7
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	0152      	lsls	r2, r2, #5
 8000774:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000776:	003a      	movs	r2, r7
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_ADC_Init+0xc0>)
 800077a:	0011      	movs	r1, r2
 800077c:	0018      	movs	r0, r3
 800077e:	f000 fcd1 	bl	8001124 <HAL_ADC_ConfigChannel>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000786:	f000 f89d 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20000078 	.word	0x20000078
 8000798:	40012400 	.word	0x40012400

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a2:	4a15      	ldr	r2, [pc, #84]	; (80007f8 <MX_USART2_UART_Init+0x5c>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a8:	22e1      	movs	r2, #225	; 0xe1
 80007aa:	0252      	lsls	r2, r2, #9
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f002 f87b 	bl	80028dc <HAL_UART_Init>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ea:	f000 f86b 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000d4 	.word	0x200000d4
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b089      	sub	sp, #36	; 0x24
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	240c      	movs	r4, #12
 8000804:	193b      	adds	r3, r7, r4
 8000806:	0018      	movs	r0, r3
 8000808:	2314      	movs	r3, #20
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f003 f989 	bl	8003b24 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <MX_GPIO_Init+0xc0>)
 8000814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000816:	4b29      	ldr	r3, [pc, #164]	; (80008bc <MX_GPIO_Init+0xc0>)
 8000818:	2104      	movs	r1, #4
 800081a:	430a      	orrs	r2, r1
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <MX_GPIO_Init+0xc0>)
 8000820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000822:	2204      	movs	r2, #4
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_GPIO_Init+0xc0>)
 800082c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <MX_GPIO_Init+0xc0>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	430a      	orrs	r2, r1
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_GPIO_Init+0xc0>)
 8000838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	4013      	ands	r3, r2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_GPIO_Init+0xc0>)
 8000844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_GPIO_Init+0xc0>)
 8000848:	2101      	movs	r1, #1
 800084a:	430a      	orrs	r2, r1
 800084c:	62da      	str	r2, [r3, #44]	; 0x2c
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_GPIO_Init+0xc0>)
 8000850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000852:	2201      	movs	r2, #1
 8000854:	4013      	ands	r3, r2
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085a:	23a0      	movs	r3, #160	; 0xa0
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	2200      	movs	r2, #0
 8000860:	2120      	movs	r1, #32
 8000862:	0018      	movs	r0, r3
 8000864:	f001 f887 	bl	8001976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	0192      	lsls	r2, r2, #6
 800086e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2284      	movs	r2, #132	; 0x84
 8000874:	0392      	lsls	r2, r2, #14
 8000876:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087e:	193b      	adds	r3, r7, r4
 8000880:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <MX_GPIO_Init+0xc4>)
 8000882:	0019      	movs	r1, r3
 8000884:	0010      	movs	r0, r2
 8000886:	f000 fedb 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800088a:	0021      	movs	r1, r4
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2220      	movs	r2, #32
 8000890:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2201      	movs	r2, #1
 8000896:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a4:	187a      	adds	r2, r7, r1
 80008a6:	23a0      	movs	r3, #160	; 0xa0
 80008a8:	05db      	lsls	r3, r3, #23
 80008aa:	0011      	movs	r1, r2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fec7 	bl	8001640 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b009      	add	sp, #36	; 0x24
 80008b8:	bd90      	pop	{r4, r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	40021000 	.word	0x40021000
 80008c0:	50000800 	.word	0x50000800

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_MspInit+0x24>)
 80008d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x24>)
 80008da:	2101      	movs	r1, #1
 80008dc:	430a      	orrs	r2, r1
 80008de:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <HAL_MspInit+0x24>)
 80008e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <HAL_MspInit+0x24>)
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	0549      	lsls	r1, r1, #21
 80008ea:	430a      	orrs	r2, r1
 80008ec:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	240c      	movs	r4, #12
 8000902:	193b      	adds	r3, r7, r4
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f003 f90a 	bl	8003b24 <memset>
  if(hadc->Instance==ADC1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a14      	ldr	r2, [pc, #80]	; (8000968 <HAL_ADC_MspInit+0x70>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d122      	bne.n	8000960 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_ADC_MspInit+0x74>)
 800091c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <HAL_ADC_MspInit+0x74>)
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	0089      	lsls	r1, r1, #2
 8000924:	430a      	orrs	r2, r1
 8000926:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_ADC_MspInit+0x74>)
 800092a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_ADC_MspInit+0x74>)
 800092e:	2101      	movs	r1, #1
 8000930:	430a      	orrs	r2, r1
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_ADC_MspInit+0x74>)
 8000936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000938:	2201      	movs	r2, #1
 800093a:	4013      	ands	r3, r2
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2203      	movs	r2, #3
 800094a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	193a      	adds	r2, r7, r4
 8000954:	23a0      	movs	r3, #160	; 0xa0
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	0011      	movs	r1, r2
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fe70 	bl	8001640 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b009      	add	sp, #36	; 0x24
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	40012400 	.word	0x40012400
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	240c      	movs	r4, #12
 800097a:	193b      	adds	r3, r7, r4
 800097c:	0018      	movs	r0, r3
 800097e:	2314      	movs	r3, #20
 8000980:	001a      	movs	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	f003 f8ce 	bl	8003b24 <memset>
  if(huart->Instance==USART2)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <HAL_UART_MspInit+0x90>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d131      	bne.n	80009f6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <HAL_UART_MspInit+0x94>)
 8000994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <HAL_UART_MspInit+0x94>)
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	0289      	lsls	r1, r1, #10
 800099c:	430a      	orrs	r2, r1
 800099e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_UART_MspInit+0x94>)
 80009a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0x94>)
 80009a6:	2101      	movs	r1, #1
 80009a8:	430a      	orrs	r2, r1
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_UART_MspInit+0x94>)
 80009ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b0:	2201      	movs	r2, #1
 80009b2:	4013      	ands	r3, r2
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009b8:	0021      	movs	r1, r4
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	220c      	movs	r2, #12
 80009be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2202      	movs	r2, #2
 80009c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2203      	movs	r2, #3
 80009d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2204      	movs	r2, #4
 80009d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	187a      	adds	r2, r7, r1
 80009da:	23a0      	movs	r3, #160	; 0xa0
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 fe2d 	bl	8001640 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	201c      	movs	r0, #28
 80009ec:	f000 fd6e 	bl	80014cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009f0:	201c      	movs	r0, #28
 80009f2:	f000 fd80 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b009      	add	sp, #36	; 0x24
 80009fc:	bd90      	pop	{r4, r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40021000 	.word	0x40021000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f8ca 	bl	8000bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <USART2_IRQHandler+0x14>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f002 f840 	bl	8002ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	200000d4 	.word	0x200000d4

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	18d3      	adds	r3, r2, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d207      	bcs.n	8000a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a80:	f003 f858 	bl	8003b34 <__errno>
 8000a84:	0003      	movs	r3, r0
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	425b      	negs	r3, r3
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	18d2      	adds	r2, r2, r3
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <_sbrk+0x64>)
 8000aa0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b006      	add	sp, #24
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20005000 	.word	0x20005000
 8000ab0:	00000400 	.word	0x00000400
 8000ab4:	20000178 	.word	0x20000178
 8000ab8:	200002c8 	.word	0x200002c8

08000abc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000aca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000acc:	f7ff fff6 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <LoopForever+0xe>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	; (8000b14 <LoopForever+0x16>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000af6:	f003 f823 	bl	8003b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fd1b 	bl	8000534 <main>

08000afe <LoopForever>:

LoopForever:
    b LoopForever
 8000afe:	e7fe      	b.n	8000afe <LoopForever>
   ldr   r0, =_estack
 8000b00:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b0c:	08004510 	.word	0x08004510
  ldr r2, =_sbss
 8000b10:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b14:	200002c8 	.word	0x200002c8

08000b18 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_COMP_IRQHandler>
	...

08000b1c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_Init+0x3c>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_Init+0x3c>)
 8000b2e:	2140      	movs	r1, #64	; 0x40
 8000b30:	430a      	orrs	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 f811 	bl	8000b5c <HAL_InitTick>
 8000b3a:	1e03      	subs	r3, r0, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
 8000b44:	e001      	b.n	8000b4a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b46:	f7ff fec3 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	40022000 	.word	0x40022000

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_InitTick+0x5c>)
 8000b66:	681c      	ldr	r4, [r3, #0]
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_InitTick+0x60>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	23fa      	movs	r3, #250	; 0xfa
 8000b70:	0098      	lsls	r0, r3, #2
 8000b72:	f7ff fadb 	bl	800012c <__udivsi3>
 8000b76:	0003      	movs	r3, r0
 8000b78:	0019      	movs	r1, r3
 8000b7a:	0020      	movs	r0, r4
 8000b7c:	f7ff fad6 	bl	800012c <__udivsi3>
 8000b80:	0003      	movs	r3, r0
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 fcc7 	bl	8001516 <HAL_SYSTICK_Config>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e00f      	b.n	8000bb0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d80b      	bhi.n	8000bae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	2301      	movs	r3, #1
 8000b9a:	425b      	negs	r3, r3
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 fc94 	bl	80014cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_InitTick+0x64>)
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e000      	b.n	8000bb0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b003      	add	sp, #12
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_IncTick+0x1c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	001a      	movs	r2, r3
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x20>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	18d2      	adds	r2, r2, r3
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_IncTick+0x20>)
 8000bd6:	601a      	str	r2, [r3, #0]
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	20000008 	.word	0x20000008
 8000be4:	2000017c 	.word	0x2000017c

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <HAL_GetTick+0x10>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	2000017c 	.word	0x2000017c

08000bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c04:	f7ff fff0 	bl	8000be8 <HAL_GetTick>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3301      	adds	r3, #1
 8000c14:	d005      	beq.n	8000c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_Delay+0x44>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	189b      	adds	r3, r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	f7ff ffe0 	bl	8000be8 <HAL_GetTick>
 8000c28:	0002      	movs	r2, r0
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d8f7      	bhi.n	8000c24 <HAL_Delay+0x28>
  {
  }
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b004      	add	sp, #16
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	20000008 	.word	0x20000008

08000c44 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e159      	b.n	8000f0a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d10a      	bne.n	8000c74 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2250      	movs	r2, #80	; 0x50
 8000c68:	2100      	movs	r1, #0
 8000c6a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f7ff fe42 	bl	80008f8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c78:	2210      	movs	r2, #16
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	2b10      	cmp	r3, #16
 8000c7e:	d005      	beq.n	8000c8c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	2204      	movs	r2, #4
 8000c88:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000c8a:	d00b      	beq.n	8000ca4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c90:	2210      	movs	r2, #16
 8000c92:	431a      	orrs	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2250      	movs	r2, #80	; 0x50
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e132      	b.n	8000f0a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca8:	4a9a      	ldr	r2, [pc, #616]	; (8000f14 <HAL_ADC_Init+0x2d0>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	2202      	movs	r2, #2
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2203      	movs	r2, #3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d108      	bne.n	8000cd4 <HAL_ADC_Init+0x90>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d101      	bne.n	8000cd4 <HAL_ADC_Init+0x90>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <HAL_ADC_Init+0x92>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d149      	bne.n	8000d6e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	23c0      	movs	r3, #192	; 0xc0
 8000ce0:	061b      	lsls	r3, r3, #24
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d00b      	beq.n	8000cfe <HAL_ADC_Init+0xba>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d005      	beq.n	8000cfe <HAL_ADC_Init+0xba>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	061b      	lsls	r3, r3, #24
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d111      	bne.n	8000d22 <HAL_ADC_Init+0xde>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	0092      	lsls	r2, r2, #2
 8000d0a:	0892      	lsrs	r2, r2, #2
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6919      	ldr	r1, [r3, #16]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	e014      	b.n	8000d4c <HAL_ADC_Init+0x108>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	691a      	ldr	r2, [r3, #16]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	0892      	lsrs	r2, r2, #2
 8000d30:	611a      	str	r2, [r3, #16]
 8000d32:	4b79      	ldr	r3, [pc, #484]	; (8000f18 <HAL_ADC_Init+0x2d4>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b78      	ldr	r3, [pc, #480]	; (8000f18 <HAL_ADC_Init+0x2d4>)
 8000d38:	4978      	ldr	r1, [pc, #480]	; (8000f1c <HAL_ADC_Init+0x2d8>)
 8000d3a:	400a      	ands	r2, r1
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	4b76      	ldr	r3, [pc, #472]	; (8000f18 <HAL_ADC_Init+0x2d4>)
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	4b74      	ldr	r3, [pc, #464]	; (8000f18 <HAL_ADC_Init+0x2d4>)
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2118      	movs	r1, #24
 8000d58:	438a      	bics	r2, r1
 8000d5a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68d9      	ldr	r1, [r3, #12]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000d6e:	4b6a      	ldr	r3, [pc, #424]	; (8000f18 <HAL_ADC_Init+0x2d4>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4b69      	ldr	r3, [pc, #420]	; (8000f18 <HAL_ADC_Init+0x2d4>)
 8000d74:	496a      	ldr	r1, [pc, #424]	; (8000f20 <HAL_ADC_Init+0x2dc>)
 8000d76:	400a      	ands	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000d7a:	4b67      	ldr	r3, [pc, #412]	; (8000f18 <HAL_ADC_Init+0x2d4>)
 8000d7c:	6819      	ldr	r1, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	065a      	lsls	r2, r3, #25
 8000d84:	4b64      	ldr	r3, [pc, #400]	; (8000f18 <HAL_ADC_Init+0x2d4>)
 8000d86:	430a      	orrs	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	055b      	lsls	r3, r3, #21
 8000d94:	4013      	ands	r3, r2
 8000d96:	d108      	bne.n	8000daa <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	0549      	lsls	r1, r1, #21
 8000da6:	430a      	orrs	r2, r1
 8000da8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	495b      	ldr	r1, [pc, #364]	; (8000f24 <HAL_ADC_Init+0x2e0>)
 8000db6:	400a      	ands	r2, r1
 8000db8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68d9      	ldr	r1, [r3, #12]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d101      	bne.n	8000dd0 <HAL_ADC_Init+0x18c>
 8000dcc:	2304      	movs	r3, #4
 8000dce:	e000      	b.n	8000dd2 <HAL_ADC_Init+0x18e>
 8000dd0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000dd2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2020      	movs	r0, #32
 8000dd8:	5c1b      	ldrb	r3, [r3, r0]
 8000dda:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000ddc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	202c      	movs	r0, #44	; 0x2c
 8000de2:	5c1b      	ldrb	r3, [r3, r0]
 8000de4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000de6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000dec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000df4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000dfc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e0a:	23c2      	movs	r3, #194	; 0xc2
 8000e0c:	33ff      	adds	r3, #255	; 0xff
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d00b      	beq.n	8000e2a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68d9      	ldr	r1, [r3, #12]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e20:	431a      	orrs	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2221      	movs	r2, #33	; 0x21
 8000e2e:	5c9b      	ldrb	r3, [r3, r2]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d11a      	bne.n	8000e6a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2220      	movs	r2, #32
 8000e38:	5c9b      	ldrb	r3, [r3, r2]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d109      	bne.n	8000e52 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0249      	lsls	r1, r1, #9
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	e00b      	b.n	8000e6a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e56:	2220      	movs	r2, #32
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	2201      	movs	r2, #1
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d11f      	bne.n	8000eb2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	492a      	ldr	r1, [pc, #168]	; (8000f28 <HAL_ADC_Init+0x2e4>)
 8000e7e:	400a      	ands	r2, r1
 8000e80:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6919      	ldr	r1, [r3, #16]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e90:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000e96:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	691a      	ldr	r2, [r3, #16]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2101      	movs	r1, #1
 8000eac:	430a      	orrs	r2, r1
 8000eae:	611a      	str	r2, [r3, #16]
 8000eb0:	e00e      	b.n	8000ed0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d107      	bne.n	8000ed0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2101      	movs	r1, #1
 8000ecc:	438a      	bics	r2, r1
 8000ece:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	695a      	ldr	r2, [r3, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2107      	movs	r1, #7
 8000edc:	438a      	bics	r2, r1
 8000ede:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6959      	ldr	r1, [r3, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000efc:	2203      	movs	r2, #3
 8000efe:	4393      	bics	r3, r2
 8000f00:	2201      	movs	r2, #1
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	fffffefd 	.word	0xfffffefd
 8000f18:	40012708 	.word	0x40012708
 8000f1c:	ffc3ffff 	.word	0xffc3ffff
 8000f20:	fdffffff 	.word	0xfdffffff
 8000f24:	fffe0219 	.word	0xfffe0219
 8000f28:	fffffc03 	.word	0xfffffc03

08000f2c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f34:	230f      	movs	r3, #15
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2204      	movs	r2, #4
 8000f44:	4013      	ands	r3, r2
 8000f46:	d138      	bne.n	8000fba <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2250      	movs	r2, #80	; 0x50
 8000f4c:	5c9b      	ldrb	r3, [r3, r2]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d101      	bne.n	8000f56 <HAL_ADC_Start+0x2a>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e038      	b.n	8000fc8 <HAL_ADC_Start+0x9c>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2250      	movs	r2, #80	; 0x50
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d007      	beq.n	8000f76 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000f66:	230f      	movs	r3, #15
 8000f68:	18fc      	adds	r4, r7, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f000 f979 	bl	8001264 <ADC_Enable>
 8000f72:	0003      	movs	r3, r0
 8000f74:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f76:	230f      	movs	r3, #15
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d120      	bne.n	8000fc2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f84:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <HAL_ADC_Start+0xa4>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	0052      	lsls	r2, r2, #1
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2250      	movs	r2, #80	; 0x50
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	221c      	movs	r2, #28
 8000fa6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	e003      	b.n	8000fc2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fba:	230f      	movs	r3, #15
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b005      	add	sp, #20
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	fffff0fe 	.word	0xfffff0fe

08000fd4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d102      	bne.n	8000ff4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e014      	b.n	800101e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d10b      	bne.n	800101a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001006:	2220      	movs	r2, #32
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2250      	movs	r2, #80	; 0x50
 8001012:	2100      	movs	r1, #0
 8001014:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e072      	b.n	8001100 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800101a:	230c      	movs	r3, #12
 800101c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800101e:	f7ff fde3 	bl	8000be8 <HAL_GetTick>
 8001022:	0003      	movs	r3, r0
 8001024:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001026:	e01f      	b.n	8001068 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3301      	adds	r3, #1
 800102c:	d01c      	beq.n	8001068 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d007      	beq.n	8001044 <HAL_ADC_PollForConversion+0x70>
 8001034:	f7ff fdd8 	bl	8000be8 <HAL_GetTick>
 8001038:	0002      	movs	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d211      	bcs.n	8001068 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	4013      	ands	r3, r2
 800104e:	d10b      	bne.n	8001068 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001054:	2204      	movs	r2, #4
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2250      	movs	r2, #80	; 0x50
 8001060:	2100      	movs	r1, #0
 8001062:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e04b      	b.n	8001100 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4013      	ands	r3, r2
 8001072:	d0d9      	beq.n	8001028 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	23c0      	movs	r3, #192	; 0xc0
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	4013      	ands	r3, r2
 800108e:	d12e      	bne.n	80010ee <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2220      	movs	r2, #32
 8001094:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001096:	2b00      	cmp	r3, #0
 8001098:	d129      	bne.n	80010ee <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2208      	movs	r2, #8
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d122      	bne.n	80010ee <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2204      	movs	r2, #4
 80010b0:	4013      	ands	r3, r2
 80010b2:	d110      	bne.n	80010d6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	210c      	movs	r1, #12
 80010c0:	438a      	bics	r2, r1
 80010c2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c8:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <HAL_ADC_PollForConversion+0x134>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	2201      	movs	r2, #1
 80010ce:	431a      	orrs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	655a      	str	r2, [r3, #84]	; 0x54
 80010d4:	e00b      	b.n	80010ee <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010da:	2220      	movs	r2, #32
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	2201      	movs	r2, #1
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d103      	bne.n	80010fe <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	220c      	movs	r2, #12
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b004      	add	sp, #16
 8001106:	bd80      	pop	{r7, pc}
 8001108:	fffffefe 	.word	0xfffffefe

0800110c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2250      	movs	r2, #80	; 0x50
 8001132:	5c9b      	ldrb	r3, [r3, r2]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_ADC_ConfigChannel+0x18>
 8001138:	2302      	movs	r3, #2
 800113a:	e085      	b.n	8001248 <HAL_ADC_ConfigChannel+0x124>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2250      	movs	r2, #80	; 0x50
 8001140:	2101      	movs	r1, #1
 8001142:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2204      	movs	r2, #4
 800114c:	4013      	ands	r3, r2
 800114e:	d00b      	beq.n	8001168 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001154:	2220      	movs	r2, #32
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2250      	movs	r2, #80	; 0x50
 8001160:	2100      	movs	r1, #0
 8001162:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e06f      	b.n	8001248 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a38      	ldr	r2, [pc, #224]	; (8001250 <HAL_ADC_ConfigChannel+0x12c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d035      	beq.n	80011de <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	035b      	lsls	r3, r3, #13
 800117e:	0b5a      	lsrs	r2, r3, #13
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	02db      	lsls	r3, r3, #11
 8001190:	4013      	ands	r3, r2
 8001192:	d009      	beq.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001194:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <HAL_ADC_ConfigChannel+0x130>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <HAL_ADC_ConfigChannel+0x130>)
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	0409      	lsls	r1, r1, #16
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f000 f8c6 	bl	8001334 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	029b      	lsls	r3, r3, #10
 80011b0:	4013      	ands	r3, r2
 80011b2:	d006      	beq.n	80011c2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <HAL_ADC_ConfigChannel+0x130>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_ADC_ConfigChannel+0x130>)
 80011ba:	2180      	movs	r1, #128	; 0x80
 80011bc:	03c9      	lsls	r1, r1, #15
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	025b      	lsls	r3, r3, #9
 80011ca:	4013      	ands	r3, r2
 80011cc:	d037      	beq.n	800123e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <HAL_ADC_ConfigChannel+0x130>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_ADC_ConfigChannel+0x130>)
 80011d4:	2180      	movs	r1, #128	; 0x80
 80011d6:	0449      	lsls	r1, r1, #17
 80011d8:	430a      	orrs	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e02f      	b.n	800123e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	035b      	lsls	r3, r3, #13
 80011ea:	0b5b      	lsrs	r3, r3, #13
 80011ec:	43d9      	mvns	r1, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	400a      	ands	r2, r1
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	02db      	lsls	r3, r3, #11
 80011fe:	4013      	ands	r3, r2
 8001200:	d005      	beq.n	800120e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_ADC_ConfigChannel+0x130>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_ADC_ConfigChannel+0x130>)
 8001208:	4913      	ldr	r1, [pc, #76]	; (8001258 <HAL_ADC_ConfigChannel+0x134>)
 800120a:	400a      	ands	r2, r1
 800120c:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	029b      	lsls	r3, r3, #10
 8001216:	4013      	ands	r3, r2
 8001218:	d005      	beq.n	8001226 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_ADC_ConfigChannel+0x130>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_ADC_ConfigChannel+0x130>)
 8001220:	490e      	ldr	r1, [pc, #56]	; (800125c <HAL_ADC_ConfigChannel+0x138>)
 8001222:	400a      	ands	r2, r1
 8001224:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	025b      	lsls	r3, r3, #9
 800122e:	4013      	ands	r3, r2
 8001230:	d005      	beq.n	800123e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_ADC_ConfigChannel+0x130>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_ADC_ConfigChannel+0x130>)
 8001238:	4909      	ldr	r1, [pc, #36]	; (8001260 <HAL_ADC_ConfigChannel+0x13c>)
 800123a:	400a      	ands	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2250      	movs	r2, #80	; 0x50
 8001242:	2100      	movs	r1, #0
 8001244:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}
 8001250:	00001001 	.word	0x00001001
 8001254:	40012708 	.word	0x40012708
 8001258:	ff7fffff 	.word	0xff7fffff
 800125c:	ffbfffff 	.word	0xffbfffff
 8001260:	feffffff 	.word	0xfeffffff

08001264 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2203      	movs	r2, #3
 8001278:	4013      	ands	r3, r2
 800127a:	2b01      	cmp	r3, #1
 800127c:	d108      	bne.n	8001290 <ADC_Enable+0x2c>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2201      	movs	r2, #1
 8001286:	4013      	ands	r3, r2
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <ADC_Enable+0x2c>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <ADC_Enable+0x2e>
 8001290:	2300      	movs	r3, #0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d146      	bne.n	8001324 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4a24      	ldr	r2, [pc, #144]	; (8001330 <ADC_Enable+0xcc>)
 800129e:	4013      	ands	r3, r2
 80012a0:	d00d      	beq.n	80012be <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a6:	2210      	movs	r2, #16
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	2201      	movs	r2, #1
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e033      	b.n	8001326 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	430a      	orrs	r2, r1
 80012cc:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f000 f830 	bl	8001334 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80012d4:	f7ff fc88 	bl	8000be8 <HAL_GetTick>
 80012d8:	0003      	movs	r3, r0
 80012da:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012dc:	e01b      	b.n	8001316 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012de:	f7ff fc83 	bl	8000be8 <HAL_GetTick>
 80012e2:	0002      	movs	r2, r0
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b0a      	cmp	r3, #10
 80012ea:	d914      	bls.n	8001316 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2201      	movs	r2, #1
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d00d      	beq.n	8001316 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fe:	2210      	movs	r2, #16
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	2201      	movs	r2, #1
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e007      	b.n	8001326 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2201      	movs	r2, #1
 800131e:	4013      	ands	r3, r2
 8001320:	2b01      	cmp	r3, #1
 8001322:	d1dc      	bne.n	80012de <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b004      	add	sp, #16
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	80000017 	.word	0x80000017

08001334 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <ADC_DelayMicroSecond+0x38>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	490b      	ldr	r1, [pc, #44]	; (8001370 <ADC_DelayMicroSecond+0x3c>)
 8001342:	0018      	movs	r0, r3
 8001344:	f7fe fef2 	bl	800012c <__udivsi3>
 8001348:	0003      	movs	r3, r0
 800134a:	001a      	movs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4353      	muls	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001352:	e002      	b.n	800135a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3b01      	subs	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f9      	bne.n	8001354 <ADC_DelayMicroSecond+0x20>
  }
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b004      	add	sp, #16
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	20000000 	.word	0x20000000
 8001370:	000f4240 	.word	0x000f4240

08001374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	0002      	movs	r2, r0
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b7f      	cmp	r3, #127	; 0x7f
 8001386:	d809      	bhi.n	800139c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	001a      	movs	r2, r3
 800138e:	231f      	movs	r3, #31
 8001390:	401a      	ands	r2, r3
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_EnableIRQ+0x30>)
 8001394:	2101      	movs	r1, #1
 8001396:	4091      	lsls	r1, r2
 8001398:	000a      	movs	r2, r1
 800139a:	601a      	str	r2, [r3, #0]
  }
}
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b002      	add	sp, #8
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	0002      	movs	r2, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b7f      	cmp	r3, #127	; 0x7f
 80013bc:	d828      	bhi.n	8001410 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013be:	4a2f      	ldr	r2, [pc, #188]	; (800147c <__NVIC_SetPriority+0xd4>)
 80013c0:	1dfb      	adds	r3, r7, #7
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	33c0      	adds	r3, #192	; 0xc0
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	589b      	ldr	r3, [r3, r2]
 80013ce:	1dfa      	adds	r2, r7, #7
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	0011      	movs	r1, r2
 80013d4:	2203      	movs	r2, #3
 80013d6:	400a      	ands	r2, r1
 80013d8:	00d2      	lsls	r2, r2, #3
 80013da:	21ff      	movs	r1, #255	; 0xff
 80013dc:	4091      	lsls	r1, r2
 80013de:	000a      	movs	r2, r1
 80013e0:	43d2      	mvns	r2, r2
 80013e2:	401a      	ands	r2, r3
 80013e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	019b      	lsls	r3, r3, #6
 80013ea:	22ff      	movs	r2, #255	; 0xff
 80013ec:	401a      	ands	r2, r3
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	0018      	movs	r0, r3
 80013f4:	2303      	movs	r3, #3
 80013f6:	4003      	ands	r3, r0
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013fc:	481f      	ldr	r0, [pc, #124]	; (800147c <__NVIC_SetPriority+0xd4>)
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b25b      	sxtb	r3, r3
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	430a      	orrs	r2, r1
 8001408:	33c0      	adds	r3, #192	; 0xc0
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800140e:	e031      	b.n	8001474 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001410:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <__NVIC_SetPriority+0xd8>)
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	0019      	movs	r1, r3
 8001418:	230f      	movs	r3, #15
 800141a:	400b      	ands	r3, r1
 800141c:	3b08      	subs	r3, #8
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3306      	adds	r3, #6
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	18d3      	adds	r3, r2, r3
 8001426:	3304      	adds	r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	1dfa      	adds	r2, r7, #7
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	0011      	movs	r1, r2
 8001430:	2203      	movs	r2, #3
 8001432:	400a      	ands	r2, r1
 8001434:	00d2      	lsls	r2, r2, #3
 8001436:	21ff      	movs	r1, #255	; 0xff
 8001438:	4091      	lsls	r1, r2
 800143a:	000a      	movs	r2, r1
 800143c:	43d2      	mvns	r2, r2
 800143e:	401a      	ands	r2, r3
 8001440:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	019b      	lsls	r3, r3, #6
 8001446:	22ff      	movs	r2, #255	; 0xff
 8001448:	401a      	ands	r2, r3
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	0018      	movs	r0, r3
 8001450:	2303      	movs	r3, #3
 8001452:	4003      	ands	r3, r0
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <__NVIC_SetPriority+0xd8>)
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	001c      	movs	r4, r3
 8001460:	230f      	movs	r3, #15
 8001462:	4023      	ands	r3, r4
 8001464:	3b08      	subs	r3, #8
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	430a      	orrs	r2, r1
 800146a:	3306      	adds	r3, #6
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	18c3      	adds	r3, r0, r3
 8001470:	3304      	adds	r3, #4
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b003      	add	sp, #12
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	1e5a      	subs	r2, r3, #1
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	045b      	lsls	r3, r3, #17
 8001494:	429a      	cmp	r2, r3
 8001496:	d301      	bcc.n	800149c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001498:	2301      	movs	r3, #1
 800149a:	e010      	b.n	80014be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <SysTick_Config+0x44>)
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	3a01      	subs	r2, #1
 80014a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a4:	2301      	movs	r3, #1
 80014a6:	425b      	negs	r3, r3
 80014a8:	2103      	movs	r1, #3
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7ff ff7c 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x44>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x44>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	210f      	movs	r1, #15
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	1c02      	adds	r2, r0, #0
 80014dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	0011      	movs	r1, r2
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	0002      	movs	r2, r0
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b25b      	sxtb	r3, r3
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff ff33 	bl	8001374 <__NVIC_EnableIRQ>
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff ffaf 	bl	8001484 <SysTick_Config>
 8001526:	0003      	movs	r3, r0
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001538:	230f      	movs	r3, #15
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2225      	movs	r2, #37	; 0x25
 8001544:	5c9b      	ldrb	r3, [r3, r2]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d008      	beq.n	800155e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2204      	movs	r2, #4
 8001550:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2224      	movs	r2, #36	; 0x24
 8001556:	2100      	movs	r1, #0
 8001558:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e024      	b.n	80015a8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	210e      	movs	r1, #14
 800156a:	438a      	bics	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	438a      	bics	r2, r1
 800157c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	221c      	movs	r2, #28
 8001584:	401a      	ands	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	2101      	movs	r1, #1
 800158c:	4091      	lsls	r1, r2
 800158e:	000a      	movs	r2, r1
 8001590:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2225      	movs	r2, #37	; 0x25
 8001596:	2101      	movs	r1, #1
 8001598:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2224      	movs	r2, #36	; 0x24
 800159e:	2100      	movs	r1, #0
 80015a0:	5499      	strb	r1, [r3, r2]

    return status;
 80015a2:	230f      	movs	r3, #15
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b004      	add	sp, #16
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b8:	210f      	movs	r1, #15
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2225      	movs	r2, #37	; 0x25
 80015c4:	5c9b      	ldrb	r3, [r3, r2]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d006      	beq.n	80015da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2204      	movs	r2, #4
 80015d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e02a      	b.n	8001630 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	210e      	movs	r1, #14
 80015e6:	438a      	bics	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2101      	movs	r1, #1
 80015f6:	438a      	bics	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	221c      	movs	r2, #28
 8001600:	401a      	ands	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2101      	movs	r1, #1
 8001608:	4091      	lsls	r1, r2
 800160a:	000a      	movs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2225      	movs	r2, #37	; 0x25
 8001612:	2101      	movs	r1, #1
 8001614:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2224      	movs	r2, #36	; 0x24
 800161a:	2100      	movs	r1, #0
 800161c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	0010      	movs	r0, r2
 800162e:	4798      	blx	r3
    }
  }
  return status;
 8001630:	230f      	movs	r3, #15
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	781b      	ldrb	r3, [r3, #0]
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b004      	add	sp, #16
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001656:	e155      	b.n	8001904 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2101      	movs	r1, #1
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4091      	lsls	r1, r2
 8001662:	000a      	movs	r2, r1
 8001664:	4013      	ands	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d100      	bne.n	8001670 <HAL_GPIO_Init+0x30>
 800166e:	e146      	b.n	80018fe <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2203      	movs	r2, #3
 8001676:	4013      	ands	r3, r2
 8001678:	2b01      	cmp	r3, #1
 800167a:	d005      	beq.n	8001688 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2203      	movs	r2, #3
 8001682:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001684:	2b02      	cmp	r3, #2
 8001686:	d130      	bne.n	80016ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	409a      	lsls	r2, r3
 8001696:	0013      	movs	r3, r2
 8001698:	43da      	mvns	r2, r3
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	409a      	lsls	r2, r3
 80016aa:	0013      	movs	r3, r2
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016be:	2201      	movs	r2, #1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
 80016c4:	0013      	movs	r3, r2
 80016c6:	43da      	mvns	r2, r3
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	2201      	movs	r2, #1
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
 80016dc:	0013      	movs	r3, r2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2203      	movs	r2, #3
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d017      	beq.n	8001726 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	2203      	movs	r2, #3
 8001702:	409a      	lsls	r2, r3
 8001704:	0013      	movs	r3, r2
 8001706:	43da      	mvns	r2, r3
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	409a      	lsls	r2, r3
 8001718:	0013      	movs	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2203      	movs	r2, #3
 800172c:	4013      	ands	r3, r2
 800172e:	2b02      	cmp	r3, #2
 8001730:	d123      	bne.n	800177a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	08da      	lsrs	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3208      	adds	r2, #8
 800173a:	0092      	lsls	r2, r2, #2
 800173c:	58d3      	ldr	r3, [r2, r3]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2207      	movs	r2, #7
 8001744:	4013      	ands	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	220f      	movs	r2, #15
 800174a:	409a      	lsls	r2, r3
 800174c:	0013      	movs	r3, r2
 800174e:	43da      	mvns	r2, r3
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2107      	movs	r1, #7
 800175e:	400b      	ands	r3, r1
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	409a      	lsls	r2, r3
 8001764:	0013      	movs	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	08da      	lsrs	r2, r3, #3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3208      	adds	r2, #8
 8001774:	0092      	lsls	r2, r2, #2
 8001776:	6939      	ldr	r1, [r7, #16]
 8001778:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	409a      	lsls	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	43da      	mvns	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2203      	movs	r2, #3
 8001798:	401a      	ands	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	409a      	lsls	r2, r3
 80017a0:	0013      	movs	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	23c0      	movs	r3, #192	; 0xc0
 80017b4:	029b      	lsls	r3, r3, #10
 80017b6:	4013      	ands	r3, r2
 80017b8:	d100      	bne.n	80017bc <HAL_GPIO_Init+0x17c>
 80017ba:	e0a0      	b.n	80018fe <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017bc:	4b57      	ldr	r3, [pc, #348]	; (800191c <HAL_GPIO_Init+0x2dc>)
 80017be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c0:	4b56      	ldr	r3, [pc, #344]	; (800191c <HAL_GPIO_Init+0x2dc>)
 80017c2:	2101      	movs	r1, #1
 80017c4:	430a      	orrs	r2, r1
 80017c6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c8:	4a55      	ldr	r2, [pc, #340]	; (8001920 <HAL_GPIO_Init+0x2e0>)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	589b      	ldr	r3, [r3, r2]
 80017d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2203      	movs	r2, #3
 80017da:	4013      	ands	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	409a      	lsls	r2, r3
 80017e2:	0013      	movs	r3, r2
 80017e4:	43da      	mvns	r2, r3
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	23a0      	movs	r3, #160	; 0xa0
 80017f0:	05db      	lsls	r3, r3, #23
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d01f      	beq.n	8001836 <HAL_GPIO_Init+0x1f6>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4a      	ldr	r2, [pc, #296]	; (8001924 <HAL_GPIO_Init+0x2e4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d019      	beq.n	8001832 <HAL_GPIO_Init+0x1f2>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a49      	ldr	r2, [pc, #292]	; (8001928 <HAL_GPIO_Init+0x2e8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <HAL_GPIO_Init+0x1ee>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a48      	ldr	r2, [pc, #288]	; (800192c <HAL_GPIO_Init+0x2ec>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00d      	beq.n	800182a <HAL_GPIO_Init+0x1ea>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a47      	ldr	r2, [pc, #284]	; (8001930 <HAL_GPIO_Init+0x2f0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d007      	beq.n	8001826 <HAL_GPIO_Init+0x1e6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a46      	ldr	r2, [pc, #280]	; (8001934 <HAL_GPIO_Init+0x2f4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_GPIO_Init+0x1e2>
 800181e:	2305      	movs	r3, #5
 8001820:	e00a      	b.n	8001838 <HAL_GPIO_Init+0x1f8>
 8001822:	2306      	movs	r3, #6
 8001824:	e008      	b.n	8001838 <HAL_GPIO_Init+0x1f8>
 8001826:	2304      	movs	r3, #4
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x1f8>
 800182a:	2303      	movs	r3, #3
 800182c:	e004      	b.n	8001838 <HAL_GPIO_Init+0x1f8>
 800182e:	2302      	movs	r3, #2
 8001830:	e002      	b.n	8001838 <HAL_GPIO_Init+0x1f8>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x1f8>
 8001836:	2300      	movs	r3, #0
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	2103      	movs	r1, #3
 800183c:	400a      	ands	r2, r1
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	4093      	lsls	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001848:	4935      	ldr	r1, [pc, #212]	; (8001920 <HAL_GPIO_Init+0x2e0>)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001856:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_GPIO_Init+0x2f8>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	43da      	mvns	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	035b      	lsls	r3, r3, #13
 800186e:	4013      	ands	r3, r2
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800187a:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_GPIO_Init+0x2f8>)
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_GPIO_Init+0x2f8>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43da      	mvns	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	039b      	lsls	r3, r3, #14
 8001898:	4013      	ands	r3, r2
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_GPIO_Init+0x2f8>)
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_GPIO_Init+0x2f8>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43da      	mvns	r2, r3
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	029b      	lsls	r3, r3, #10
 80018c2:	4013      	ands	r3, r2
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_GPIO_Init+0x2f8>)
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_GPIO_Init+0x2f8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43da      	mvns	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	025b      	lsls	r3, r3, #9
 80018ec:	4013      	ands	r3, r2
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_GPIO_Init+0x2f8>)
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	40da      	lsrs	r2, r3
 800190c:	1e13      	subs	r3, r2, #0
 800190e:	d000      	beq.n	8001912 <HAL_GPIO_Init+0x2d2>
 8001910:	e6a2      	b.n	8001658 <HAL_GPIO_Init+0x18>
  }
}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b006      	add	sp, #24
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000
 8001924:	50000400 	.word	0x50000400
 8001928:	50000800 	.word	0x50000800
 800192c:	50000c00 	.word	0x50000c00
 8001930:	50001000 	.word	0x50001000
 8001934:	50001c00 	.word	0x50001c00
 8001938:	40010400 	.word	0x40010400

0800193c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	000a      	movs	r2, r1
 8001946:	1cbb      	adds	r3, r7, #2
 8001948:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	1cba      	adds	r2, r7, #2
 8001950:	8812      	ldrh	r2, [r2, #0]
 8001952:	4013      	ands	r3, r2
 8001954:	d004      	beq.n	8001960 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001956:	230f      	movs	r3, #15
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e003      	b.n	8001968 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001960:	230f      	movs	r3, #15
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001968:	230f      	movs	r3, #15
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	781b      	ldrb	r3, [r3, #0]
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b004      	add	sp, #16
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	0008      	movs	r0, r1
 8001980:	0011      	movs	r1, r2
 8001982:	1cbb      	adds	r3, r7, #2
 8001984:	1c02      	adds	r2, r0, #0
 8001986:	801a      	strh	r2, [r3, #0]
 8001988:	1c7b      	adds	r3, r7, #1
 800198a:	1c0a      	adds	r2, r1, #0
 800198c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800198e:	1c7b      	adds	r3, r7, #1
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001996:	1cbb      	adds	r3, r7, #2
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800199e:	e003      	b.n	80019a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80019a0:	1cbb      	adds	r3, r7, #2
 80019a2:	881a      	ldrh	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	f000 fbbf 	bl	8002142 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019c4:	4bc9      	ldr	r3, [pc, #804]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	220c      	movs	r2, #12
 80019ca:	4013      	ands	r3, r2
 80019cc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ce:	4bc7      	ldr	r3, [pc, #796]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	025b      	lsls	r3, r3, #9
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2201      	movs	r2, #1
 80019e0:	4013      	ands	r3, r2
 80019e2:	d100      	bne.n	80019e6 <HAL_RCC_OscConfig+0x36>
 80019e4:	e07e      	b.n	8001ae4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d007      	beq.n	80019fc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d112      	bne.n	8001a18 <HAL_RCC_OscConfig+0x68>
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	025b      	lsls	r3, r3, #9
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d10d      	bne.n	8001a18 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	4bbb      	ldr	r3, [pc, #748]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	029b      	lsls	r3, r3, #10
 8001a04:	4013      	ands	r3, r2
 8001a06:	d100      	bne.n	8001a0a <HAL_RCC_OscConfig+0x5a>
 8001a08:	e06b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x132>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d167      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f000 fb95 	bl	8002142 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	025b      	lsls	r3, r3, #9
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_OscConfig+0x84>
 8001a24:	4bb1      	ldr	r3, [pc, #708]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4bb0      	ldr	r3, [pc, #704]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	0249      	lsls	r1, r1, #9
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e027      	b.n	8001a84 <HAL_RCC_OscConfig+0xd4>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	23a0      	movs	r3, #160	; 0xa0
 8001a3a:	02db      	lsls	r3, r3, #11
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d10e      	bne.n	8001a5e <HAL_RCC_OscConfig+0xae>
 8001a40:	4baa      	ldr	r3, [pc, #680]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4ba9      	ldr	r3, [pc, #676]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001a46:	2180      	movs	r1, #128	; 0x80
 8001a48:	02c9      	lsls	r1, r1, #11
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	4ba7      	ldr	r3, [pc, #668]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4ba6      	ldr	r3, [pc, #664]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0249      	lsls	r1, r1, #9
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e012      	b.n	8001a84 <HAL_RCC_OscConfig+0xd4>
 8001a5e:	4ba3      	ldr	r3, [pc, #652]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4ba2      	ldr	r3, [pc, #648]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001a64:	49a2      	ldr	r1, [pc, #648]	; (8001cf0 <HAL_RCC_OscConfig+0x340>)
 8001a66:	400a      	ands	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	4ba0      	ldr	r3, [pc, #640]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	025b      	lsls	r3, r3, #9
 8001a72:	4013      	ands	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4b9c      	ldr	r3, [pc, #624]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b9b      	ldr	r3, [pc, #620]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001a7e:	499d      	ldr	r1, [pc, #628]	; (8001cf4 <HAL_RCC_OscConfig+0x344>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d015      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f8ac 	bl	8000be8 <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a94:	e009      	b.n	8001aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a96:	f7ff f8a7 	bl	8000be8 <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b64      	cmp	r3, #100	; 0x64
 8001aa2:	d902      	bls.n	8001aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	f000 fb4c 	bl	8002142 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aaa:	4b90      	ldr	r3, [pc, #576]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	029b      	lsls	r3, r3, #10
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d0ef      	beq.n	8001a96 <HAL_RCC_OscConfig+0xe6>
 8001ab6:	e015      	b.n	8001ae4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f896 	bl	8000be8 <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac2:	f7ff f891 	bl	8000be8 <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b64      	cmp	r3, #100	; 0x64
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e336      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ad4:	4b85      	ldr	r3, [pc, #532]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	029b      	lsls	r3, r3, #10
 8001adc:	4013      	ands	r3, r2
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x112>
 8001ae0:	e000      	b.n	8001ae4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2202      	movs	r2, #2
 8001aea:	4013      	ands	r3, r2
 8001aec:	d100      	bne.n	8001af0 <HAL_RCC_OscConfig+0x140>
 8001aee:	e099      	b.n	8001c24 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	2220      	movs	r2, #32
 8001afa:	4013      	ands	r3, r2
 8001afc:	d009      	beq.n	8001b12 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001afe:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b7a      	ldr	r3, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001b04:	2120      	movs	r1, #32
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	4393      	bics	r3, r2
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d13e      	bne.n	8001b9c <HAL_RCC_OscConfig+0x1ec>
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d13b      	bne.n	8001b9c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001b24:	4b71      	ldr	r3, [pc, #452]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2204      	movs	r2, #4
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d004      	beq.n	8001b38 <HAL_RCC_OscConfig+0x188>
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e304      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b6c      	ldr	r3, [pc, #432]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a6e      	ldr	r2, [pc, #440]	; (8001cf8 <HAL_RCC_OscConfig+0x348>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	0019      	movs	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	021a      	lsls	r2, r3, #8
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b4e:	4b67      	ldr	r3, [pc, #412]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2209      	movs	r2, #9
 8001b54:	4393      	bics	r3, r2
 8001b56:	0019      	movs	r1, r3
 8001b58:	4b64      	ldr	r3, [pc, #400]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b60:	f000 fc42 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 8001b64:	0001      	movs	r1, r0
 8001b66:	4b61      	ldr	r3, [pc, #388]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	4013      	ands	r3, r2
 8001b70:	4a62      	ldr	r2, [pc, #392]	; (8001cfc <HAL_RCC_OscConfig+0x34c>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	000a      	movs	r2, r1
 8001b76:	40da      	lsrs	r2, r3
 8001b78:	4b61      	ldr	r3, [pc, #388]	; (8001d00 <HAL_RCC_OscConfig+0x350>)
 8001b7a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001b7c:	4b61      	ldr	r3, [pc, #388]	; (8001d04 <HAL_RCC_OscConfig+0x354>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2513      	movs	r5, #19
 8001b82:	197c      	adds	r4, r7, r5
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7fe ffe9 	bl	8000b5c <HAL_InitTick>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001b8e:	197b      	adds	r3, r7, r5
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d046      	beq.n	8001c24 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001b96:	197b      	adds	r3, r7, r5
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	e2d2      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d027      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ba2:	4b52      	ldr	r3, [pc, #328]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2209      	movs	r2, #9
 8001ba8:	4393      	bics	r3, r2
 8001baa:	0019      	movs	r1, r3
 8001bac:	4b4f      	ldr	r3, [pc, #316]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f818 	bl	8000be8 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff f813 	bl	8000be8 <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e2b8      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d0f1      	beq.n	8001bbe <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b44      	ldr	r3, [pc, #272]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4a46      	ldr	r2, [pc, #280]	; (8001cf8 <HAL_RCC_OscConfig+0x348>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	021a      	lsls	r2, r3, #8
 8001bea:	4b40      	ldr	r3, [pc, #256]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	e018      	b.n	8001c24 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	438a      	bics	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fff3 	bl	8000be8 <HAL_GetTick>
 8001c02:	0003      	movs	r3, r0
 8001c04:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c08:	f7fe ffee 	bl	8000be8 <HAL_GetTick>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e293      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c1a:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2204      	movs	r2, #4
 8001c20:	4013      	ands	r3, r2
 8001c22:	d1f1      	bne.n	8001c08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2210      	movs	r2, #16
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d100      	bne.n	8001c30 <HAL_RCC_OscConfig+0x280>
 8001c2e:	e0a2      	b.n	8001d76 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d140      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x29e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e279      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c4e:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4a2d      	ldr	r2, [pc, #180]	; (8001d08 <HAL_RCC_OscConfig+0x358>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c5c:	4b23      	ldr	r3, [pc, #140]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	0a19      	lsrs	r1, r3, #8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	061a      	lsls	r2, r3, #24
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001c72:	430a      	orrs	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	0b5b      	lsrs	r3, r3, #13
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	0212      	lsls	r2, r2, #8
 8001c82:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	491b      	ldr	r1, [pc, #108]	; (8001cfc <HAL_RCC_OscConfig+0x34c>)
 8001c90:	5ccb      	ldrb	r3, [r1, r3]
 8001c92:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_RCC_OscConfig+0x350>)
 8001c96:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_RCC_OscConfig+0x354>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2513      	movs	r5, #19
 8001c9e:	197c      	adds	r4, r7, r5
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7fe ff5b 	bl	8000b5c <HAL_InitTick>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001caa:	197b      	adds	r3, r7, r5
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d061      	beq.n	8001d76 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001cb2:	197b      	adds	r3, r7, r5
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	e244      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d040      	beq.n	8001d42 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	0049      	lsls	r1, r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7fe ff8b 	bl	8000be8 <HAL_GetTick>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cd6:	e019      	b.n	8001d0c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd8:	f7fe ff86 	bl	8000be8 <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d912      	bls.n	8001d0c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e22b      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	fffeffff 	.word	0xfffeffff
 8001cf4:	fffbffff 	.word	0xfffbffff
 8001cf8:	ffffe0ff 	.word	0xffffe0ff
 8001cfc:	08004460 	.word	0x08004460
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000004 	.word	0x20000004
 8001d08:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d0c:	4bca      	ldr	r3, [pc, #808]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4013      	ands	r3, r2
 8001d16:	d0df      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d18:	4bc7      	ldr	r3, [pc, #796]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4ac7      	ldr	r2, [pc, #796]	; (800203c <HAL_RCC_OscConfig+0x68c>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	0019      	movs	r1, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d26:	4bc4      	ldr	r3, [pc, #784]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d2c:	4bc2      	ldr	r3, [pc, #776]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	0a19      	lsrs	r1, r3, #8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	061a      	lsls	r2, r3, #24
 8001d3a:	4bbf      	ldr	r3, [pc, #764]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	e019      	b.n	8001d76 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d42:	4bbd      	ldr	r3, [pc, #756]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4bbc      	ldr	r3, [pc, #752]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001d48:	49bd      	ldr	r1, [pc, #756]	; (8002040 <HAL_RCC_OscConfig+0x690>)
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7fe ff4b 	bl	8000be8 <HAL_GetTick>
 8001d52:	0003      	movs	r3, r0
 8001d54:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d58:	f7fe ff46 	bl	8000be8 <HAL_GetTick>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1eb      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d6a:	4bb3      	ldr	r3, [pc, #716]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4013      	ands	r3, r2
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d036      	beq.n	8001dee <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d019      	beq.n	8001dbc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d88:	4bab      	ldr	r3, [pc, #684]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001d8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d8c:	4baa      	ldr	r3, [pc, #680]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001d8e:	2101      	movs	r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7fe ff28 	bl	8000be8 <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7fe ff23 	bl	8000be8 <HAL_GetTick>
 8001da2:	0002      	movs	r2, r0
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e1c8      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001db0:	4ba1      	ldr	r3, [pc, #644]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db4:	2202      	movs	r2, #2
 8001db6:	4013      	ands	r3, r2
 8001db8:	d0f1      	beq.n	8001d9e <HAL_RCC_OscConfig+0x3ee>
 8001dba:	e018      	b.n	8001dee <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbc:	4b9e      	ldr	r3, [pc, #632]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dc0:	4b9d      	ldr	r3, [pc, #628]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	438a      	bics	r2, r1
 8001dc6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc8:	f7fe ff0e 	bl	8000be8 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd2:	f7fe ff09 	bl	8000be8 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1ae      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001de4:	4b94      	ldr	r3, [pc, #592]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de8:	2202      	movs	r2, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d1f1      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2204      	movs	r2, #4
 8001df4:	4013      	ands	r3, r2
 8001df6:	d100      	bne.n	8001dfa <HAL_RCC_OscConfig+0x44a>
 8001df8:	e0ae      	b.n	8001f58 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfa:	2023      	movs	r0, #35	; 0x23
 8001dfc:	183b      	adds	r3, r7, r0
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e02:	4b8d      	ldr	r3, [pc, #564]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	055b      	lsls	r3, r3, #21
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	4b8a      	ldr	r3, [pc, #552]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e12:	4b89      	ldr	r3, [pc, #548]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	0549      	lsls	r1, r1, #21
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e1c:	183b      	adds	r3, r7, r0
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b88      	ldr	r3, [pc, #544]	; (8002044 <HAL_RCC_OscConfig+0x694>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d11a      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2e:	4b85      	ldr	r3, [pc, #532]	; (8002044 <HAL_RCC_OscConfig+0x694>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4b84      	ldr	r3, [pc, #528]	; (8002044 <HAL_RCC_OscConfig+0x694>)
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	0049      	lsls	r1, r1, #1
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3c:	f7fe fed4 	bl	8000be8 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e46:	f7fe fecf 	bl	8000be8 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b64      	cmp	r3, #100	; 0x64
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e174      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	4b7a      	ldr	r3, [pc, #488]	; (8002044 <HAL_RCC_OscConfig+0x694>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4013      	ands	r3, r2
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4d0>
 8001e70:	4b71      	ldr	r3, [pc, #452]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e74:	4b70      	ldr	r3, [pc, #448]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	0049      	lsls	r1, r1, #1
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	651a      	str	r2, [r3, #80]	; 0x50
 8001e7e:	e031      	b.n	8001ee4 <HAL_RCC_OscConfig+0x534>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x4f2>
 8001e88:	4b6b      	ldr	r3, [pc, #428]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001e8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e8c:	4b6a      	ldr	r3, [pc, #424]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001e8e:	496c      	ldr	r1, [pc, #432]	; (8002040 <HAL_RCC_OscConfig+0x690>)
 8001e90:	400a      	ands	r2, r1
 8001e92:	651a      	str	r2, [r3, #80]	; 0x50
 8001e94:	4b68      	ldr	r3, [pc, #416]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e98:	4b67      	ldr	r3, [pc, #412]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001e9a:	496b      	ldr	r1, [pc, #428]	; (8002048 <HAL_RCC_OscConfig+0x698>)
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	651a      	str	r2, [r3, #80]	; 0x50
 8001ea0:	e020      	b.n	8001ee4 <HAL_RCC_OscConfig+0x534>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	23a0      	movs	r3, #160	; 0xa0
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d10e      	bne.n	8001ecc <HAL_RCC_OscConfig+0x51c>
 8001eae:	4b62      	ldr	r3, [pc, #392]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eb2:	4b61      	ldr	r3, [pc, #388]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	00c9      	lsls	r1, r1, #3
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	651a      	str	r2, [r3, #80]	; 0x50
 8001ebc:	4b5e      	ldr	r3, [pc, #376]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ec0:	4b5d      	ldr	r3, [pc, #372]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	0049      	lsls	r1, r1, #1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	651a      	str	r2, [r3, #80]	; 0x50
 8001eca:	e00b      	b.n	8001ee4 <HAL_RCC_OscConfig+0x534>
 8001ecc:	4b5a      	ldr	r3, [pc, #360]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001ece:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ed0:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001ed2:	495b      	ldr	r1, [pc, #364]	; (8002040 <HAL_RCC_OscConfig+0x690>)
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ed8:	4b57      	ldr	r3, [pc, #348]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001eda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001edc:	4b56      	ldr	r3, [pc, #344]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001ede:	495a      	ldr	r1, [pc, #360]	; (8002048 <HAL_RCC_OscConfig+0x698>)
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d015      	beq.n	8001f18 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eec:	f7fe fe7c 	bl	8000be8 <HAL_GetTick>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ef4:	e009      	b.n	8001f0a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7fe fe77 	bl	8000be8 <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_RCC_OscConfig+0x69c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e11b      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f0a:	4b4b      	ldr	r3, [pc, #300]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001f0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4013      	ands	r3, r2
 8001f14:	d0ef      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x546>
 8001f16:	e014      	b.n	8001f42 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7fe fe66 	bl	8000be8 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f20:	e009      	b.n	8001f36 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7fe fe61 	bl	8000be8 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a47      	ldr	r2, [pc, #284]	; (800204c <HAL_RCC_OscConfig+0x69c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e105      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f36:	4b40      	ldr	r3, [pc, #256]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001f38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d1ef      	bne.n	8001f22 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f42:	2323      	movs	r3, #35	; 0x23
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4c:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f50:	4b39      	ldr	r3, [pc, #228]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001f52:	493f      	ldr	r1, [pc, #252]	; (8002050 <HAL_RCC_OscConfig+0x6a0>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d049      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d026      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f6a:	4b33      	ldr	r3, [pc, #204]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	4b32      	ldr	r3, [pc, #200]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001f70:	2101      	movs	r1, #1
 8001f72:	430a      	orrs	r2, r1
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	4b30      	ldr	r3, [pc, #192]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	635a      	str	r2, [r3, #52]	; 0x34
 8001f82:	4b34      	ldr	r3, [pc, #208]	; (8002054 <HAL_RCC_OscConfig+0x6a4>)
 8001f84:	6a1a      	ldr	r2, [r3, #32]
 8001f86:	4b33      	ldr	r3, [pc, #204]	; (8002054 <HAL_RCC_OscConfig+0x6a4>)
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	0189      	lsls	r1, r1, #6
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7fe fe2a 	bl	8000be8 <HAL_GetTick>
 8001f94:	0003      	movs	r3, r0
 8001f96:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f9a:	f7fe fe25 	bl	8000be8 <HAL_GetTick>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0ca      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fac:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d0f1      	beq.n	8001f9a <HAL_RCC_OscConfig+0x5ea>
 8001fb6:	e01e      	b.n	8001ff6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	438a      	bics	r2, r1
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	4b23      	ldr	r3, [pc, #140]	; (8002054 <HAL_RCC_OscConfig+0x6a4>)
 8001fc6:	6a1a      	ldr	r2, [r3, #32]
 8001fc8:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_RCC_OscConfig+0x6a4>)
 8001fca:	4923      	ldr	r1, [pc, #140]	; (8002058 <HAL_RCC_OscConfig+0x6a8>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fe0a 	bl	8000be8 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fda:	f7fe fe05 	bl	8000be8 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0aa      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d1f1      	bne.n	8001fda <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d100      	bne.n	8002000 <HAL_RCC_OscConfig+0x650>
 8001ffe:	e09f      	b.n	8002140 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	2b0c      	cmp	r3, #12
 8002004:	d100      	bne.n	8002008 <HAL_RCC_OscConfig+0x658>
 8002006:	e078      	b.n	80020fa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	2b02      	cmp	r3, #2
 800200e:	d159      	bne.n	80020c4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8002016:	4911      	ldr	r1, [pc, #68]	; (800205c <HAL_RCC_OscConfig+0x6ac>)
 8002018:	400a      	ands	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe fde4 	bl	8000be8 <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002024:	e01c      	b.n	8002060 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002026:	f7fe fddf 	bl	8000be8 <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d915      	bls.n	8002060 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e084      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
 8002038:	40021000 	.word	0x40021000
 800203c:	ffff1fff 	.word	0xffff1fff
 8002040:	fffffeff 	.word	0xfffffeff
 8002044:	40007000 	.word	0x40007000
 8002048:	fffffbff 	.word	0xfffffbff
 800204c:	00001388 	.word	0x00001388
 8002050:	efffffff 	.word	0xefffffff
 8002054:	40010000 	.word	0x40010000
 8002058:	ffffdfff 	.word	0xffffdfff
 800205c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002060:	4b3a      	ldr	r3, [pc, #232]	; (800214c <HAL_RCC_OscConfig+0x79c>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	049b      	lsls	r3, r3, #18
 8002068:	4013      	ands	r3, r2
 800206a:	d1dc      	bne.n	8002026 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206c:	4b37      	ldr	r3, [pc, #220]	; (800214c <HAL_RCC_OscConfig+0x79c>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4a37      	ldr	r2, [pc, #220]	; (8002150 <HAL_RCC_OscConfig+0x7a0>)
 8002072:	4013      	ands	r3, r2
 8002074:	0019      	movs	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	431a      	orrs	r2, r3
 8002086:	4b31      	ldr	r3, [pc, #196]	; (800214c <HAL_RCC_OscConfig+0x79c>)
 8002088:	430a      	orrs	r2, r1
 800208a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800208c:	4b2f      	ldr	r3, [pc, #188]	; (800214c <HAL_RCC_OscConfig+0x79c>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_RCC_OscConfig+0x79c>)
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	0449      	lsls	r1, r1, #17
 8002096:	430a      	orrs	r2, r1
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7fe fda5 	bl	8000be8 <HAL_GetTick>
 800209e:	0003      	movs	r3, r0
 80020a0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7fe fda0 	bl	8000be8 <HAL_GetTick>
 80020a8:	0002      	movs	r2, r0
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e045      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_RCC_OscConfig+0x79c>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	049b      	lsls	r3, r3, #18
 80020be:	4013      	ands	r3, r2
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x6f4>
 80020c2:	e03d      	b.n	8002140 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c4:	4b21      	ldr	r3, [pc, #132]	; (800214c <HAL_RCC_OscConfig+0x79c>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_RCC_OscConfig+0x79c>)
 80020ca:	4922      	ldr	r1, [pc, #136]	; (8002154 <HAL_RCC_OscConfig+0x7a4>)
 80020cc:	400a      	ands	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7fe fd8a 	bl	8000be8 <HAL_GetTick>
 80020d4:	0003      	movs	r3, r0
 80020d6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020da:	f7fe fd85 	bl	8000be8 <HAL_GetTick>
 80020de:	0002      	movs	r2, r0
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e02a      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020ec:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_RCC_OscConfig+0x79c>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	049b      	lsls	r3, r3, #18
 80020f4:	4013      	ands	r3, r2
 80020f6:	d1f0      	bne.n	80020da <HAL_RCC_OscConfig+0x72a>
 80020f8:	e022      	b.n	8002140 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e01d      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_RCC_OscConfig+0x79c>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	025b      	lsls	r3, r3, #9
 8002112:	401a      	ands	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	429a      	cmp	r2, r3
 800211a:	d10f      	bne.n	800213c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	23f0      	movs	r3, #240	; 0xf0
 8002120:	039b      	lsls	r3, r3, #14
 8002122:	401a      	ands	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d107      	bne.n	800213c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	23c0      	movs	r3, #192	; 0xc0
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	401a      	ands	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b00a      	add	sp, #40	; 0x28
 8002148:	bdb0      	pop	{r4, r5, r7, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	40021000 	.word	0x40021000
 8002150:	ff02ffff 	.word	0xff02ffff
 8002154:	feffffff 	.word	0xfeffffff

08002158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e128      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b96      	ldr	r3, [pc, #600]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2201      	movs	r2, #1
 8002172:	4013      	ands	r3, r2
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d91e      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b93      	ldr	r3, [pc, #588]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2201      	movs	r2, #1
 8002180:	4393      	bics	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	4b90      	ldr	r3, [pc, #576]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800218c:	f7fe fd2c 	bl	8000be8 <HAL_GetTick>
 8002190:	0003      	movs	r3, r0
 8002192:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002194:	e009      	b.n	80021aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002196:	f7fe fd27 	bl	8000be8 <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	4a8a      	ldr	r2, [pc, #552]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e109      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b87      	ldr	r3, [pc, #540]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2201      	movs	r2, #1
 80021b0:	4013      	ands	r3, r2
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1ee      	bne.n	8002196 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2202      	movs	r2, #2
 80021be:	4013      	ands	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c2:	4b83      	ldr	r3, [pc, #524]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	22f0      	movs	r2, #240	; 0xf0
 80021c8:	4393      	bics	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	4b7f      	ldr	r3, [pc, #508]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2201      	movs	r2, #1
 80021dc:	4013      	ands	r3, r2
 80021de:	d100      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x8a>
 80021e0:	e089      	b.n	80022f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ea:	4b79      	ldr	r3, [pc, #484]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	029b      	lsls	r3, r3, #10
 80021f2:	4013      	ands	r3, r2
 80021f4:	d120      	bne.n	8002238 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0e1      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002202:	4b73      	ldr	r3, [pc, #460]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	049b      	lsls	r3, r3, #18
 800220a:	4013      	ands	r3, r2
 800220c:	d114      	bne.n	8002238 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0d5      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d106      	bne.n	8002228 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800221a:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2204      	movs	r2, #4
 8002220:	4013      	ands	r3, r2
 8002222:	d109      	bne.n	8002238 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0ca      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002228:	4b69      	ldr	r3, [pc, #420]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4013      	ands	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0c2      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002238:	4b65      	ldr	r3, [pc, #404]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2203      	movs	r2, #3
 800223e:	4393      	bics	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4b62      	ldr	r3, [pc, #392]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800224c:	f7fe fccc 	bl	8000be8 <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d111      	bne.n	8002280 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800225c:	e009      	b.n	8002272 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225e:	f7fe fcc3 	bl	8000be8 <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	4a58      	ldr	r2, [pc, #352]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e0a5      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002272:	4b57      	ldr	r3, [pc, #348]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	220c      	movs	r2, #12
 8002278:	4013      	ands	r3, r2
 800227a:	2b08      	cmp	r3, #8
 800227c:	d1ef      	bne.n	800225e <HAL_RCC_ClockConfig+0x106>
 800227e:	e03a      	b.n	80022f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d111      	bne.n	80022ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002288:	e009      	b.n	800229e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228a:	f7fe fcad 	bl	8000be8 <HAL_GetTick>
 800228e:	0002      	movs	r2, r0
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	4a4d      	ldr	r2, [pc, #308]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e08f      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800229e:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	220c      	movs	r2, #12
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d1ef      	bne.n	800228a <HAL_RCC_ClockConfig+0x132>
 80022aa:	e024      	b.n	80022f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d11b      	bne.n	80022ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b4:	e009      	b.n	80022ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b6:	f7fe fc97 	bl	8000be8 <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	4a42      	ldr	r2, [pc, #264]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e079      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ca:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	220c      	movs	r2, #12
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d1ef      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x15e>
 80022d6:	e00e      	b.n	80022f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7fe fc86 	bl	8000be8 <HAL_GetTick>
 80022dc:	0002      	movs	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	4a3a      	ldr	r2, [pc, #232]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e068      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022ec:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	220c      	movs	r2, #12
 80022f2:	4013      	ands	r3, r2
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f6:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2201      	movs	r2, #1
 80022fc:	4013      	ands	r3, r2
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d21e      	bcs.n	8002342 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002304:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2201      	movs	r2, #1
 800230a:	4393      	bics	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002316:	f7fe fc67 	bl	8000be8 <HAL_GetTick>
 800231a:	0003      	movs	r3, r0
 800231c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	e009      	b.n	8002334 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7fe fc62 	bl	8000be8 <HAL_GetTick>
 8002324:	0002      	movs	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	4a28      	ldr	r2, [pc, #160]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e044      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2201      	movs	r2, #1
 800233a:	4013      	ands	r3, r2
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d1ee      	bne.n	8002320 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2204      	movs	r2, #4
 8002348:	4013      	ands	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234c:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a20      	ldr	r2, [pc, #128]	; (80023d4 <HAL_RCC_ClockConfig+0x27c>)
 8002352:	4013      	ands	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800235c:	430a      	orrs	r2, r1
 800235e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2208      	movs	r2, #8
 8002366:	4013      	ands	r3, r2
 8002368:	d00a      	beq.n	8002380 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	4a1a      	ldr	r2, [pc, #104]	; (80023d8 <HAL_RCC_ClockConfig+0x280>)
 8002370:	4013      	ands	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	00da      	lsls	r2, r3, #3
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800237c:	430a      	orrs	r2, r1
 800237e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002380:	f000 f832 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 8002384:	0001      	movs	r1, r0
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	220f      	movs	r2, #15
 800238e:	4013      	ands	r3, r2
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <HAL_RCC_ClockConfig+0x284>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	000a      	movs	r2, r1
 8002396:	40da      	lsrs	r2, r3
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_RCC_ClockConfig+0x288>)
 800239a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_RCC_ClockConfig+0x28c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	250b      	movs	r5, #11
 80023a2:	197c      	adds	r4, r7, r5
 80023a4:	0018      	movs	r0, r3
 80023a6:	f7fe fbd9 	bl	8000b5c <HAL_InitTick>
 80023aa:	0003      	movs	r3, r0
 80023ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80023ae:	197b      	adds	r3, r7, r5
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80023b6:	197b      	adds	r3, r7, r5
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	e000      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	0018      	movs	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b004      	add	sp, #16
 80023c4:	bdb0      	pop	{r4, r5, r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	40022000 	.word	0x40022000
 80023cc:	00001388 	.word	0x00001388
 80023d0:	40021000 	.word	0x40021000
 80023d4:	fffff8ff 	.word	0xfffff8ff
 80023d8:	ffffc7ff 	.word	0xffffc7ff
 80023dc:	08004460 	.word	0x08004460
 80023e0:	20000000 	.word	0x20000000
 80023e4:	20000004 	.word	0x20000004

080023e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b08e      	sub	sp, #56	; 0x38
 80023ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80023ee:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <HAL_RCC_GetSysClockFreq+0x138>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f6:	230c      	movs	r3, #12
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	d014      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x40>
 80023fe:	d900      	bls.n	8002402 <HAL_RCC_GetSysClockFreq+0x1a>
 8002400:	e07b      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x112>
 8002402:	2b04      	cmp	r3, #4
 8002404:	d002      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x24>
 8002406:	2b08      	cmp	r3, #8
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x3a>
 800240a:	e076      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800240c:	4b44      	ldr	r3, [pc, #272]	; (8002520 <HAL_RCC_GetSysClockFreq+0x138>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2210      	movs	r2, #16
 8002412:	4013      	ands	r3, r2
 8002414:	d002      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002416:	4b43      	ldr	r3, [pc, #268]	; (8002524 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800241a:	e07c      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800241c:	4b42      	ldr	r3, [pc, #264]	; (8002528 <HAL_RCC_GetSysClockFreq+0x140>)
 800241e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002420:	e079      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002422:	4b42      	ldr	r3, [pc, #264]	; (800252c <HAL_RCC_GetSysClockFreq+0x144>)
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002426:	e076      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	0c9a      	lsrs	r2, r3, #18
 800242c:	230f      	movs	r3, #15
 800242e:	401a      	ands	r2, r3
 8002430:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_RCC_GetSysClockFreq+0x148>)
 8002432:	5c9b      	ldrb	r3, [r3, r2]
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002438:	0d9a      	lsrs	r2, r3, #22
 800243a:	2303      	movs	r3, #3
 800243c:	4013      	ands	r3, r2
 800243e:	3301      	adds	r3, #1
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <HAL_RCC_GetSysClockFreq+0x138>)
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	025b      	lsls	r3, r3, #9
 800244a:	4013      	ands	r3, r2
 800244c:	d01a      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	4a35      	ldr	r2, [pc, #212]	; (800252c <HAL_RCC_GetSysClockFreq+0x144>)
 8002458:	2300      	movs	r3, #0
 800245a:	69b8      	ldr	r0, [r7, #24]
 800245c:	69f9      	ldr	r1, [r7, #28]
 800245e:	f7fd ff11 	bl	8000284 <__aeabi_lmul>
 8002462:	0002      	movs	r2, r0
 8002464:	000b      	movs	r3, r1
 8002466:	0010      	movs	r0, r2
 8002468:	0019      	movs	r1, r3
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f7fd fee5 	bl	8000244 <__aeabi_uldivmod>
 800247a:	0002      	movs	r2, r0
 800247c:	000b      	movs	r3, r1
 800247e:	0013      	movs	r3, r2
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
 8002482:	e037      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002484:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_RCC_GetSysClockFreq+0x138>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2210      	movs	r2, #16
 800248a:	4013      	ands	r3, r2
 800248c:	d01a      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4a23      	ldr	r2, [pc, #140]	; (8002524 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002498:	2300      	movs	r3, #0
 800249a:	68b8      	ldr	r0, [r7, #8]
 800249c:	68f9      	ldr	r1, [r7, #12]
 800249e:	f7fd fef1 	bl	8000284 <__aeabi_lmul>
 80024a2:	0002      	movs	r2, r0
 80024a4:	000b      	movs	r3, r1
 80024a6:	0010      	movs	r0, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f7fd fec5 	bl	8000244 <__aeabi_uldivmod>
 80024ba:	0002      	movs	r2, r0
 80024bc:	000b      	movs	r3, r1
 80024be:	0013      	movs	r3, r2
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
 80024c2:	e017      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	0018      	movs	r0, r3
 80024c8:	2300      	movs	r3, #0
 80024ca:	0019      	movs	r1, r3
 80024cc:	4a16      	ldr	r2, [pc, #88]	; (8002528 <HAL_RCC_GetSysClockFreq+0x140>)
 80024ce:	2300      	movs	r3, #0
 80024d0:	f7fd fed8 	bl	8000284 <__aeabi_lmul>
 80024d4:	0002      	movs	r2, r0
 80024d6:	000b      	movs	r3, r1
 80024d8:	0010      	movs	r0, r2
 80024da:	0019      	movs	r1, r3
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	001c      	movs	r4, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	001d      	movs	r5, r3
 80024e4:	0022      	movs	r2, r4
 80024e6:	002b      	movs	r3, r5
 80024e8:	f7fd feac 	bl	8000244 <__aeabi_uldivmod>
 80024ec:	0002      	movs	r2, r0
 80024ee:	000b      	movs	r3, r1
 80024f0:	0013      	movs	r3, r2
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80024f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024f8:	e00d      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_GetSysClockFreq+0x138>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	0b5b      	lsrs	r3, r3, #13
 8002500:	2207      	movs	r2, #7
 8002502:	4013      	ands	r3, r2
 8002504:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	3301      	adds	r3, #1
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	0212      	lsls	r2, r2, #8
 800250e:	409a      	lsls	r2, r3
 8002510:	0013      	movs	r3, r2
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002514:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002518:	0018      	movs	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	b00e      	add	sp, #56	; 0x38
 800251e:	bdb0      	pop	{r4, r5, r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	003d0900 	.word	0x003d0900
 8002528:	00f42400 	.word	0x00f42400
 800252c:	007a1200 	.word	0x007a1200
 8002530:	08004478 	.word	0x08004478

08002534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002538:	4b02      	ldr	r3, [pc, #8]	; (8002544 <HAL_RCC_GetHCLKFreq+0x10>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	20000000 	.word	0x20000000

08002548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800254c:	f7ff fff2 	bl	8002534 <HAL_RCC_GetHCLKFreq>
 8002550:	0001      	movs	r1, r0
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	2207      	movs	r2, #7
 800255a:	4013      	ands	r3, r2
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800255e:	5cd3      	ldrb	r3, [r2, r3]
 8002560:	40d9      	lsrs	r1, r3
 8002562:	000b      	movs	r3, r1
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	40021000 	.word	0x40021000
 8002570:	08004470 	.word	0x08004470

08002574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002578:	f7ff ffdc 	bl	8002534 <HAL_RCC_GetHCLKFreq>
 800257c:	0001      	movs	r1, r0
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	0adb      	lsrs	r3, r3, #11
 8002584:	2207      	movs	r2, #7
 8002586:	4013      	ands	r3, r2
 8002588:	4a04      	ldr	r2, [pc, #16]	; (800259c <HAL_RCC_GetPCLK2Freq+0x28>)
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	40d9      	lsrs	r1, r3
 800258e:	000b      	movs	r3, r1
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	40021000 	.word	0x40021000
 800259c:	08004470 	.word	0x08004470

080025a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80025a8:	2317      	movs	r3, #23
 80025aa:	18fb      	adds	r3, r7, r3
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2220      	movs	r2, #32
 80025b6:	4013      	ands	r3, r2
 80025b8:	d106      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	4013      	ands	r3, r2
 80025c4:	d100      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80025c6:	e104      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c8:	4bb9      	ldr	r3, [pc, #740]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	055b      	lsls	r3, r3, #21
 80025d0:	4013      	ands	r3, r2
 80025d2:	d10a      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d4:	4bb6      	ldr	r3, [pc, #728]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d8:	4bb5      	ldr	r3, [pc, #724]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	0549      	lsls	r1, r1, #21
 80025de:	430a      	orrs	r2, r1
 80025e0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80025e2:	2317      	movs	r3, #23
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	4bb2      	ldr	r3, [pc, #712]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4013      	ands	r3, r2
 80025f4:	d11a      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f6:	4baf      	ldr	r3, [pc, #700]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4bae      	ldr	r3, [pc, #696]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	0049      	lsls	r1, r1, #1
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002604:	f7fe faf0 	bl	8000be8 <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	e008      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260e:	f7fe faeb 	bl	8000be8 <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b64      	cmp	r3, #100	; 0x64
 800261a:	d901      	bls.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e143      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	4ba4      	ldr	r3, [pc, #656]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4013      	ands	r3, r2
 800262a:	d0f0      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800262c:	4ba0      	ldr	r3, [pc, #640]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	23c0      	movs	r3, #192	; 0xc0
 8002632:	039b      	lsls	r3, r3, #14
 8002634:	4013      	ands	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	23c0      	movs	r3, #192	; 0xc0
 800263e:	039b      	lsls	r3, r3, #14
 8002640:	4013      	ands	r3, r2
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	429a      	cmp	r2, r3
 8002646:	d107      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	23c0      	movs	r3, #192	; 0xc0
 800264e:	039b      	lsls	r3, r3, #14
 8002650:	4013      	ands	r3, r2
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d013      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	23c0      	movs	r3, #192	; 0xc0
 800265e:	029b      	lsls	r3, r3, #10
 8002660:	401a      	ands	r2, r3
 8002662:	23c0      	movs	r3, #192	; 0xc0
 8002664:	029b      	lsls	r3, r3, #10
 8002666:	429a      	cmp	r2, r3
 8002668:	d10a      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800266a:	4b91      	ldr	r3, [pc, #580]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	029b      	lsls	r3, r3, #10
 8002672:	401a      	ands	r2, r3
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	029b      	lsls	r3, r3, #10
 8002678:	429a      	cmp	r2, r3
 800267a:	d101      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e113      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002680:	4b8b      	ldr	r3, [pc, #556]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002684:	23c0      	movs	r3, #192	; 0xc0
 8002686:	029b      	lsls	r3, r3, #10
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d049      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	23c0      	movs	r3, #192	; 0xc0
 8002698:	029b      	lsls	r3, r3, #10
 800269a:	4013      	ands	r3, r2
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d004      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2220      	movs	r2, #32
 80026a8:	4013      	ands	r3, r2
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	23c0      	movs	r3, #192	; 0xc0
 80026b2:	029b      	lsls	r3, r3, #10
 80026b4:	4013      	ands	r3, r2
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d034      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	4013      	ands	r3, r2
 80026c6:	d02e      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80026c8:	4b79      	ldr	r3, [pc, #484]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026cc:	4a7a      	ldr	r2, [pc, #488]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026d2:	4b77      	ldr	r3, [pc, #476]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	0309      	lsls	r1, r1, #12
 80026dc:	430a      	orrs	r2, r1
 80026de:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026e0:	4b73      	ldr	r3, [pc, #460]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026e4:	4b72      	ldr	r3, [pc, #456]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026e6:	4975      	ldr	r1, [pc, #468]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80026e8:	400a      	ands	r2, r1
 80026ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80026ec:	4b70      	ldr	r3, [pc, #448]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	d014      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fa74 	bl	8000be8 <HAL_GetTick>
 8002700:	0003      	movs	r3, r0
 8002702:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002704:	e009      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7fe fa6f 	bl	8000be8 <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	4a6b      	ldr	r2, [pc, #428]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0c6      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800271a:	4b65      	ldr	r3, [pc, #404]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800271c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4013      	ands	r3, r2
 8002724:	d0ef      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	4013      	ands	r3, r2
 8002730:	d01f      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	23c0      	movs	r3, #192	; 0xc0
 8002738:	029b      	lsls	r3, r3, #10
 800273a:	401a      	ands	r2, r3
 800273c:	23c0      	movs	r3, #192	; 0xc0
 800273e:	029b      	lsls	r3, r3, #10
 8002740:	429a      	cmp	r2, r3
 8002742:	d10c      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002744:	4b5a      	ldr	r3, [pc, #360]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a5e      	ldr	r2, [pc, #376]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800274a:	4013      	ands	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	23c0      	movs	r3, #192	; 0xc0
 8002754:	039b      	lsls	r3, r3, #14
 8002756:	401a      	ands	r2, r3
 8002758:	4b55      	ldr	r3, [pc, #340]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	4b54      	ldr	r3, [pc, #336]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002760:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	23c0      	movs	r3, #192	; 0xc0
 8002768:	029b      	lsls	r3, r3, #10
 800276a:	401a      	ands	r2, r3
 800276c:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800276e:	430a      	orrs	r2, r1
 8002770:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2220      	movs	r2, #32
 8002778:	4013      	ands	r3, r2
 800277a:	d01f      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	23c0      	movs	r3, #192	; 0xc0
 8002782:	029b      	lsls	r3, r3, #10
 8002784:	401a      	ands	r2, r3
 8002786:	23c0      	movs	r3, #192	; 0xc0
 8002788:	029b      	lsls	r3, r3, #10
 800278a:	429a      	cmp	r2, r3
 800278c:	d10c      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800278e:	4b48      	ldr	r3, [pc, #288]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a4c      	ldr	r2, [pc, #304]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002794:	4013      	ands	r3, r2
 8002796:	0019      	movs	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	23c0      	movs	r3, #192	; 0xc0
 800279e:	039b      	lsls	r3, r3, #14
 80027a0:	401a      	ands	r2, r3
 80027a2:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	4b41      	ldr	r3, [pc, #260]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027aa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	23c0      	movs	r3, #192	; 0xc0
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	401a      	ands	r2, r3
 80027b6:	4b3e      	ldr	r3, [pc, #248]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027b8:	430a      	orrs	r2, r1
 80027ba:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027bc:	2317      	movs	r3, #23
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ca:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027cc:	493e      	ldr	r1, [pc, #248]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80027ce:	400a      	ands	r2, r1
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2201      	movs	r2, #1
 80027d8:	4013      	ands	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027dc:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e0:	2203      	movs	r2, #3
 80027e2:	4393      	bics	r3, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027ec:	430a      	orrs	r2, r1
 80027ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2202      	movs	r2, #2
 80027f6:	4013      	ands	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027fa:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	220c      	movs	r2, #12
 8002800:	4393      	bics	r3, r2
 8002802:	0019      	movs	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800280a:	430a      	orrs	r2, r1
 800280c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2204      	movs	r2, #4
 8002814:	4013      	ands	r3, r2
 8002816:	d009      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002818:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800281a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281c:	4a2b      	ldr	r2, [pc, #172]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800281e:	4013      	ands	r3, r2
 8002820:	0019      	movs	r1, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002828:	430a      	orrs	r2, r1
 800282a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2208      	movs	r2, #8
 8002832:	4013      	ands	r3, r2
 8002834:	d009      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	4a25      	ldr	r2, [pc, #148]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800283c:	4013      	ands	r3, r2
 800283e:	0019      	movs	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002846:	430a      	orrs	r2, r1
 8002848:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4013      	ands	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	4a17      	ldr	r2, [pc, #92]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800285c:	4013      	ands	r3, r2
 800285e:	0019      	movs	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002866:	430a      	orrs	r2, r1
 8002868:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2240      	movs	r2, #64	; 0x40
 8002870:	4013      	ands	r3, r2
 8002872:	d009      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002878:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800287a:	4013      	ands	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002884:	430a      	orrs	r2, r1
 8002886:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2280      	movs	r2, #128	; 0x80
 800288e:	4013      	ands	r3, r2
 8002890:	d009      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002898:	4013      	ands	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1a      	ldr	r2, [r3, #32]
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028a2:	430a      	orrs	r2, r1
 80028a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b006      	add	sp, #24
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40007000 	.word	0x40007000
 80028b8:	fffcffff 	.word	0xfffcffff
 80028bc:	fff7ffff 	.word	0xfff7ffff
 80028c0:	00001388 	.word	0x00001388
 80028c4:	ffcfffff 	.word	0xffcfffff
 80028c8:	efffffff 	.word	0xefffffff
 80028cc:	fffff3ff 	.word	0xfffff3ff
 80028d0:	ffffcfff 	.word	0xffffcfff
 80028d4:	fbffffff 	.word	0xfbffffff
 80028d8:	fff3ffff 	.word	0xfff3ffff

080028dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e044      	b.n	8002978 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d107      	bne.n	8002906 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2278      	movs	r2, #120	; 0x78
 80028fa:	2100      	movs	r1, #0
 80028fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	0018      	movs	r0, r3
 8002902:	f7fe f835 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2224      	movs	r2, #36	; 0x24
 800290a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2101      	movs	r1, #1
 8002918:	438a      	bics	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	0018      	movs	r0, r3
 8002920:	f000 fbce 	bl	80030c0 <UART_SetConfig>
 8002924:	0003      	movs	r3, r0
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e024      	b.n	8002978 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0018      	movs	r0, r3
 800293a:	f000 fe5f 	bl	80035fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	490d      	ldr	r1, [pc, #52]	; (8002980 <HAL_UART_Init+0xa4>)
 800294a:	400a      	ands	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	212a      	movs	r1, #42	; 0x2a
 800295a:	438a      	bics	r2, r1
 800295c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2101      	movs	r1, #1
 800296a:	430a      	orrs	r2, r1
 800296c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f000 fef7 	bl	8003764 <UART_CheckIdleState>
 8002976:	0003      	movs	r3, r0
}
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}
 8002980:	ffffb7ff 	.word	0xffffb7ff

08002984 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	1dbb      	adds	r3, r7, #6
 8002992:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002998:	2b20      	cmp	r3, #32
 800299a:	d000      	beq.n	800299e <HAL_UART_Transmit+0x1a>
 800299c:	e08c      	b.n	8002ab8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_UART_Transmit+0x28>
 80029a4:	1dbb      	adds	r3, r7, #6
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e084      	b.n	8002aba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	015b      	lsls	r3, r3, #5
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d109      	bne.n	80029d0 <HAL_UART_Transmit+0x4c>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2201      	movs	r2, #1
 80029c8:	4013      	ands	r3, r2
 80029ca:	d001      	beq.n	80029d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e074      	b.n	8002aba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2284      	movs	r2, #132	; 0x84
 80029d4:	2100      	movs	r1, #0
 80029d6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2221      	movs	r2, #33	; 0x21
 80029dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029de:	f7fe f903 	bl	8000be8 <HAL_GetTick>
 80029e2:	0003      	movs	r3, r0
 80029e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1dba      	adds	r2, r7, #6
 80029ea:	2150      	movs	r1, #80	; 0x50
 80029ec:	8812      	ldrh	r2, [r2, #0]
 80029ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1dba      	adds	r2, r7, #6
 80029f4:	2152      	movs	r1, #82	; 0x52
 80029f6:	8812      	ldrh	r2, [r2, #0]
 80029f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	015b      	lsls	r3, r3, #5
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d108      	bne.n	8002a18 <HAL_UART_Transmit+0x94>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d104      	bne.n	8002a18 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	e003      	b.n	8002a20 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a20:	e02f      	b.n	8002a82 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	f000 ff40 	bl	80038b4 <UART_WaitOnFlagUntilTimeout>
 8002a34:	1e03      	subs	r3, r0, #0
 8002a36:	d004      	beq.n	8002a42 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e03b      	b.n	8002aba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10b      	bne.n	8002a60 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	05d2      	lsls	r2, r2, #23
 8002a54:	0dd2      	lsrs	r2, r2, #23
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	e007      	b.n	8002a70 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	781a      	ldrb	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2252      	movs	r2, #82	; 0x52
 8002a74:	5a9b      	ldrh	r3, [r3, r2]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b299      	uxth	r1, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2252      	movs	r2, #82	; 0x52
 8002a80:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2252      	movs	r2, #82	; 0x52
 8002a86:	5a9b      	ldrh	r3, [r3, r2]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1c9      	bne.n	8002a22 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	0013      	movs	r3, r2
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2140      	movs	r1, #64	; 0x40
 8002a9c:	f000 ff0a 	bl	80038b4 <UART_WaitOnFlagUntilTimeout>
 8002aa0:	1e03      	subs	r3, r0, #0
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e005      	b.n	8002aba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e000      	b.n	8002aba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002ab8:	2302      	movs	r3, #2
  }
}
 8002aba:	0018      	movs	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b008      	add	sp, #32
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b0ab      	sub	sp, #172	; 0xac
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	22a4      	movs	r2, #164	; 0xa4
 8002ad4:	18b9      	adds	r1, r7, r2
 8002ad6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	20a0      	movs	r0, #160	; 0xa0
 8002ae0:	1839      	adds	r1, r7, r0
 8002ae2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	219c      	movs	r1, #156	; 0x9c
 8002aec:	1879      	adds	r1, r7, r1
 8002aee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002af0:	0011      	movs	r1, r2
 8002af2:	18bb      	adds	r3, r7, r2
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a99      	ldr	r2, [pc, #612]	; (8002d5c <HAL_UART_IRQHandler+0x298>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	2298      	movs	r2, #152	; 0x98
 8002afc:	18bc      	adds	r4, r7, r2
 8002afe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002b00:	18bb      	adds	r3, r7, r2
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d114      	bne.n	8002b32 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d00f      	beq.n	8002b32 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b12:	183b      	adds	r3, r7, r0
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2220      	movs	r2, #32
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d00a      	beq.n	8002b32 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d100      	bne.n	8002b26 <HAL_UART_IRQHandler+0x62>
 8002b24:	e2a0      	b.n	8003068 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	0010      	movs	r0, r2
 8002b2e:	4798      	blx	r3
      }
      return;
 8002b30:	e29a      	b.n	8003068 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b32:	2398      	movs	r3, #152	; 0x98
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d100      	bne.n	8002b3e <HAL_UART_IRQHandler+0x7a>
 8002b3c:	e114      	b.n	8002d68 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b3e:	239c      	movs	r3, #156	; 0x9c
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2201      	movs	r2, #1
 8002b46:	4013      	ands	r3, r2
 8002b48:	d106      	bne.n	8002b58 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b4a:	23a0      	movs	r3, #160	; 0xa0
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a83      	ldr	r2, [pc, #524]	; (8002d60 <HAL_UART_IRQHandler+0x29c>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	d100      	bne.n	8002b58 <HAL_UART_IRQHandler+0x94>
 8002b56:	e107      	b.n	8002d68 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b58:	23a4      	movs	r3, #164	; 0xa4
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	4013      	ands	r3, r2
 8002b62:	d012      	beq.n	8002b8a <HAL_UART_IRQHandler+0xc6>
 8002b64:	23a0      	movs	r3, #160	; 0xa0
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d00b      	beq.n	8002b8a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2201      	movs	r2, #1
 8002b78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2284      	movs	r2, #132	; 0x84
 8002b7e:	589b      	ldr	r3, [r3, r2]
 8002b80:	2201      	movs	r2, #1
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2184      	movs	r1, #132	; 0x84
 8002b88:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b8a:	23a4      	movs	r3, #164	; 0xa4
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2202      	movs	r2, #2
 8002b92:	4013      	ands	r3, r2
 8002b94:	d011      	beq.n	8002bba <HAL_UART_IRQHandler+0xf6>
 8002b96:	239c      	movs	r3, #156	; 0x9c
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d00b      	beq.n	8002bba <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2284      	movs	r2, #132	; 0x84
 8002bae:	589b      	ldr	r3, [r3, r2]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2184      	movs	r1, #132	; 0x84
 8002bb8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bba:	23a4      	movs	r3, #164	; 0xa4
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d011      	beq.n	8002bea <HAL_UART_IRQHandler+0x126>
 8002bc6:	239c      	movs	r3, #156	; 0x9c
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d00b      	beq.n	8002bea <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2284      	movs	r2, #132	; 0x84
 8002bde:	589b      	ldr	r3, [r3, r2]
 8002be0:	2202      	movs	r2, #2
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2184      	movs	r1, #132	; 0x84
 8002be8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002bea:	23a4      	movs	r3, #164	; 0xa4
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d017      	beq.n	8002c26 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bf6:	23a0      	movs	r3, #160	; 0xa0
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d105      	bne.n	8002c0e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c02:	239c      	movs	r3, #156	; 0x9c
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c0c:	d00b      	beq.n	8002c26 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2208      	movs	r2, #8
 8002c14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2284      	movs	r2, #132	; 0x84
 8002c1a:	589b      	ldr	r3, [r3, r2]
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2184      	movs	r1, #132	; 0x84
 8002c24:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c26:	23a4      	movs	r3, #164	; 0xa4
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	4013      	ands	r3, r2
 8002c32:	d013      	beq.n	8002c5c <HAL_UART_IRQHandler+0x198>
 8002c34:	23a0      	movs	r3, #160	; 0xa0
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	04db      	lsls	r3, r3, #19
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d00c      	beq.n	8002c5c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2280      	movs	r2, #128	; 0x80
 8002c48:	0112      	lsls	r2, r2, #4
 8002c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2284      	movs	r2, #132	; 0x84
 8002c50:	589b      	ldr	r3, [r3, r2]
 8002c52:	2220      	movs	r2, #32
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2184      	movs	r1, #132	; 0x84
 8002c5a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2284      	movs	r2, #132	; 0x84
 8002c60:	589b      	ldr	r3, [r3, r2]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d100      	bne.n	8002c68 <HAL_UART_IRQHandler+0x1a4>
 8002c66:	e201      	b.n	800306c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c68:	23a4      	movs	r3, #164	; 0xa4
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	4013      	ands	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c74:	23a0      	movs	r3, #160	; 0xa0
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d008      	beq.n	8002c92 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	0010      	movs	r0, r2
 8002c90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2284      	movs	r2, #132	; 0x84
 8002c96:	589b      	ldr	r3, [r3, r2]
 8002c98:	2194      	movs	r1, #148	; 0x94
 8002c9a:	187a      	adds	r2, r7, r1
 8002c9c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2240      	movs	r2, #64	; 0x40
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b40      	cmp	r3, #64	; 0x40
 8002caa:	d004      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2228      	movs	r2, #40	; 0x28
 8002cb2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cb4:	d047      	beq.n	8002d46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f000 fe65 	bl	8003988 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2240      	movs	r2, #64	; 0x40
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b40      	cmp	r3, #64	; 0x40
 8002cca:	d137      	bne.n	8002d3c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd4:	2090      	movs	r0, #144	; 0x90
 8002cd6:	183a      	adds	r2, r7, r0
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	2301      	movs	r3, #1
 8002cdc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ce0:	f383 8810 	msr	PRIMASK, r3
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2140      	movs	r1, #64	; 0x40
 8002cf2:	438a      	bics	r2, r1
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	183b      	adds	r3, r7, r0
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cfe:	f383 8810 	msr	PRIMASK, r3
}
 8002d02:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d012      	beq.n	8002d32 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <HAL_UART_IRQHandler+0x2a0>)
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f7fe fc49 	bl	80015b0 <HAL_DMA_Abort_IT>
 8002d1e:	1e03      	subs	r3, r0, #0
 8002d20:	d01a      	beq.n	8002d58 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d30:	e012      	b.n	8002d58 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f000 f9af 	bl	8003098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d3a:	e00d      	b.n	8002d58 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 f9aa 	bl	8003098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d44:	e008      	b.n	8002d58 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f9a5 	bl	8003098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2284      	movs	r2, #132	; 0x84
 8002d52:	2100      	movs	r1, #0
 8002d54:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002d56:	e189      	b.n	800306c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d58:	46c0      	nop			; (mov r8, r8)
    return;
 8002d5a:	e187      	b.n	800306c <HAL_UART_IRQHandler+0x5a8>
 8002d5c:	0000080f 	.word	0x0000080f
 8002d60:	04000120 	.word	0x04000120
 8002d64:	08003a51 	.word	0x08003a51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d000      	beq.n	8002d72 <HAL_UART_IRQHandler+0x2ae>
 8002d70:	e13b      	b.n	8002fea <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d72:	23a4      	movs	r3, #164	; 0xa4
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2210      	movs	r2, #16
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d100      	bne.n	8002d80 <HAL_UART_IRQHandler+0x2bc>
 8002d7e:	e134      	b.n	8002fea <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d80:	23a0      	movs	r3, #160	; 0xa0
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2210      	movs	r2, #16
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <HAL_UART_IRQHandler+0x2ca>
 8002d8c:	e12d      	b.n	8002fea <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2210      	movs	r2, #16
 8002d94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2240      	movs	r2, #64	; 0x40
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d000      	beq.n	8002da6 <HAL_UART_IRQHandler+0x2e2>
 8002da4:	e0a1      	b.n	8002eea <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	217e      	movs	r1, #126	; 0x7e
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d100      	bne.n	8002dbe <HAL_UART_IRQHandler+0x2fa>
 8002dbc:	e158      	b.n	8003070 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2258      	movs	r2, #88	; 0x58
 8002dc2:	5a9b      	ldrh	r3, [r3, r2]
 8002dc4:	187a      	adds	r2, r7, r1
 8002dc6:	8812      	ldrh	r2, [r2, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d300      	bcc.n	8002dce <HAL_UART_IRQHandler+0x30a>
 8002dcc:	e150      	b.n	8003070 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	187a      	adds	r2, r7, r1
 8002dd2:	215a      	movs	r1, #90	; 0x5a
 8002dd4:	8812      	ldrh	r2, [r2, #0]
 8002dd6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2220      	movs	r2, #32
 8002de2:	4013      	ands	r3, r2
 8002de4:	d16f      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dee:	67bb      	str	r3, [r7, #120]	; 0x78
 8002df0:	2301      	movs	r3, #1
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	f383 8810 	msr	PRIMASK, r3
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	499e      	ldr	r1, [pc, #632]	; (8003080 <HAL_UART_IRQHandler+0x5bc>)
 8002e08:	400a      	ands	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e12:	f383 8810 	msr	PRIMASK, r3
}
 8002e16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e18:	f3ef 8310 	mrs	r3, PRIMASK
 8002e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e20:	677b      	str	r3, [r7, #116]	; 0x74
 8002e22:	2301      	movs	r3, #1
 8002e24:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e28:	f383 8810 	msr	PRIMASK, r3
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2101      	movs	r1, #1
 8002e3a:	438a      	bics	r2, r1
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e40:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e44:	f383 8810 	msr	PRIMASK, r3
}
 8002e48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e52:	673b      	str	r3, [r7, #112]	; 0x70
 8002e54:	2301      	movs	r3, #1
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5a:	f383 8810 	msr	PRIMASK, r3
}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2140      	movs	r1, #64	; 0x40
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e72:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e76:	f383 8810 	msr	PRIMASK, r3
}
 8002e7a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2280      	movs	r2, #128	; 0x80
 8002e80:	2120      	movs	r1, #32
 8002e82:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e94:	2301      	movs	r3, #1
 8002e96:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e9a:	f383 8810 	msr	PRIMASK, r3
}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2110      	movs	r1, #16
 8002eac:	438a      	bics	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb6:	f383 8810 	msr	PRIMASK, r3
}
 8002eba:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f7fe fb35 	bl	8001530 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2258      	movs	r2, #88	; 0x58
 8002ed0:	5a9a      	ldrh	r2, [r3, r2]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	215a      	movs	r1, #90	; 0x5a
 8002ed6:	5a5b      	ldrh	r3, [r3, r1]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	0011      	movs	r1, r2
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f000 f8e0 	bl	80030a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ee8:	e0c2      	b.n	8003070 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2258      	movs	r2, #88	; 0x58
 8002eee:	5a99      	ldrh	r1, [r3, r2]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	225a      	movs	r2, #90	; 0x5a
 8002ef4:	5a9b      	ldrh	r3, [r3, r2]
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	208e      	movs	r0, #142	; 0x8e
 8002efa:	183b      	adds	r3, r7, r0
 8002efc:	1a8a      	subs	r2, r1, r2
 8002efe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	225a      	movs	r2, #90	; 0x5a
 8002f04:	5a9b      	ldrh	r3, [r3, r2]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d100      	bne.n	8002f0e <HAL_UART_IRQHandler+0x44a>
 8002f0c:	e0b2      	b.n	8003074 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002f0e:	183b      	adds	r3, r7, r0
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d100      	bne.n	8002f18 <HAL_UART_IRQHandler+0x454>
 8002f16:	e0ad      	b.n	8003074 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f18:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f20:	2488      	movs	r4, #136	; 0x88
 8002f22:	193a      	adds	r2, r7, r4
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	2301      	movs	r3, #1
 8002f28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f383 8810 	msr	PRIMASK, r3
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4951      	ldr	r1, [pc, #324]	; (8003084 <HAL_UART_IRQHandler+0x5c0>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	193b      	adds	r3, r7, r4
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f383 8810 	msr	PRIMASK, r3
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f50:	f3ef 8310 	mrs	r3, PRIMASK
 8002f54:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f56:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f58:	2484      	movs	r4, #132	; 0x84
 8002f5a:	193a      	adds	r2, r7, r4
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	2301      	movs	r3, #1
 8002f60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f383 8810 	msr	PRIMASK, r3
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2101      	movs	r1, #1
 8002f76:	438a      	bics	r2, r1
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	193b      	adds	r3, r7, r4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	f383 8810 	msr	PRIMASK, r3
}
 8002f86:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2280      	movs	r2, #128	; 0x80
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa4:	2480      	movs	r4, #128	; 0x80
 8002fa6:	193a      	adds	r2, r7, r4
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	2301      	movs	r3, #1
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb0:	f383 8810 	msr	PRIMASK, r3
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2110      	movs	r1, #16
 8002fc2:	438a      	bics	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	193b      	adds	r3, r7, r4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	f383 8810 	msr	PRIMASK, r3
}
 8002fd2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fda:	183b      	adds	r3, r7, r0
 8002fdc:	881a      	ldrh	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0011      	movs	r1, r2
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f000 f860 	bl	80030a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fe8:	e044      	b.n	8003074 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fea:	23a4      	movs	r3, #164	; 0xa4
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	035b      	lsls	r3, r3, #13
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d010      	beq.n	800301a <HAL_UART_IRQHandler+0x556>
 8002ff8:	239c      	movs	r3, #156	; 0x9c
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	03db      	lsls	r3, r3, #15
 8003002:	4013      	ands	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	0352      	lsls	r2, r2, #13
 800300e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0018      	movs	r0, r3
 8003014:	f000 fd5e 	bl	8003ad4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003018:	e02f      	b.n	800307a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800301a:	23a4      	movs	r3, #164	; 0xa4
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	4013      	ands	r3, r2
 8003024:	d00f      	beq.n	8003046 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003026:	23a0      	movs	r3, #160	; 0xa0
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2280      	movs	r2, #128	; 0x80
 800302e:	4013      	ands	r3, r2
 8003030:	d009      	beq.n	8003046 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01e      	beq.n	8003078 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	0010      	movs	r0, r2
 8003042:	4798      	blx	r3
    }
    return;
 8003044:	e018      	b.n	8003078 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003046:	23a4      	movs	r3, #164	; 0xa4
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2240      	movs	r2, #64	; 0x40
 800304e:	4013      	ands	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_UART_IRQHandler+0x5b6>
 8003052:	23a0      	movs	r3, #160	; 0xa0
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2240      	movs	r2, #64	; 0x40
 800305a:	4013      	ands	r3, r2
 800305c:	d00d      	beq.n	800307a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0018      	movs	r0, r3
 8003062:	f000 fd0c 	bl	8003a7e <UART_EndTransmit_IT>
    return;
 8003066:	e008      	b.n	800307a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003068:	46c0      	nop			; (mov r8, r8)
 800306a:	e006      	b.n	800307a <HAL_UART_IRQHandler+0x5b6>
    return;
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	e004      	b.n	800307a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	e002      	b.n	800307a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003074:	46c0      	nop			; (mov r8, r8)
 8003076:	e000      	b.n	800307a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003078:	46c0      	nop			; (mov r8, r8)
  }

}
 800307a:	46bd      	mov	sp, r7
 800307c:	b02b      	add	sp, #172	; 0xac
 800307e:	bd90      	pop	{r4, r7, pc}
 8003080:	fffffeff 	.word	0xfffffeff
 8003084:	fffffedf 	.word	0xfffffedf

08003088 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b002      	add	sp, #8
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	000a      	movs	r2, r1
 80030b2:	1cbb      	adds	r3, r7, #2
 80030b4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b002      	add	sp, #8
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b08e      	sub	sp, #56	; 0x38
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030c8:	231a      	movs	r3, #26
 80030ca:	2218      	movs	r2, #24
 80030cc:	189b      	adds	r3, r3, r2
 80030ce:	19db      	adds	r3, r3, r7
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	431a      	orrs	r2, r3
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4ac3      	ldr	r2, [pc, #780]	; (8003400 <UART_SetConfig+0x340>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	0019      	movs	r1, r3
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030fe:	430a      	orrs	r2, r1
 8003100:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4abe      	ldr	r2, [pc, #760]	; (8003404 <UART_SetConfig+0x344>)
 800310a:	4013      	ands	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4ab8      	ldr	r2, [pc, #736]	; (8003408 <UART_SetConfig+0x348>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003130:	4313      	orrs	r3, r2
 8003132:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4ab4      	ldr	r2, [pc, #720]	; (800340c <UART_SetConfig+0x34c>)
 800313c:	4013      	ands	r3, r2
 800313e:	0019      	movs	r1, r3
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003146:	430a      	orrs	r2, r1
 8003148:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4ab0      	ldr	r2, [pc, #704]	; (8003410 <UART_SetConfig+0x350>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d131      	bne.n	80031b8 <UART_SetConfig+0xf8>
 8003154:	4baf      	ldr	r3, [pc, #700]	; (8003414 <UART_SetConfig+0x354>)
 8003156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003158:	2203      	movs	r2, #3
 800315a:	4013      	ands	r3, r2
 800315c:	2b03      	cmp	r3, #3
 800315e:	d01d      	beq.n	800319c <UART_SetConfig+0xdc>
 8003160:	d823      	bhi.n	80031aa <UART_SetConfig+0xea>
 8003162:	2b02      	cmp	r3, #2
 8003164:	d00c      	beq.n	8003180 <UART_SetConfig+0xc0>
 8003166:	d820      	bhi.n	80031aa <UART_SetConfig+0xea>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <UART_SetConfig+0xb2>
 800316c:	2b01      	cmp	r3, #1
 800316e:	d00e      	beq.n	800318e <UART_SetConfig+0xce>
 8003170:	e01b      	b.n	80031aa <UART_SetConfig+0xea>
 8003172:	231b      	movs	r3, #27
 8003174:	2218      	movs	r2, #24
 8003176:	189b      	adds	r3, r3, r2
 8003178:	19db      	adds	r3, r3, r7
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	e0b4      	b.n	80032ea <UART_SetConfig+0x22a>
 8003180:	231b      	movs	r3, #27
 8003182:	2218      	movs	r2, #24
 8003184:	189b      	adds	r3, r3, r2
 8003186:	19db      	adds	r3, r3, r7
 8003188:	2202      	movs	r2, #2
 800318a:	701a      	strb	r2, [r3, #0]
 800318c:	e0ad      	b.n	80032ea <UART_SetConfig+0x22a>
 800318e:	231b      	movs	r3, #27
 8003190:	2218      	movs	r2, #24
 8003192:	189b      	adds	r3, r3, r2
 8003194:	19db      	adds	r3, r3, r7
 8003196:	2204      	movs	r2, #4
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e0a6      	b.n	80032ea <UART_SetConfig+0x22a>
 800319c:	231b      	movs	r3, #27
 800319e:	2218      	movs	r2, #24
 80031a0:	189b      	adds	r3, r3, r2
 80031a2:	19db      	adds	r3, r3, r7
 80031a4:	2208      	movs	r2, #8
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	e09f      	b.n	80032ea <UART_SetConfig+0x22a>
 80031aa:	231b      	movs	r3, #27
 80031ac:	2218      	movs	r2, #24
 80031ae:	189b      	adds	r3, r3, r2
 80031b0:	19db      	adds	r3, r3, r7
 80031b2:	2210      	movs	r2, #16
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e098      	b.n	80032ea <UART_SetConfig+0x22a>
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a96      	ldr	r2, [pc, #600]	; (8003418 <UART_SetConfig+0x358>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d131      	bne.n	8003226 <UART_SetConfig+0x166>
 80031c2:	4b94      	ldr	r3, [pc, #592]	; (8003414 <UART_SetConfig+0x354>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	220c      	movs	r2, #12
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d01d      	beq.n	800320a <UART_SetConfig+0x14a>
 80031ce:	d823      	bhi.n	8003218 <UART_SetConfig+0x158>
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d00c      	beq.n	80031ee <UART_SetConfig+0x12e>
 80031d4:	d820      	bhi.n	8003218 <UART_SetConfig+0x158>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <UART_SetConfig+0x120>
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d00e      	beq.n	80031fc <UART_SetConfig+0x13c>
 80031de:	e01b      	b.n	8003218 <UART_SetConfig+0x158>
 80031e0:	231b      	movs	r3, #27
 80031e2:	2218      	movs	r2, #24
 80031e4:	189b      	adds	r3, r3, r2
 80031e6:	19db      	adds	r3, r3, r7
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e07d      	b.n	80032ea <UART_SetConfig+0x22a>
 80031ee:	231b      	movs	r3, #27
 80031f0:	2218      	movs	r2, #24
 80031f2:	189b      	adds	r3, r3, r2
 80031f4:	19db      	adds	r3, r3, r7
 80031f6:	2202      	movs	r2, #2
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e076      	b.n	80032ea <UART_SetConfig+0x22a>
 80031fc:	231b      	movs	r3, #27
 80031fe:	2218      	movs	r2, #24
 8003200:	189b      	adds	r3, r3, r2
 8003202:	19db      	adds	r3, r3, r7
 8003204:	2204      	movs	r2, #4
 8003206:	701a      	strb	r2, [r3, #0]
 8003208:	e06f      	b.n	80032ea <UART_SetConfig+0x22a>
 800320a:	231b      	movs	r3, #27
 800320c:	2218      	movs	r2, #24
 800320e:	189b      	adds	r3, r3, r2
 8003210:	19db      	adds	r3, r3, r7
 8003212:	2208      	movs	r2, #8
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	e068      	b.n	80032ea <UART_SetConfig+0x22a>
 8003218:	231b      	movs	r3, #27
 800321a:	2218      	movs	r2, #24
 800321c:	189b      	adds	r3, r3, r2
 800321e:	19db      	adds	r3, r3, r7
 8003220:	2210      	movs	r2, #16
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	e061      	b.n	80032ea <UART_SetConfig+0x22a>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a7c      	ldr	r2, [pc, #496]	; (800341c <UART_SetConfig+0x35c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d106      	bne.n	800323e <UART_SetConfig+0x17e>
 8003230:	231b      	movs	r3, #27
 8003232:	2218      	movs	r2, #24
 8003234:	189b      	adds	r3, r3, r2
 8003236:	19db      	adds	r3, r3, r7
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e055      	b.n	80032ea <UART_SetConfig+0x22a>
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a77      	ldr	r2, [pc, #476]	; (8003420 <UART_SetConfig+0x360>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d106      	bne.n	8003256 <UART_SetConfig+0x196>
 8003248:	231b      	movs	r3, #27
 800324a:	2218      	movs	r2, #24
 800324c:	189b      	adds	r3, r3, r2
 800324e:	19db      	adds	r3, r3, r7
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	e049      	b.n	80032ea <UART_SetConfig+0x22a>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6b      	ldr	r2, [pc, #428]	; (8003408 <UART_SetConfig+0x348>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d13e      	bne.n	80032de <UART_SetConfig+0x21e>
 8003260:	4b6c      	ldr	r3, [pc, #432]	; (8003414 <UART_SetConfig+0x354>)
 8003262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003264:	23c0      	movs	r3, #192	; 0xc0
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	4013      	ands	r3, r2
 800326a:	22c0      	movs	r2, #192	; 0xc0
 800326c:	0112      	lsls	r2, r2, #4
 800326e:	4293      	cmp	r3, r2
 8003270:	d027      	beq.n	80032c2 <UART_SetConfig+0x202>
 8003272:	22c0      	movs	r2, #192	; 0xc0
 8003274:	0112      	lsls	r2, r2, #4
 8003276:	4293      	cmp	r3, r2
 8003278:	d82a      	bhi.n	80032d0 <UART_SetConfig+0x210>
 800327a:	2280      	movs	r2, #128	; 0x80
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	4293      	cmp	r3, r2
 8003280:	d011      	beq.n	80032a6 <UART_SetConfig+0x1e6>
 8003282:	2280      	movs	r2, #128	; 0x80
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	4293      	cmp	r3, r2
 8003288:	d822      	bhi.n	80032d0 <UART_SetConfig+0x210>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d004      	beq.n	8003298 <UART_SetConfig+0x1d8>
 800328e:	2280      	movs	r2, #128	; 0x80
 8003290:	00d2      	lsls	r2, r2, #3
 8003292:	4293      	cmp	r3, r2
 8003294:	d00e      	beq.n	80032b4 <UART_SetConfig+0x1f4>
 8003296:	e01b      	b.n	80032d0 <UART_SetConfig+0x210>
 8003298:	231b      	movs	r3, #27
 800329a:	2218      	movs	r2, #24
 800329c:	189b      	adds	r3, r3, r2
 800329e:	19db      	adds	r3, r3, r7
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e021      	b.n	80032ea <UART_SetConfig+0x22a>
 80032a6:	231b      	movs	r3, #27
 80032a8:	2218      	movs	r2, #24
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	19db      	adds	r3, r3, r7
 80032ae:	2202      	movs	r2, #2
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e01a      	b.n	80032ea <UART_SetConfig+0x22a>
 80032b4:	231b      	movs	r3, #27
 80032b6:	2218      	movs	r2, #24
 80032b8:	189b      	adds	r3, r3, r2
 80032ba:	19db      	adds	r3, r3, r7
 80032bc:	2204      	movs	r2, #4
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e013      	b.n	80032ea <UART_SetConfig+0x22a>
 80032c2:	231b      	movs	r3, #27
 80032c4:	2218      	movs	r2, #24
 80032c6:	189b      	adds	r3, r3, r2
 80032c8:	19db      	adds	r3, r3, r7
 80032ca:	2208      	movs	r2, #8
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e00c      	b.n	80032ea <UART_SetConfig+0x22a>
 80032d0:	231b      	movs	r3, #27
 80032d2:	2218      	movs	r2, #24
 80032d4:	189b      	adds	r3, r3, r2
 80032d6:	19db      	adds	r3, r3, r7
 80032d8:	2210      	movs	r2, #16
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e005      	b.n	80032ea <UART_SetConfig+0x22a>
 80032de:	231b      	movs	r3, #27
 80032e0:	2218      	movs	r2, #24
 80032e2:	189b      	adds	r3, r3, r2
 80032e4:	19db      	adds	r3, r3, r7
 80032e6:	2210      	movs	r2, #16
 80032e8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a46      	ldr	r2, [pc, #280]	; (8003408 <UART_SetConfig+0x348>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d000      	beq.n	80032f6 <UART_SetConfig+0x236>
 80032f4:	e09a      	b.n	800342c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032f6:	231b      	movs	r3, #27
 80032f8:	2218      	movs	r2, #24
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	19db      	adds	r3, r3, r7
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d01d      	beq.n	8003340 <UART_SetConfig+0x280>
 8003304:	dc20      	bgt.n	8003348 <UART_SetConfig+0x288>
 8003306:	2b04      	cmp	r3, #4
 8003308:	d015      	beq.n	8003336 <UART_SetConfig+0x276>
 800330a:	dc1d      	bgt.n	8003348 <UART_SetConfig+0x288>
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <UART_SetConfig+0x256>
 8003310:	2b02      	cmp	r3, #2
 8003312:	d005      	beq.n	8003320 <UART_SetConfig+0x260>
 8003314:	e018      	b.n	8003348 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003316:	f7ff f917 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 800331a:	0003      	movs	r3, r0
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800331e:	e01c      	b.n	800335a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003320:	4b3c      	ldr	r3, [pc, #240]	; (8003414 <UART_SetConfig+0x354>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2210      	movs	r2, #16
 8003326:	4013      	ands	r3, r2
 8003328:	d002      	beq.n	8003330 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800332a:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <UART_SetConfig+0x364>)
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800332e:	e014      	b.n	800335a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003330:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <UART_SetConfig+0x368>)
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003334:	e011      	b.n	800335a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003336:	f7ff f857 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 800333a:	0003      	movs	r3, r0
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800333e:	e00c      	b.n	800335a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003346:	e008      	b.n	800335a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800334c:	231a      	movs	r3, #26
 800334e:	2218      	movs	r2, #24
 8003350:	189b      	adds	r3, r3, r2
 8003352:	19db      	adds	r3, r3, r7
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
        break;
 8003358:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d100      	bne.n	8003362 <UART_SetConfig+0x2a2>
 8003360:	e133      	b.n	80035ca <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	0013      	movs	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	189b      	adds	r3, r3, r2
 800336c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336e:	429a      	cmp	r2, r3
 8003370:	d305      	bcc.n	800337e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800337a:	429a      	cmp	r2, r3
 800337c:	d906      	bls.n	800338c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800337e:	231a      	movs	r3, #26
 8003380:	2218      	movs	r2, #24
 8003382:	189b      	adds	r3, r3, r2
 8003384:	19db      	adds	r3, r3, r7
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	e11e      	b.n	80035ca <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	6939      	ldr	r1, [r7, #16]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	000b      	movs	r3, r1
 800339a:	0e1b      	lsrs	r3, r3, #24
 800339c:	0010      	movs	r0, r2
 800339e:	0205      	lsls	r5, r0, #8
 80033a0:	431d      	orrs	r5, r3
 80033a2:	000b      	movs	r3, r1
 80033a4:	021c      	lsls	r4, r3, #8
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	085b      	lsrs	r3, r3, #1
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68b8      	ldr	r0, [r7, #8]
 80033b4:	68f9      	ldr	r1, [r7, #12]
 80033b6:	1900      	adds	r0, r0, r4
 80033b8:	4169      	adcs	r1, r5
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	2300      	movs	r3, #0
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f7fc ff3c 	bl	8000244 <__aeabi_uldivmod>
 80033cc:	0002      	movs	r2, r0
 80033ce:	000b      	movs	r3, r1
 80033d0:	0013      	movs	r3, r2
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d6:	23c0      	movs	r3, #192	; 0xc0
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	429a      	cmp	r2, r3
 80033dc:	d309      	bcc.n	80033f2 <UART_SetConfig+0x332>
 80033de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	035b      	lsls	r3, r3, #13
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d204      	bcs.n	80033f2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ee:	60da      	str	r2, [r3, #12]
 80033f0:	e0eb      	b.n	80035ca <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80033f2:	231a      	movs	r3, #26
 80033f4:	2218      	movs	r2, #24
 80033f6:	189b      	adds	r3, r3, r2
 80033f8:	19db      	adds	r3, r3, r7
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
 80033fe:	e0e4      	b.n	80035ca <UART_SetConfig+0x50a>
 8003400:	efff69f3 	.word	0xefff69f3
 8003404:	ffffcfff 	.word	0xffffcfff
 8003408:	40004800 	.word	0x40004800
 800340c:	fffff4ff 	.word	0xfffff4ff
 8003410:	40013800 	.word	0x40013800
 8003414:	40021000 	.word	0x40021000
 8003418:	40004400 	.word	0x40004400
 800341c:	40004c00 	.word	0x40004c00
 8003420:	40005000 	.word	0x40005000
 8003424:	003d0900 	.word	0x003d0900
 8003428:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	69da      	ldr	r2, [r3, #28]
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	429a      	cmp	r2, r3
 8003436:	d000      	beq.n	800343a <UART_SetConfig+0x37a>
 8003438:	e070      	b.n	800351c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800343a:	231b      	movs	r3, #27
 800343c:	2218      	movs	r2, #24
 800343e:	189b      	adds	r3, r3, r2
 8003440:	19db      	adds	r3, r3, r7
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d822      	bhi.n	800348e <UART_SetConfig+0x3ce>
 8003448:	009a      	lsls	r2, r3, #2
 800344a:	4b67      	ldr	r3, [pc, #412]	; (80035e8 <UART_SetConfig+0x528>)
 800344c:	18d3      	adds	r3, r2, r3
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003452:	f7ff f879 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8003456:	0003      	movs	r3, r0
 8003458:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800345a:	e021      	b.n	80034a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800345c:	f7ff f88a 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 8003460:	0003      	movs	r3, r0
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003464:	e01c      	b.n	80034a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003466:	4b61      	ldr	r3, [pc, #388]	; (80035ec <UART_SetConfig+0x52c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2210      	movs	r2, #16
 800346c:	4013      	ands	r3, r2
 800346e:	d002      	beq.n	8003476 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003470:	4b5f      	ldr	r3, [pc, #380]	; (80035f0 <UART_SetConfig+0x530>)
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003474:	e014      	b.n	80034a0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003476:	4b5f      	ldr	r3, [pc, #380]	; (80035f4 <UART_SetConfig+0x534>)
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800347a:	e011      	b.n	80034a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347c:	f7fe ffb4 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 8003480:	0003      	movs	r3, r0
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003484:	e00c      	b.n	80034a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800348c:	e008      	b.n	80034a0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003492:	231a      	movs	r3, #26
 8003494:	2218      	movs	r2, #24
 8003496:	189b      	adds	r3, r3, r2
 8003498:	19db      	adds	r3, r3, r7
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
        break;
 800349e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d100      	bne.n	80034a8 <UART_SetConfig+0x3e8>
 80034a6:	e090      	b.n	80035ca <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	005a      	lsls	r2, r3, #1
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	18d2      	adds	r2, r2, r3
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	0019      	movs	r1, r3
 80034ba:	0010      	movs	r0, r2
 80034bc:	f7fc fe36 	bl	800012c <__udivsi3>
 80034c0:	0003      	movs	r3, r0
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	2b0f      	cmp	r3, #15
 80034c8:	d921      	bls.n	800350e <UART_SetConfig+0x44e>
 80034ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	025b      	lsls	r3, r3, #9
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d21c      	bcs.n	800350e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	200e      	movs	r0, #14
 80034da:	2418      	movs	r4, #24
 80034dc:	1903      	adds	r3, r0, r4
 80034de:	19db      	adds	r3, r3, r7
 80034e0:	210f      	movs	r1, #15
 80034e2:	438a      	bics	r2, r1
 80034e4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	085b      	lsrs	r3, r3, #1
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2207      	movs	r2, #7
 80034ee:	4013      	ands	r3, r2
 80034f0:	b299      	uxth	r1, r3
 80034f2:	1903      	adds	r3, r0, r4
 80034f4:	19db      	adds	r3, r3, r7
 80034f6:	1902      	adds	r2, r0, r4
 80034f8:	19d2      	adds	r2, r2, r7
 80034fa:	8812      	ldrh	r2, [r2, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	1902      	adds	r2, r0, r4
 8003506:	19d2      	adds	r2, r2, r7
 8003508:	8812      	ldrh	r2, [r2, #0]
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	e05d      	b.n	80035ca <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800350e:	231a      	movs	r3, #26
 8003510:	2218      	movs	r2, #24
 8003512:	189b      	adds	r3, r3, r2
 8003514:	19db      	adds	r3, r3, r7
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	e056      	b.n	80035ca <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800351c:	231b      	movs	r3, #27
 800351e:	2218      	movs	r2, #24
 8003520:	189b      	adds	r3, r3, r2
 8003522:	19db      	adds	r3, r3, r7
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b08      	cmp	r3, #8
 8003528:	d822      	bhi.n	8003570 <UART_SetConfig+0x4b0>
 800352a:	009a      	lsls	r2, r3, #2
 800352c:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <UART_SetConfig+0x538>)
 800352e:	18d3      	adds	r3, r2, r3
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003534:	f7ff f808 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8003538:	0003      	movs	r3, r0
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800353c:	e021      	b.n	8003582 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800353e:	f7ff f819 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 8003542:	0003      	movs	r3, r0
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003546:	e01c      	b.n	8003582 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <UART_SetConfig+0x52c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2210      	movs	r2, #16
 800354e:	4013      	ands	r3, r2
 8003550:	d002      	beq.n	8003558 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003552:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <UART_SetConfig+0x530>)
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003556:	e014      	b.n	8003582 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003558:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <UART_SetConfig+0x534>)
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800355c:	e011      	b.n	8003582 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800355e:	f7fe ff43 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 8003562:	0003      	movs	r3, r0
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003566:	e00c      	b.n	8003582 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800356e:	e008      	b.n	8003582 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003574:	231a      	movs	r3, #26
 8003576:	2218      	movs	r2, #24
 8003578:	189b      	adds	r3, r3, r2
 800357a:	19db      	adds	r3, r3, r7
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
        break;
 8003580:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	085a      	lsrs	r2, r3, #1
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	18d2      	adds	r2, r2, r3
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	0019      	movs	r1, r3
 8003598:	0010      	movs	r0, r2
 800359a:	f7fc fdc7 	bl	800012c <__udivsi3>
 800359e:	0003      	movs	r3, r0
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	2b0f      	cmp	r3, #15
 80035a6:	d90a      	bls.n	80035be <UART_SetConfig+0x4fe>
 80035a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	025b      	lsls	r3, r3, #9
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d205      	bcs.n	80035be <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60da      	str	r2, [r3, #12]
 80035bc:	e005      	b.n	80035ca <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80035be:	231a      	movs	r3, #26
 80035c0:	2218      	movs	r2, #24
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	19db      	adds	r3, r3, r7
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2200      	movs	r2, #0
 80035ce:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2200      	movs	r2, #0
 80035d4:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035d6:	231a      	movs	r3, #26
 80035d8:	2218      	movs	r2, #24
 80035da:	189b      	adds	r3, r3, r2
 80035dc:	19db      	adds	r3, r3, r7
 80035de:	781b      	ldrb	r3, [r3, #0]
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b00e      	add	sp, #56	; 0x38
 80035e6:	bdb0      	pop	{r4, r5, r7, pc}
 80035e8:	08004484 	.word	0x08004484
 80035ec:	40021000 	.word	0x40021000
 80035f0:	003d0900 	.word	0x003d0900
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	080044a8 	.word	0x080044a8

080035fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	2201      	movs	r2, #1
 800360a:	4013      	ands	r3, r2
 800360c:	d00b      	beq.n	8003626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4a4a      	ldr	r2, [pc, #296]	; (8003740 <UART_AdvFeatureConfig+0x144>)
 8003616:	4013      	ands	r3, r2
 8003618:	0019      	movs	r1, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2202      	movs	r2, #2
 800362c:	4013      	ands	r3, r2
 800362e:	d00b      	beq.n	8003648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4a43      	ldr	r2, [pc, #268]	; (8003744 <UART_AdvFeatureConfig+0x148>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	2204      	movs	r2, #4
 800364e:	4013      	ands	r3, r2
 8003650:	d00b      	beq.n	800366a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a3b      	ldr	r2, [pc, #236]	; (8003748 <UART_AdvFeatureConfig+0x14c>)
 800365a:	4013      	ands	r3, r2
 800365c:	0019      	movs	r1, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	2208      	movs	r2, #8
 8003670:	4013      	ands	r3, r2
 8003672:	d00b      	beq.n	800368c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4a34      	ldr	r2, [pc, #208]	; (800374c <UART_AdvFeatureConfig+0x150>)
 800367c:	4013      	ands	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	2210      	movs	r2, #16
 8003692:	4013      	ands	r3, r2
 8003694:	d00b      	beq.n	80036ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a2c      	ldr	r2, [pc, #176]	; (8003750 <UART_AdvFeatureConfig+0x154>)
 800369e:	4013      	ands	r3, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	2220      	movs	r2, #32
 80036b4:	4013      	ands	r3, r2
 80036b6:	d00b      	beq.n	80036d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	4a25      	ldr	r2, [pc, #148]	; (8003754 <UART_AdvFeatureConfig+0x158>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	0019      	movs	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	2240      	movs	r2, #64	; 0x40
 80036d6:	4013      	ands	r3, r2
 80036d8:	d01d      	beq.n	8003716 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <UART_AdvFeatureConfig+0x15c>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	035b      	lsls	r3, r3, #13
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d10b      	bne.n	8003716 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4a15      	ldr	r2, [pc, #84]	; (800375c <UART_AdvFeatureConfig+0x160>)
 8003706:	4013      	ands	r3, r2
 8003708:	0019      	movs	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	2280      	movs	r2, #128	; 0x80
 800371c:	4013      	ands	r3, r2
 800371e:	d00b      	beq.n	8003738 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4a0e      	ldr	r2, [pc, #56]	; (8003760 <UART_AdvFeatureConfig+0x164>)
 8003728:	4013      	ands	r3, r2
 800372a:	0019      	movs	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	605a      	str	r2, [r3, #4]
  }
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}
 8003740:	fffdffff 	.word	0xfffdffff
 8003744:	fffeffff 	.word	0xfffeffff
 8003748:	fffbffff 	.word	0xfffbffff
 800374c:	ffff7fff 	.word	0xffff7fff
 8003750:	ffffefff 	.word	0xffffefff
 8003754:	ffffdfff 	.word	0xffffdfff
 8003758:	ffefffff 	.word	0xffefffff
 800375c:	ff9fffff 	.word	0xff9fffff
 8003760:	fff7ffff 	.word	0xfff7ffff

08003764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b092      	sub	sp, #72	; 0x48
 8003768:	af02      	add	r7, sp, #8
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2284      	movs	r2, #132	; 0x84
 8003770:	2100      	movs	r1, #0
 8003772:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003774:	f7fd fa38 	bl	8000be8 <HAL_GetTick>
 8003778:	0003      	movs	r3, r0
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2208      	movs	r2, #8
 8003784:	4013      	ands	r3, r2
 8003786:	2b08      	cmp	r3, #8
 8003788:	d12c      	bne.n	80037e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800378a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	0391      	lsls	r1, r2, #14
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4a46      	ldr	r2, [pc, #280]	; (80038ac <UART_CheckIdleState+0x148>)
 8003794:	9200      	str	r2, [sp, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	f000 f88c 	bl	80038b4 <UART_WaitOnFlagUntilTimeout>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d021      	beq.n	80037e4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a0:	f3ef 8310 	mrs	r3, PRIMASK
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80037aa:	2301      	movs	r3, #1
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	f383 8810 	msr	PRIMASK, r3
}
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2180      	movs	r1, #128	; 0x80
 80037c2:	438a      	bics	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	f383 8810 	msr	PRIMASK, r3
}
 80037d0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2278      	movs	r2, #120	; 0x78
 80037dc:	2100      	movs	r1, #0
 80037de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e05f      	b.n	80038a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2204      	movs	r2, #4
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d146      	bne.n	8003880 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f4:	2280      	movs	r2, #128	; 0x80
 80037f6:	03d1      	lsls	r1, r2, #15
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4a2c      	ldr	r2, [pc, #176]	; (80038ac <UART_CheckIdleState+0x148>)
 80037fc:	9200      	str	r2, [sp, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	f000 f858 	bl	80038b4 <UART_WaitOnFlagUntilTimeout>
 8003804:	1e03      	subs	r3, r0, #0
 8003806:	d03b      	beq.n	8003880 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003808:	f3ef 8310 	mrs	r3, PRIMASK
 800380c:	60fb      	str	r3, [r7, #12]
  return(result);
 800380e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
 8003812:	2301      	movs	r3, #1
 8003814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f383 8810 	msr	PRIMASK, r3
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4921      	ldr	r1, [pc, #132]	; (80038b0 <UART_CheckIdleState+0x14c>)
 800382a:	400a      	ands	r2, r1
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003830:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f383 8810 	msr	PRIMASK, r3
}
 8003838:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800383a:	f3ef 8310 	mrs	r3, PRIMASK
 800383e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003840:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003842:	633b      	str	r3, [r7, #48]	; 0x30
 8003844:	2301      	movs	r3, #1
 8003846:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f383 8810 	msr	PRIMASK, r3
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2101      	movs	r1, #1
 800385c:	438a      	bics	r2, r1
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003862:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	f383 8810 	msr	PRIMASK, r3
}
 800386a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2280      	movs	r2, #128	; 0x80
 8003870:	2120      	movs	r1, #32
 8003872:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2278      	movs	r2, #120	; 0x78
 8003878:	2100      	movs	r1, #0
 800387a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e011      	b.n	80038a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2280      	movs	r2, #128	; 0x80
 800388a:	2120      	movs	r1, #32
 800388c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2278      	movs	r2, #120	; 0x78
 800389e:	2100      	movs	r1, #0
 80038a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	0018      	movs	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b010      	add	sp, #64	; 0x40
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	01ffffff 	.word	0x01ffffff
 80038b0:	fffffedf 	.word	0xfffffedf

080038b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c4:	e04b      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	3301      	adds	r3, #1
 80038ca:	d048      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038cc:	f7fd f98c 	bl	8000be8 <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d302      	bcc.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e04b      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2204      	movs	r2, #4
 80038ee:	4013      	ands	r3, r2
 80038f0:	d035      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	2208      	movs	r2, #8
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d111      	bne.n	8003924 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2208      	movs	r2, #8
 8003906:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	0018      	movs	r0, r3
 800390c:	f000 f83c 	bl	8003988 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2284      	movs	r2, #132	; 0x84
 8003914:	2108      	movs	r1, #8
 8003916:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2278      	movs	r2, #120	; 0x78
 800391c:	2100      	movs	r1, #0
 800391e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e02c      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	401a      	ands	r2, r3
 8003930:	2380      	movs	r3, #128	; 0x80
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	429a      	cmp	r2, r3
 8003936:	d112      	bne.n	800395e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2280      	movs	r2, #128	; 0x80
 800393e:	0112      	lsls	r2, r2, #4
 8003940:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	0018      	movs	r0, r3
 8003946:	f000 f81f 	bl	8003988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2284      	movs	r2, #132	; 0x84
 800394e:	2120      	movs	r1, #32
 8003950:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2278      	movs	r2, #120	; 0x78
 8003956:	2100      	movs	r1, #0
 8003958:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e00f      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	425a      	negs	r2, r3
 800396e:	4153      	adcs	r3, r2
 8003970:	b2db      	uxtb	r3, r3
 8003972:	001a      	movs	r2, r3
 8003974:	1dfb      	adds	r3, r7, #7
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d0a4      	beq.n	80038c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	0018      	movs	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	b004      	add	sp, #16
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	; 0x38
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003990:	f3ef 8310 	mrs	r3, PRIMASK
 8003994:	617b      	str	r3, [r7, #20]
  return(result);
 8003996:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
 800399a:	2301      	movs	r3, #1
 800399c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f383 8810 	msr	PRIMASK, r3
}
 80039a4:	46c0      	nop			; (mov r8, r8)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4926      	ldr	r1, [pc, #152]	; (8003a4c <UART_EndRxTransfer+0xc4>)
 80039b2:	400a      	ands	r2, r1
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f383 8810 	msr	PRIMASK, r3
}
 80039c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c2:	f3ef 8310 	mrs	r3, PRIMASK
 80039c6:	623b      	str	r3, [r7, #32]
  return(result);
 80039c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ca:	633b      	str	r3, [r7, #48]	; 0x30
 80039cc:	2301      	movs	r3, #1
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	f383 8810 	msr	PRIMASK, r3
}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2101      	movs	r1, #1
 80039e4:	438a      	bics	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	f383 8810 	msr	PRIMASK, r3
}
 80039f2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d118      	bne.n	8003a2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003a00:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a06:	2301      	movs	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f383 8810 	msr	PRIMASK, r3
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2110      	movs	r1, #16
 8003a1e:	438a      	bics	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f383 8810 	msr	PRIMASK, r3
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2280      	movs	r2, #128	; 0x80
 8003a32:	2120      	movs	r1, #32
 8003a34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b00e      	add	sp, #56	; 0x38
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	fffffedf 	.word	0xfffffedf

08003a50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	225a      	movs	r2, #90	; 0x5a
 8003a62:	2100      	movs	r1, #0
 8003a64:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2252      	movs	r2, #82	; 0x52
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f7ff fb11 	bl	8003098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a86:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	2301      	movs	r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f383 8810 	msr	PRIMASK, r3
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2140      	movs	r1, #64	; 0x40
 8003aa8:	438a      	bics	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f7ff fade 	bl	8003088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b006      	add	sp, #24
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b002      	add	sp, #8
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <siprintf>:
 8003ae4:	b40e      	push	{r1, r2, r3}
 8003ae6:	b500      	push	{lr}
 8003ae8:	490b      	ldr	r1, [pc, #44]	; (8003b18 <siprintf+0x34>)
 8003aea:	b09c      	sub	sp, #112	; 0x70
 8003aec:	ab1d      	add	r3, sp, #116	; 0x74
 8003aee:	9002      	str	r0, [sp, #8]
 8003af0:	9006      	str	r0, [sp, #24]
 8003af2:	9107      	str	r1, [sp, #28]
 8003af4:	9104      	str	r1, [sp, #16]
 8003af6:	4809      	ldr	r0, [pc, #36]	; (8003b1c <siprintf+0x38>)
 8003af8:	4909      	ldr	r1, [pc, #36]	; (8003b20 <siprintf+0x3c>)
 8003afa:	cb04      	ldmia	r3!, {r2}
 8003afc:	9105      	str	r1, [sp, #20]
 8003afe:	6800      	ldr	r0, [r0, #0]
 8003b00:	a902      	add	r1, sp, #8
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	f000 f9a2 	bl	8003e4c <_svfiprintf_r>
 8003b08:	2200      	movs	r2, #0
 8003b0a:	9b02      	ldr	r3, [sp, #8]
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	b01c      	add	sp, #112	; 0x70
 8003b10:	bc08      	pop	{r3}
 8003b12:	b003      	add	sp, #12
 8003b14:	4718      	bx	r3
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	7fffffff 	.word	0x7fffffff
 8003b1c:	20000058 	.word	0x20000058
 8003b20:	ffff0208 	.word	0xffff0208

08003b24 <memset>:
 8003b24:	0003      	movs	r3, r0
 8003b26:	1882      	adds	r2, r0, r2
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	7019      	strb	r1, [r3, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <__errno>:
 8003b34:	4b01      	ldr	r3, [pc, #4]	; (8003b3c <__errno+0x8>)
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	4770      	bx	lr
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	20000058 	.word	0x20000058

08003b40 <__libc_init_array>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	2600      	movs	r6, #0
 8003b44:	4c0c      	ldr	r4, [pc, #48]	; (8003b78 <__libc_init_array+0x38>)
 8003b46:	4d0d      	ldr	r5, [pc, #52]	; (8003b7c <__libc_init_array+0x3c>)
 8003b48:	1b64      	subs	r4, r4, r5
 8003b4a:	10a4      	asrs	r4, r4, #2
 8003b4c:	42a6      	cmp	r6, r4
 8003b4e:	d109      	bne.n	8003b64 <__libc_init_array+0x24>
 8003b50:	2600      	movs	r6, #0
 8003b52:	f000 fc6d 	bl	8004430 <_init>
 8003b56:	4c0a      	ldr	r4, [pc, #40]	; (8003b80 <__libc_init_array+0x40>)
 8003b58:	4d0a      	ldr	r5, [pc, #40]	; (8003b84 <__libc_init_array+0x44>)
 8003b5a:	1b64      	subs	r4, r4, r5
 8003b5c:	10a4      	asrs	r4, r4, #2
 8003b5e:	42a6      	cmp	r6, r4
 8003b60:	d105      	bne.n	8003b6e <__libc_init_array+0x2e>
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	00b3      	lsls	r3, r6, #2
 8003b66:	58eb      	ldr	r3, [r5, r3]
 8003b68:	4798      	blx	r3
 8003b6a:	3601      	adds	r6, #1
 8003b6c:	e7ee      	b.n	8003b4c <__libc_init_array+0xc>
 8003b6e:	00b3      	lsls	r3, r6, #2
 8003b70:	58eb      	ldr	r3, [r5, r3]
 8003b72:	4798      	blx	r3
 8003b74:	3601      	adds	r6, #1
 8003b76:	e7f2      	b.n	8003b5e <__libc_init_array+0x1e>
 8003b78:	08004508 	.word	0x08004508
 8003b7c:	08004508 	.word	0x08004508
 8003b80:	0800450c 	.word	0x0800450c
 8003b84:	08004508 	.word	0x08004508

08003b88 <__retarget_lock_acquire_recursive>:
 8003b88:	4770      	bx	lr

08003b8a <__retarget_lock_release_recursive>:
 8003b8a:	4770      	bx	lr

08003b8c <_free_r>:
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	0005      	movs	r5, r0
 8003b90:	2900      	cmp	r1, #0
 8003b92:	d010      	beq.n	8003bb6 <_free_r+0x2a>
 8003b94:	1f0c      	subs	r4, r1, #4
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	da00      	bge.n	8003b9e <_free_r+0x12>
 8003b9c:	18e4      	adds	r4, r4, r3
 8003b9e:	0028      	movs	r0, r5
 8003ba0:	f000 f8e2 	bl	8003d68 <__malloc_lock>
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <_free_r+0x90>)
 8003ba6:	6813      	ldr	r3, [r2, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d105      	bne.n	8003bb8 <_free_r+0x2c>
 8003bac:	6063      	str	r3, [r4, #4]
 8003bae:	6014      	str	r4, [r2, #0]
 8003bb0:	0028      	movs	r0, r5
 8003bb2:	f000 f8e1 	bl	8003d78 <__malloc_unlock>
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	42a3      	cmp	r3, r4
 8003bba:	d908      	bls.n	8003bce <_free_r+0x42>
 8003bbc:	6820      	ldr	r0, [r4, #0]
 8003bbe:	1821      	adds	r1, r4, r0
 8003bc0:	428b      	cmp	r3, r1
 8003bc2:	d1f3      	bne.n	8003bac <_free_r+0x20>
 8003bc4:	6819      	ldr	r1, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	1809      	adds	r1, r1, r0
 8003bca:	6021      	str	r1, [r4, #0]
 8003bcc:	e7ee      	b.n	8003bac <_free_r+0x20>
 8003bce:	001a      	movs	r2, r3
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <_free_r+0x4e>
 8003bd6:	42a3      	cmp	r3, r4
 8003bd8:	d9f9      	bls.n	8003bce <_free_r+0x42>
 8003bda:	6811      	ldr	r1, [r2, #0]
 8003bdc:	1850      	adds	r0, r2, r1
 8003bde:	42a0      	cmp	r0, r4
 8003be0:	d10b      	bne.n	8003bfa <_free_r+0x6e>
 8003be2:	6820      	ldr	r0, [r4, #0]
 8003be4:	1809      	adds	r1, r1, r0
 8003be6:	1850      	adds	r0, r2, r1
 8003be8:	6011      	str	r1, [r2, #0]
 8003bea:	4283      	cmp	r3, r0
 8003bec:	d1e0      	bne.n	8003bb0 <_free_r+0x24>
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	1841      	adds	r1, r0, r1
 8003bf4:	6011      	str	r1, [r2, #0]
 8003bf6:	6053      	str	r3, [r2, #4]
 8003bf8:	e7da      	b.n	8003bb0 <_free_r+0x24>
 8003bfa:	42a0      	cmp	r0, r4
 8003bfc:	d902      	bls.n	8003c04 <_free_r+0x78>
 8003bfe:	230c      	movs	r3, #12
 8003c00:	602b      	str	r3, [r5, #0]
 8003c02:	e7d5      	b.n	8003bb0 <_free_r+0x24>
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	1821      	adds	r1, r4, r0
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	d103      	bne.n	8003c14 <_free_r+0x88>
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	1809      	adds	r1, r1, r0
 8003c12:	6021      	str	r1, [r4, #0]
 8003c14:	6063      	str	r3, [r4, #4]
 8003c16:	6054      	str	r4, [r2, #4]
 8003c18:	e7ca      	b.n	8003bb0 <_free_r+0x24>
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	200002c0 	.word	0x200002c0

08003c20 <sbrk_aligned>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	4e0f      	ldr	r6, [pc, #60]	; (8003c60 <sbrk_aligned+0x40>)
 8003c24:	000d      	movs	r5, r1
 8003c26:	6831      	ldr	r1, [r6, #0]
 8003c28:	0004      	movs	r4, r0
 8003c2a:	2900      	cmp	r1, #0
 8003c2c:	d102      	bne.n	8003c34 <sbrk_aligned+0x14>
 8003c2e:	f000 fba1 	bl	8004374 <_sbrk_r>
 8003c32:	6030      	str	r0, [r6, #0]
 8003c34:	0029      	movs	r1, r5
 8003c36:	0020      	movs	r0, r4
 8003c38:	f000 fb9c 	bl	8004374 <_sbrk_r>
 8003c3c:	1c43      	adds	r3, r0, #1
 8003c3e:	d00a      	beq.n	8003c56 <sbrk_aligned+0x36>
 8003c40:	2303      	movs	r3, #3
 8003c42:	1cc5      	adds	r5, r0, #3
 8003c44:	439d      	bics	r5, r3
 8003c46:	42a8      	cmp	r0, r5
 8003c48:	d007      	beq.n	8003c5a <sbrk_aligned+0x3a>
 8003c4a:	1a29      	subs	r1, r5, r0
 8003c4c:	0020      	movs	r0, r4
 8003c4e:	f000 fb91 	bl	8004374 <_sbrk_r>
 8003c52:	3001      	adds	r0, #1
 8003c54:	d101      	bne.n	8003c5a <sbrk_aligned+0x3a>
 8003c56:	2501      	movs	r5, #1
 8003c58:	426d      	negs	r5, r5
 8003c5a:	0028      	movs	r0, r5
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	200002c4 	.word	0x200002c4

08003c64 <_malloc_r>:
 8003c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c66:	2203      	movs	r2, #3
 8003c68:	1ccb      	adds	r3, r1, #3
 8003c6a:	4393      	bics	r3, r2
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	0006      	movs	r6, r0
 8003c70:	001f      	movs	r7, r3
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d238      	bcs.n	8003ce8 <_malloc_r+0x84>
 8003c76:	270c      	movs	r7, #12
 8003c78:	42b9      	cmp	r1, r7
 8003c7a:	d837      	bhi.n	8003cec <_malloc_r+0x88>
 8003c7c:	0030      	movs	r0, r6
 8003c7e:	f000 f873 	bl	8003d68 <__malloc_lock>
 8003c82:	4b38      	ldr	r3, [pc, #224]	; (8003d64 <_malloc_r+0x100>)
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	001c      	movs	r4, r3
 8003c8a:	2c00      	cmp	r4, #0
 8003c8c:	d133      	bne.n	8003cf6 <_malloc_r+0x92>
 8003c8e:	0039      	movs	r1, r7
 8003c90:	0030      	movs	r0, r6
 8003c92:	f7ff ffc5 	bl	8003c20 <sbrk_aligned>
 8003c96:	0004      	movs	r4, r0
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	d15e      	bne.n	8003d5a <_malloc_r+0xf6>
 8003c9c:	9b00      	ldr	r3, [sp, #0]
 8003c9e:	681c      	ldr	r4, [r3, #0]
 8003ca0:	0025      	movs	r5, r4
 8003ca2:	2d00      	cmp	r5, #0
 8003ca4:	d14e      	bne.n	8003d44 <_malloc_r+0xe0>
 8003ca6:	2c00      	cmp	r4, #0
 8003ca8:	d051      	beq.n	8003d4e <_malloc_r+0xea>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	0029      	movs	r1, r5
 8003cae:	18e3      	adds	r3, r4, r3
 8003cb0:	0030      	movs	r0, r6
 8003cb2:	9301      	str	r3, [sp, #4]
 8003cb4:	f000 fb5e 	bl	8004374 <_sbrk_r>
 8003cb8:	9b01      	ldr	r3, [sp, #4]
 8003cba:	4283      	cmp	r3, r0
 8003cbc:	d147      	bne.n	8003d4e <_malloc_r+0xea>
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	0030      	movs	r0, r6
 8003cc2:	1aff      	subs	r7, r7, r3
 8003cc4:	0039      	movs	r1, r7
 8003cc6:	f7ff ffab 	bl	8003c20 <sbrk_aligned>
 8003cca:	3001      	adds	r0, #1
 8003ccc:	d03f      	beq.n	8003d4e <_malloc_r+0xea>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	19db      	adds	r3, r3, r7
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	9b00      	ldr	r3, [sp, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d040      	beq.n	8003d5e <_malloc_r+0xfa>
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	42a2      	cmp	r2, r4
 8003ce0:	d133      	bne.n	8003d4a <_malloc_r+0xe6>
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	e014      	b.n	8003d12 <_malloc_r+0xae>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	dac5      	bge.n	8003c78 <_malloc_r+0x14>
 8003cec:	230c      	movs	r3, #12
 8003cee:	2500      	movs	r5, #0
 8003cf0:	6033      	str	r3, [r6, #0]
 8003cf2:	0028      	movs	r0, r5
 8003cf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cf6:	6821      	ldr	r1, [r4, #0]
 8003cf8:	1bc9      	subs	r1, r1, r7
 8003cfa:	d420      	bmi.n	8003d3e <_malloc_r+0xda>
 8003cfc:	290b      	cmp	r1, #11
 8003cfe:	d918      	bls.n	8003d32 <_malloc_r+0xce>
 8003d00:	19e2      	adds	r2, r4, r7
 8003d02:	6027      	str	r7, [r4, #0]
 8003d04:	42a3      	cmp	r3, r4
 8003d06:	d112      	bne.n	8003d2e <_malloc_r+0xca>
 8003d08:	9b00      	ldr	r3, [sp, #0]
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	6863      	ldr	r3, [r4, #4]
 8003d0e:	6011      	str	r1, [r2, #0]
 8003d10:	6053      	str	r3, [r2, #4]
 8003d12:	0030      	movs	r0, r6
 8003d14:	0025      	movs	r5, r4
 8003d16:	f000 f82f 	bl	8003d78 <__malloc_unlock>
 8003d1a:	2207      	movs	r2, #7
 8003d1c:	350b      	adds	r5, #11
 8003d1e:	1d23      	adds	r3, r4, #4
 8003d20:	4395      	bics	r5, r2
 8003d22:	1aea      	subs	r2, r5, r3
 8003d24:	429d      	cmp	r5, r3
 8003d26:	d0e4      	beq.n	8003cf2 <_malloc_r+0x8e>
 8003d28:	1b5b      	subs	r3, r3, r5
 8003d2a:	50a3      	str	r3, [r4, r2]
 8003d2c:	e7e1      	b.n	8003cf2 <_malloc_r+0x8e>
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	e7ec      	b.n	8003d0c <_malloc_r+0xa8>
 8003d32:	6862      	ldr	r2, [r4, #4]
 8003d34:	42a3      	cmp	r3, r4
 8003d36:	d1d5      	bne.n	8003ce4 <_malloc_r+0x80>
 8003d38:	9b00      	ldr	r3, [sp, #0]
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e7e9      	b.n	8003d12 <_malloc_r+0xae>
 8003d3e:	0023      	movs	r3, r4
 8003d40:	6864      	ldr	r4, [r4, #4]
 8003d42:	e7a2      	b.n	8003c8a <_malloc_r+0x26>
 8003d44:	002c      	movs	r4, r5
 8003d46:	686d      	ldr	r5, [r5, #4]
 8003d48:	e7ab      	b.n	8003ca2 <_malloc_r+0x3e>
 8003d4a:	0013      	movs	r3, r2
 8003d4c:	e7c4      	b.n	8003cd8 <_malloc_r+0x74>
 8003d4e:	230c      	movs	r3, #12
 8003d50:	0030      	movs	r0, r6
 8003d52:	6033      	str	r3, [r6, #0]
 8003d54:	f000 f810 	bl	8003d78 <__malloc_unlock>
 8003d58:	e7cb      	b.n	8003cf2 <_malloc_r+0x8e>
 8003d5a:	6027      	str	r7, [r4, #0]
 8003d5c:	e7d9      	b.n	8003d12 <_malloc_r+0xae>
 8003d5e:	605b      	str	r3, [r3, #4]
 8003d60:	deff      	udf	#255	; 0xff
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	200002c0 	.word	0x200002c0

08003d68 <__malloc_lock>:
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	4802      	ldr	r0, [pc, #8]	; (8003d74 <__malloc_lock+0xc>)
 8003d6c:	f7ff ff0c 	bl	8003b88 <__retarget_lock_acquire_recursive>
 8003d70:	bd10      	pop	{r4, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	200002bc 	.word	0x200002bc

08003d78 <__malloc_unlock>:
 8003d78:	b510      	push	{r4, lr}
 8003d7a:	4802      	ldr	r0, [pc, #8]	; (8003d84 <__malloc_unlock+0xc>)
 8003d7c:	f7ff ff05 	bl	8003b8a <__retarget_lock_release_recursive>
 8003d80:	bd10      	pop	{r4, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	200002bc 	.word	0x200002bc

08003d88 <__ssputs_r>:
 8003d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	9203      	str	r2, [sp, #12]
 8003d90:	688e      	ldr	r6, [r1, #8]
 8003d92:	9a01      	ldr	r2, [sp, #4]
 8003d94:	0007      	movs	r7, r0
 8003d96:	000c      	movs	r4, r1
 8003d98:	680b      	ldr	r3, [r1, #0]
 8003d9a:	4296      	cmp	r6, r2
 8003d9c:	d831      	bhi.n	8003e02 <__ssputs_r+0x7a>
 8003d9e:	898a      	ldrh	r2, [r1, #12]
 8003da0:	2190      	movs	r1, #144	; 0x90
 8003da2:	00c9      	lsls	r1, r1, #3
 8003da4:	420a      	tst	r2, r1
 8003da6:	d029      	beq.n	8003dfc <__ssputs_r+0x74>
 8003da8:	2003      	movs	r0, #3
 8003daa:	6921      	ldr	r1, [r4, #16]
 8003dac:	1a5b      	subs	r3, r3, r1
 8003dae:	9302      	str	r3, [sp, #8]
 8003db0:	6963      	ldr	r3, [r4, #20]
 8003db2:	4343      	muls	r3, r0
 8003db4:	0fdd      	lsrs	r5, r3, #31
 8003db6:	18ed      	adds	r5, r5, r3
 8003db8:	9b01      	ldr	r3, [sp, #4]
 8003dba:	9802      	ldr	r0, [sp, #8]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	181b      	adds	r3, r3, r0
 8003dc0:	106d      	asrs	r5, r5, #1
 8003dc2:	42ab      	cmp	r3, r5
 8003dc4:	d900      	bls.n	8003dc8 <__ssputs_r+0x40>
 8003dc6:	001d      	movs	r5, r3
 8003dc8:	0552      	lsls	r2, r2, #21
 8003dca:	d529      	bpl.n	8003e20 <__ssputs_r+0x98>
 8003dcc:	0029      	movs	r1, r5
 8003dce:	0038      	movs	r0, r7
 8003dd0:	f7ff ff48 	bl	8003c64 <_malloc_r>
 8003dd4:	1e06      	subs	r6, r0, #0
 8003dd6:	d02d      	beq.n	8003e34 <__ssputs_r+0xac>
 8003dd8:	9a02      	ldr	r2, [sp, #8]
 8003dda:	6921      	ldr	r1, [r4, #16]
 8003ddc:	f000 fae7 	bl	80043ae <memcpy>
 8003de0:	89a2      	ldrh	r2, [r4, #12]
 8003de2:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <__ssputs_r+0xc0>)
 8003de4:	401a      	ands	r2, r3
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	4313      	orrs	r3, r2
 8003dea:	81a3      	strh	r3, [r4, #12]
 8003dec:	9b02      	ldr	r3, [sp, #8]
 8003dee:	6126      	str	r6, [r4, #16]
 8003df0:	18f6      	adds	r6, r6, r3
 8003df2:	6026      	str	r6, [r4, #0]
 8003df4:	6165      	str	r5, [r4, #20]
 8003df6:	9e01      	ldr	r6, [sp, #4]
 8003df8:	1aed      	subs	r5, r5, r3
 8003dfa:	60a5      	str	r5, [r4, #8]
 8003dfc:	9b01      	ldr	r3, [sp, #4]
 8003dfe:	429e      	cmp	r6, r3
 8003e00:	d900      	bls.n	8003e04 <__ssputs_r+0x7c>
 8003e02:	9e01      	ldr	r6, [sp, #4]
 8003e04:	0032      	movs	r2, r6
 8003e06:	9903      	ldr	r1, [sp, #12]
 8003e08:	6820      	ldr	r0, [r4, #0]
 8003e0a:	f000 fa9f 	bl	800434c <memmove>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	68a3      	ldr	r3, [r4, #8]
 8003e12:	1b9b      	subs	r3, r3, r6
 8003e14:	60a3      	str	r3, [r4, #8]
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	199b      	adds	r3, r3, r6
 8003e1a:	6023      	str	r3, [r4, #0]
 8003e1c:	b005      	add	sp, #20
 8003e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e20:	002a      	movs	r2, r5
 8003e22:	0038      	movs	r0, r7
 8003e24:	f000 facc 	bl	80043c0 <_realloc_r>
 8003e28:	1e06      	subs	r6, r0, #0
 8003e2a:	d1df      	bne.n	8003dec <__ssputs_r+0x64>
 8003e2c:	0038      	movs	r0, r7
 8003e2e:	6921      	ldr	r1, [r4, #16]
 8003e30:	f7ff feac 	bl	8003b8c <_free_r>
 8003e34:	230c      	movs	r3, #12
 8003e36:	2001      	movs	r0, #1
 8003e38:	603b      	str	r3, [r7, #0]
 8003e3a:	89a2      	ldrh	r2, [r4, #12]
 8003e3c:	3334      	adds	r3, #52	; 0x34
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	81a3      	strh	r3, [r4, #12]
 8003e42:	4240      	negs	r0, r0
 8003e44:	e7ea      	b.n	8003e1c <__ssputs_r+0x94>
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	fffffb7f 	.word	0xfffffb7f

08003e4c <_svfiprintf_r>:
 8003e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4e:	b0a1      	sub	sp, #132	; 0x84
 8003e50:	9003      	str	r0, [sp, #12]
 8003e52:	001d      	movs	r5, r3
 8003e54:	898b      	ldrh	r3, [r1, #12]
 8003e56:	000f      	movs	r7, r1
 8003e58:	0016      	movs	r6, r2
 8003e5a:	061b      	lsls	r3, r3, #24
 8003e5c:	d511      	bpl.n	8003e82 <_svfiprintf_r+0x36>
 8003e5e:	690b      	ldr	r3, [r1, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10e      	bne.n	8003e82 <_svfiprintf_r+0x36>
 8003e64:	2140      	movs	r1, #64	; 0x40
 8003e66:	f7ff fefd 	bl	8003c64 <_malloc_r>
 8003e6a:	6038      	str	r0, [r7, #0]
 8003e6c:	6138      	str	r0, [r7, #16]
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	d105      	bne.n	8003e7e <_svfiprintf_r+0x32>
 8003e72:	230c      	movs	r3, #12
 8003e74:	9a03      	ldr	r2, [sp, #12]
 8003e76:	3801      	subs	r0, #1
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	b021      	add	sp, #132	; 0x84
 8003e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e7e:	2340      	movs	r3, #64	; 0x40
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	2300      	movs	r3, #0
 8003e84:	ac08      	add	r4, sp, #32
 8003e86:	6163      	str	r3, [r4, #20]
 8003e88:	3320      	adds	r3, #32
 8003e8a:	7663      	strb	r3, [r4, #25]
 8003e8c:	3310      	adds	r3, #16
 8003e8e:	76a3      	strb	r3, [r4, #26]
 8003e90:	9507      	str	r5, [sp, #28]
 8003e92:	0035      	movs	r5, r6
 8003e94:	782b      	ldrb	r3, [r5, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <_svfiprintf_r+0x52>
 8003e9a:	2b25      	cmp	r3, #37	; 0x25
 8003e9c:	d148      	bne.n	8003f30 <_svfiprintf_r+0xe4>
 8003e9e:	1bab      	subs	r3, r5, r6
 8003ea0:	9305      	str	r3, [sp, #20]
 8003ea2:	42b5      	cmp	r5, r6
 8003ea4:	d00b      	beq.n	8003ebe <_svfiprintf_r+0x72>
 8003ea6:	0032      	movs	r2, r6
 8003ea8:	0039      	movs	r1, r7
 8003eaa:	9803      	ldr	r0, [sp, #12]
 8003eac:	f7ff ff6c 	bl	8003d88 <__ssputs_r>
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d100      	bne.n	8003eb6 <_svfiprintf_r+0x6a>
 8003eb4:	e0af      	b.n	8004016 <_svfiprintf_r+0x1ca>
 8003eb6:	6963      	ldr	r3, [r4, #20]
 8003eb8:	9a05      	ldr	r2, [sp, #20]
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	6163      	str	r3, [r4, #20]
 8003ebe:	782b      	ldrb	r3, [r5, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d100      	bne.n	8003ec6 <_svfiprintf_r+0x7a>
 8003ec4:	e0a7      	b.n	8004016 <_svfiprintf_r+0x1ca>
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	2300      	movs	r3, #0
 8003eca:	4252      	negs	r2, r2
 8003ecc:	6062      	str	r2, [r4, #4]
 8003ece:	a904      	add	r1, sp, #16
 8003ed0:	3254      	adds	r2, #84	; 0x54
 8003ed2:	1852      	adds	r2, r2, r1
 8003ed4:	1c6e      	adds	r6, r5, #1
 8003ed6:	6023      	str	r3, [r4, #0]
 8003ed8:	60e3      	str	r3, [r4, #12]
 8003eda:	60a3      	str	r3, [r4, #8]
 8003edc:	7013      	strb	r3, [r2, #0]
 8003ede:	65a3      	str	r3, [r4, #88]	; 0x58
 8003ee0:	4b55      	ldr	r3, [pc, #340]	; (8004038 <_svfiprintf_r+0x1ec>)
 8003ee2:	2205      	movs	r2, #5
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	7831      	ldrb	r1, [r6, #0]
 8003ee8:	9305      	str	r3, [sp, #20]
 8003eea:	f000 fa55 	bl	8004398 <memchr>
 8003eee:	1c75      	adds	r5, r6, #1
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d11f      	bne.n	8003f34 <_svfiprintf_r+0xe8>
 8003ef4:	6822      	ldr	r2, [r4, #0]
 8003ef6:	06d3      	lsls	r3, r2, #27
 8003ef8:	d504      	bpl.n	8003f04 <_svfiprintf_r+0xb8>
 8003efa:	2353      	movs	r3, #83	; 0x53
 8003efc:	a904      	add	r1, sp, #16
 8003efe:	185b      	adds	r3, r3, r1
 8003f00:	2120      	movs	r1, #32
 8003f02:	7019      	strb	r1, [r3, #0]
 8003f04:	0713      	lsls	r3, r2, #28
 8003f06:	d504      	bpl.n	8003f12 <_svfiprintf_r+0xc6>
 8003f08:	2353      	movs	r3, #83	; 0x53
 8003f0a:	a904      	add	r1, sp, #16
 8003f0c:	185b      	adds	r3, r3, r1
 8003f0e:	212b      	movs	r1, #43	; 0x2b
 8003f10:	7019      	strb	r1, [r3, #0]
 8003f12:	7833      	ldrb	r3, [r6, #0]
 8003f14:	2b2a      	cmp	r3, #42	; 0x2a
 8003f16:	d016      	beq.n	8003f46 <_svfiprintf_r+0xfa>
 8003f18:	0035      	movs	r5, r6
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	200a      	movs	r0, #10
 8003f1e:	68e3      	ldr	r3, [r4, #12]
 8003f20:	782a      	ldrb	r2, [r5, #0]
 8003f22:	1c6e      	adds	r6, r5, #1
 8003f24:	3a30      	subs	r2, #48	; 0x30
 8003f26:	2a09      	cmp	r2, #9
 8003f28:	d94e      	bls.n	8003fc8 <_svfiprintf_r+0x17c>
 8003f2a:	2900      	cmp	r1, #0
 8003f2c:	d111      	bne.n	8003f52 <_svfiprintf_r+0x106>
 8003f2e:	e017      	b.n	8003f60 <_svfiprintf_r+0x114>
 8003f30:	3501      	adds	r5, #1
 8003f32:	e7af      	b.n	8003e94 <_svfiprintf_r+0x48>
 8003f34:	9b05      	ldr	r3, [sp, #20]
 8003f36:	6822      	ldr	r2, [r4, #0]
 8003f38:	1ac0      	subs	r0, r0, r3
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	4083      	lsls	r3, r0
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	002e      	movs	r6, r5
 8003f42:	6023      	str	r3, [r4, #0]
 8003f44:	e7cc      	b.n	8003ee0 <_svfiprintf_r+0x94>
 8003f46:	9b07      	ldr	r3, [sp, #28]
 8003f48:	1d19      	adds	r1, r3, #4
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	9107      	str	r1, [sp, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	db01      	blt.n	8003f56 <_svfiprintf_r+0x10a>
 8003f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f54:	e004      	b.n	8003f60 <_svfiprintf_r+0x114>
 8003f56:	425b      	negs	r3, r3
 8003f58:	60e3      	str	r3, [r4, #12]
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	6023      	str	r3, [r4, #0]
 8003f60:	782b      	ldrb	r3, [r5, #0]
 8003f62:	2b2e      	cmp	r3, #46	; 0x2e
 8003f64:	d10a      	bne.n	8003f7c <_svfiprintf_r+0x130>
 8003f66:	786b      	ldrb	r3, [r5, #1]
 8003f68:	2b2a      	cmp	r3, #42	; 0x2a
 8003f6a:	d135      	bne.n	8003fd8 <_svfiprintf_r+0x18c>
 8003f6c:	9b07      	ldr	r3, [sp, #28]
 8003f6e:	3502      	adds	r5, #2
 8003f70:	1d1a      	adds	r2, r3, #4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	9207      	str	r2, [sp, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	db2b      	blt.n	8003fd2 <_svfiprintf_r+0x186>
 8003f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f7c:	4e2f      	ldr	r6, [pc, #188]	; (800403c <_svfiprintf_r+0x1f0>)
 8003f7e:	2203      	movs	r2, #3
 8003f80:	0030      	movs	r0, r6
 8003f82:	7829      	ldrb	r1, [r5, #0]
 8003f84:	f000 fa08 	bl	8004398 <memchr>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d006      	beq.n	8003f9a <_svfiprintf_r+0x14e>
 8003f8c:	2340      	movs	r3, #64	; 0x40
 8003f8e:	1b80      	subs	r0, r0, r6
 8003f90:	4083      	lsls	r3, r0
 8003f92:	6822      	ldr	r2, [r4, #0]
 8003f94:	3501      	adds	r5, #1
 8003f96:	4313      	orrs	r3, r2
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	7829      	ldrb	r1, [r5, #0]
 8003f9c:	2206      	movs	r2, #6
 8003f9e:	4828      	ldr	r0, [pc, #160]	; (8004040 <_svfiprintf_r+0x1f4>)
 8003fa0:	1c6e      	adds	r6, r5, #1
 8003fa2:	7621      	strb	r1, [r4, #24]
 8003fa4:	f000 f9f8 	bl	8004398 <memchr>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d03c      	beq.n	8004026 <_svfiprintf_r+0x1da>
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <_svfiprintf_r+0x1f8>)
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d125      	bne.n	8003ffe <_svfiprintf_r+0x1b2>
 8003fb2:	2207      	movs	r2, #7
 8003fb4:	9b07      	ldr	r3, [sp, #28]
 8003fb6:	3307      	adds	r3, #7
 8003fb8:	4393      	bics	r3, r2
 8003fba:	3308      	adds	r3, #8
 8003fbc:	9307      	str	r3, [sp, #28]
 8003fbe:	6963      	ldr	r3, [r4, #20]
 8003fc0:	9a04      	ldr	r2, [sp, #16]
 8003fc2:	189b      	adds	r3, r3, r2
 8003fc4:	6163      	str	r3, [r4, #20]
 8003fc6:	e764      	b.n	8003e92 <_svfiprintf_r+0x46>
 8003fc8:	4343      	muls	r3, r0
 8003fca:	0035      	movs	r5, r6
 8003fcc:	2101      	movs	r1, #1
 8003fce:	189b      	adds	r3, r3, r2
 8003fd0:	e7a6      	b.n	8003f20 <_svfiprintf_r+0xd4>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	425b      	negs	r3, r3
 8003fd6:	e7d0      	b.n	8003f7a <_svfiprintf_r+0x12e>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	200a      	movs	r0, #10
 8003fdc:	001a      	movs	r2, r3
 8003fde:	3501      	adds	r5, #1
 8003fe0:	6063      	str	r3, [r4, #4]
 8003fe2:	7829      	ldrb	r1, [r5, #0]
 8003fe4:	1c6e      	adds	r6, r5, #1
 8003fe6:	3930      	subs	r1, #48	; 0x30
 8003fe8:	2909      	cmp	r1, #9
 8003fea:	d903      	bls.n	8003ff4 <_svfiprintf_r+0x1a8>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0c5      	beq.n	8003f7c <_svfiprintf_r+0x130>
 8003ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ff2:	e7c3      	b.n	8003f7c <_svfiprintf_r+0x130>
 8003ff4:	4342      	muls	r2, r0
 8003ff6:	0035      	movs	r5, r6
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	1852      	adds	r2, r2, r1
 8003ffc:	e7f1      	b.n	8003fe2 <_svfiprintf_r+0x196>
 8003ffe:	aa07      	add	r2, sp, #28
 8004000:	9200      	str	r2, [sp, #0]
 8004002:	0021      	movs	r1, r4
 8004004:	003a      	movs	r2, r7
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <_svfiprintf_r+0x1fc>)
 8004008:	9803      	ldr	r0, [sp, #12]
 800400a:	e000      	b.n	800400e <_svfiprintf_r+0x1c2>
 800400c:	bf00      	nop
 800400e:	9004      	str	r0, [sp, #16]
 8004010:	9b04      	ldr	r3, [sp, #16]
 8004012:	3301      	adds	r3, #1
 8004014:	d1d3      	bne.n	8003fbe <_svfiprintf_r+0x172>
 8004016:	89bb      	ldrh	r3, [r7, #12]
 8004018:	980d      	ldr	r0, [sp, #52]	; 0x34
 800401a:	065b      	lsls	r3, r3, #25
 800401c:	d400      	bmi.n	8004020 <_svfiprintf_r+0x1d4>
 800401e:	e72c      	b.n	8003e7a <_svfiprintf_r+0x2e>
 8004020:	2001      	movs	r0, #1
 8004022:	4240      	negs	r0, r0
 8004024:	e729      	b.n	8003e7a <_svfiprintf_r+0x2e>
 8004026:	aa07      	add	r2, sp, #28
 8004028:	9200      	str	r2, [sp, #0]
 800402a:	0021      	movs	r1, r4
 800402c:	003a      	movs	r2, r7
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <_svfiprintf_r+0x1fc>)
 8004030:	9803      	ldr	r0, [sp, #12]
 8004032:	f000 f87b 	bl	800412c <_printf_i>
 8004036:	e7ea      	b.n	800400e <_svfiprintf_r+0x1c2>
 8004038:	080044cc 	.word	0x080044cc
 800403c:	080044d2 	.word	0x080044d2
 8004040:	080044d6 	.word	0x080044d6
 8004044:	00000000 	.word	0x00000000
 8004048:	08003d89 	.word	0x08003d89

0800404c <_printf_common>:
 800404c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800404e:	0016      	movs	r6, r2
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	688a      	ldr	r2, [r1, #8]
 8004054:	690b      	ldr	r3, [r1, #16]
 8004056:	000c      	movs	r4, r1
 8004058:	9000      	str	r0, [sp, #0]
 800405a:	4293      	cmp	r3, r2
 800405c:	da00      	bge.n	8004060 <_printf_common+0x14>
 800405e:	0013      	movs	r3, r2
 8004060:	0022      	movs	r2, r4
 8004062:	6033      	str	r3, [r6, #0]
 8004064:	3243      	adds	r2, #67	; 0x43
 8004066:	7812      	ldrb	r2, [r2, #0]
 8004068:	2a00      	cmp	r2, #0
 800406a:	d001      	beq.n	8004070 <_printf_common+0x24>
 800406c:	3301      	adds	r3, #1
 800406e:	6033      	str	r3, [r6, #0]
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	069b      	lsls	r3, r3, #26
 8004074:	d502      	bpl.n	800407c <_printf_common+0x30>
 8004076:	6833      	ldr	r3, [r6, #0]
 8004078:	3302      	adds	r3, #2
 800407a:	6033      	str	r3, [r6, #0]
 800407c:	6822      	ldr	r2, [r4, #0]
 800407e:	2306      	movs	r3, #6
 8004080:	0015      	movs	r5, r2
 8004082:	401d      	ands	r5, r3
 8004084:	421a      	tst	r2, r3
 8004086:	d027      	beq.n	80040d8 <_printf_common+0x8c>
 8004088:	0023      	movs	r3, r4
 800408a:	3343      	adds	r3, #67	; 0x43
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	1e5a      	subs	r2, r3, #1
 8004090:	4193      	sbcs	r3, r2
 8004092:	6822      	ldr	r2, [r4, #0]
 8004094:	0692      	lsls	r2, r2, #26
 8004096:	d430      	bmi.n	80040fa <_printf_common+0xae>
 8004098:	0022      	movs	r2, r4
 800409a:	9901      	ldr	r1, [sp, #4]
 800409c:	9800      	ldr	r0, [sp, #0]
 800409e:	9d08      	ldr	r5, [sp, #32]
 80040a0:	3243      	adds	r2, #67	; 0x43
 80040a2:	47a8      	blx	r5
 80040a4:	3001      	adds	r0, #1
 80040a6:	d025      	beq.n	80040f4 <_printf_common+0xa8>
 80040a8:	2206      	movs	r2, #6
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	2500      	movs	r5, #0
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d105      	bne.n	80040c0 <_printf_common+0x74>
 80040b4:	6833      	ldr	r3, [r6, #0]
 80040b6:	68e5      	ldr	r5, [r4, #12]
 80040b8:	1aed      	subs	r5, r5, r3
 80040ba:	43eb      	mvns	r3, r5
 80040bc:	17db      	asrs	r3, r3, #31
 80040be:	401d      	ands	r5, r3
 80040c0:	68a3      	ldr	r3, [r4, #8]
 80040c2:	6922      	ldr	r2, [r4, #16]
 80040c4:	4293      	cmp	r3, r2
 80040c6:	dd01      	ble.n	80040cc <_printf_common+0x80>
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	18ed      	adds	r5, r5, r3
 80040cc:	2600      	movs	r6, #0
 80040ce:	42b5      	cmp	r5, r6
 80040d0:	d120      	bne.n	8004114 <_printf_common+0xc8>
 80040d2:	2000      	movs	r0, #0
 80040d4:	e010      	b.n	80040f8 <_printf_common+0xac>
 80040d6:	3501      	adds	r5, #1
 80040d8:	68e3      	ldr	r3, [r4, #12]
 80040da:	6832      	ldr	r2, [r6, #0]
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	42ab      	cmp	r3, r5
 80040e0:	ddd2      	ble.n	8004088 <_printf_common+0x3c>
 80040e2:	0022      	movs	r2, r4
 80040e4:	2301      	movs	r3, #1
 80040e6:	9901      	ldr	r1, [sp, #4]
 80040e8:	9800      	ldr	r0, [sp, #0]
 80040ea:	9f08      	ldr	r7, [sp, #32]
 80040ec:	3219      	adds	r2, #25
 80040ee:	47b8      	blx	r7
 80040f0:	3001      	adds	r0, #1
 80040f2:	d1f0      	bne.n	80040d6 <_printf_common+0x8a>
 80040f4:	2001      	movs	r0, #1
 80040f6:	4240      	negs	r0, r0
 80040f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040fa:	2030      	movs	r0, #48	; 0x30
 80040fc:	18e1      	adds	r1, r4, r3
 80040fe:	3143      	adds	r1, #67	; 0x43
 8004100:	7008      	strb	r0, [r1, #0]
 8004102:	0021      	movs	r1, r4
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	3145      	adds	r1, #69	; 0x45
 8004108:	7809      	ldrb	r1, [r1, #0]
 800410a:	18a2      	adds	r2, r4, r2
 800410c:	3243      	adds	r2, #67	; 0x43
 800410e:	3302      	adds	r3, #2
 8004110:	7011      	strb	r1, [r2, #0]
 8004112:	e7c1      	b.n	8004098 <_printf_common+0x4c>
 8004114:	0022      	movs	r2, r4
 8004116:	2301      	movs	r3, #1
 8004118:	9901      	ldr	r1, [sp, #4]
 800411a:	9800      	ldr	r0, [sp, #0]
 800411c:	9f08      	ldr	r7, [sp, #32]
 800411e:	321a      	adds	r2, #26
 8004120:	47b8      	blx	r7
 8004122:	3001      	adds	r0, #1
 8004124:	d0e6      	beq.n	80040f4 <_printf_common+0xa8>
 8004126:	3601      	adds	r6, #1
 8004128:	e7d1      	b.n	80040ce <_printf_common+0x82>
	...

0800412c <_printf_i>:
 800412c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800412e:	b08b      	sub	sp, #44	; 0x2c
 8004130:	9206      	str	r2, [sp, #24]
 8004132:	000a      	movs	r2, r1
 8004134:	3243      	adds	r2, #67	; 0x43
 8004136:	9307      	str	r3, [sp, #28]
 8004138:	9005      	str	r0, [sp, #20]
 800413a:	9204      	str	r2, [sp, #16]
 800413c:	7e0a      	ldrb	r2, [r1, #24]
 800413e:	000c      	movs	r4, r1
 8004140:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004142:	2a78      	cmp	r2, #120	; 0x78
 8004144:	d809      	bhi.n	800415a <_printf_i+0x2e>
 8004146:	2a62      	cmp	r2, #98	; 0x62
 8004148:	d80b      	bhi.n	8004162 <_printf_i+0x36>
 800414a:	2a00      	cmp	r2, #0
 800414c:	d100      	bne.n	8004150 <_printf_i+0x24>
 800414e:	e0be      	b.n	80042ce <_printf_i+0x1a2>
 8004150:	497c      	ldr	r1, [pc, #496]	; (8004344 <_printf_i+0x218>)
 8004152:	9103      	str	r1, [sp, #12]
 8004154:	2a58      	cmp	r2, #88	; 0x58
 8004156:	d100      	bne.n	800415a <_printf_i+0x2e>
 8004158:	e093      	b.n	8004282 <_printf_i+0x156>
 800415a:	0026      	movs	r6, r4
 800415c:	3642      	adds	r6, #66	; 0x42
 800415e:	7032      	strb	r2, [r6, #0]
 8004160:	e022      	b.n	80041a8 <_printf_i+0x7c>
 8004162:	0010      	movs	r0, r2
 8004164:	3863      	subs	r0, #99	; 0x63
 8004166:	2815      	cmp	r0, #21
 8004168:	d8f7      	bhi.n	800415a <_printf_i+0x2e>
 800416a:	f7fb ffd5 	bl	8000118 <__gnu_thumb1_case_shi>
 800416e:	0016      	.short	0x0016
 8004170:	fff6001f 	.word	0xfff6001f
 8004174:	fff6fff6 	.word	0xfff6fff6
 8004178:	001ffff6 	.word	0x001ffff6
 800417c:	fff6fff6 	.word	0xfff6fff6
 8004180:	fff6fff6 	.word	0xfff6fff6
 8004184:	003600a3 	.word	0x003600a3
 8004188:	fff60083 	.word	0xfff60083
 800418c:	00b4fff6 	.word	0x00b4fff6
 8004190:	0036fff6 	.word	0x0036fff6
 8004194:	fff6fff6 	.word	0xfff6fff6
 8004198:	0087      	.short	0x0087
 800419a:	0026      	movs	r6, r4
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	3642      	adds	r6, #66	; 0x42
 80041a0:	1d11      	adds	r1, r2, #4
 80041a2:	6019      	str	r1, [r3, #0]
 80041a4:	6813      	ldr	r3, [r2, #0]
 80041a6:	7033      	strb	r3, [r6, #0]
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0a2      	b.n	80042f2 <_printf_i+0x1c6>
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	6809      	ldr	r1, [r1, #0]
 80041b0:	1d02      	adds	r2, r0, #4
 80041b2:	060d      	lsls	r5, r1, #24
 80041b4:	d50b      	bpl.n	80041ce <_printf_i+0xa2>
 80041b6:	6805      	ldr	r5, [r0, #0]
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	2d00      	cmp	r5, #0
 80041bc:	da03      	bge.n	80041c6 <_printf_i+0x9a>
 80041be:	232d      	movs	r3, #45	; 0x2d
 80041c0:	9a04      	ldr	r2, [sp, #16]
 80041c2:	426d      	negs	r5, r5
 80041c4:	7013      	strb	r3, [r2, #0]
 80041c6:	4b5f      	ldr	r3, [pc, #380]	; (8004344 <_printf_i+0x218>)
 80041c8:	270a      	movs	r7, #10
 80041ca:	9303      	str	r3, [sp, #12]
 80041cc:	e01b      	b.n	8004206 <_printf_i+0xda>
 80041ce:	6805      	ldr	r5, [r0, #0]
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	0649      	lsls	r1, r1, #25
 80041d4:	d5f1      	bpl.n	80041ba <_printf_i+0x8e>
 80041d6:	b22d      	sxth	r5, r5
 80041d8:	e7ef      	b.n	80041ba <_printf_i+0x8e>
 80041da:	680d      	ldr	r5, [r1, #0]
 80041dc:	6819      	ldr	r1, [r3, #0]
 80041de:	1d08      	adds	r0, r1, #4
 80041e0:	6018      	str	r0, [r3, #0]
 80041e2:	062e      	lsls	r6, r5, #24
 80041e4:	d501      	bpl.n	80041ea <_printf_i+0xbe>
 80041e6:	680d      	ldr	r5, [r1, #0]
 80041e8:	e003      	b.n	80041f2 <_printf_i+0xc6>
 80041ea:	066d      	lsls	r5, r5, #25
 80041ec:	d5fb      	bpl.n	80041e6 <_printf_i+0xba>
 80041ee:	680d      	ldr	r5, [r1, #0]
 80041f0:	b2ad      	uxth	r5, r5
 80041f2:	4b54      	ldr	r3, [pc, #336]	; (8004344 <_printf_i+0x218>)
 80041f4:	2708      	movs	r7, #8
 80041f6:	9303      	str	r3, [sp, #12]
 80041f8:	2a6f      	cmp	r2, #111	; 0x6f
 80041fa:	d000      	beq.n	80041fe <_printf_i+0xd2>
 80041fc:	3702      	adds	r7, #2
 80041fe:	0023      	movs	r3, r4
 8004200:	2200      	movs	r2, #0
 8004202:	3343      	adds	r3, #67	; 0x43
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	6863      	ldr	r3, [r4, #4]
 8004208:	60a3      	str	r3, [r4, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	db03      	blt.n	8004216 <_printf_i+0xea>
 800420e:	2104      	movs	r1, #4
 8004210:	6822      	ldr	r2, [r4, #0]
 8004212:	438a      	bics	r2, r1
 8004214:	6022      	str	r2, [r4, #0]
 8004216:	2d00      	cmp	r5, #0
 8004218:	d102      	bne.n	8004220 <_printf_i+0xf4>
 800421a:	9e04      	ldr	r6, [sp, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00c      	beq.n	800423a <_printf_i+0x10e>
 8004220:	9e04      	ldr	r6, [sp, #16]
 8004222:	0028      	movs	r0, r5
 8004224:	0039      	movs	r1, r7
 8004226:	f7fc f807 	bl	8000238 <__aeabi_uidivmod>
 800422a:	9b03      	ldr	r3, [sp, #12]
 800422c:	3e01      	subs	r6, #1
 800422e:	5c5b      	ldrb	r3, [r3, r1]
 8004230:	7033      	strb	r3, [r6, #0]
 8004232:	002b      	movs	r3, r5
 8004234:	0005      	movs	r5, r0
 8004236:	429f      	cmp	r7, r3
 8004238:	d9f3      	bls.n	8004222 <_printf_i+0xf6>
 800423a:	2f08      	cmp	r7, #8
 800423c:	d109      	bne.n	8004252 <_printf_i+0x126>
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	07db      	lsls	r3, r3, #31
 8004242:	d506      	bpl.n	8004252 <_printf_i+0x126>
 8004244:	6862      	ldr	r2, [r4, #4]
 8004246:	6923      	ldr	r3, [r4, #16]
 8004248:	429a      	cmp	r2, r3
 800424a:	dc02      	bgt.n	8004252 <_printf_i+0x126>
 800424c:	2330      	movs	r3, #48	; 0x30
 800424e:	3e01      	subs	r6, #1
 8004250:	7033      	strb	r3, [r6, #0]
 8004252:	9b04      	ldr	r3, [sp, #16]
 8004254:	1b9b      	subs	r3, r3, r6
 8004256:	6123      	str	r3, [r4, #16]
 8004258:	9b07      	ldr	r3, [sp, #28]
 800425a:	0021      	movs	r1, r4
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	9805      	ldr	r0, [sp, #20]
 8004260:	9b06      	ldr	r3, [sp, #24]
 8004262:	aa09      	add	r2, sp, #36	; 0x24
 8004264:	f7ff fef2 	bl	800404c <_printf_common>
 8004268:	3001      	adds	r0, #1
 800426a:	d147      	bne.n	80042fc <_printf_i+0x1d0>
 800426c:	2001      	movs	r0, #1
 800426e:	4240      	negs	r0, r0
 8004270:	b00b      	add	sp, #44	; 0x2c
 8004272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004274:	2220      	movs	r2, #32
 8004276:	6809      	ldr	r1, [r1, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	6022      	str	r2, [r4, #0]
 800427c:	2278      	movs	r2, #120	; 0x78
 800427e:	4932      	ldr	r1, [pc, #200]	; (8004348 <_printf_i+0x21c>)
 8004280:	9103      	str	r1, [sp, #12]
 8004282:	0021      	movs	r1, r4
 8004284:	3145      	adds	r1, #69	; 0x45
 8004286:	700a      	strb	r2, [r1, #0]
 8004288:	6819      	ldr	r1, [r3, #0]
 800428a:	6822      	ldr	r2, [r4, #0]
 800428c:	c920      	ldmia	r1!, {r5}
 800428e:	0610      	lsls	r0, r2, #24
 8004290:	d402      	bmi.n	8004298 <_printf_i+0x16c>
 8004292:	0650      	lsls	r0, r2, #25
 8004294:	d500      	bpl.n	8004298 <_printf_i+0x16c>
 8004296:	b2ad      	uxth	r5, r5
 8004298:	6019      	str	r1, [r3, #0]
 800429a:	07d3      	lsls	r3, r2, #31
 800429c:	d502      	bpl.n	80042a4 <_printf_i+0x178>
 800429e:	2320      	movs	r3, #32
 80042a0:	4313      	orrs	r3, r2
 80042a2:	6023      	str	r3, [r4, #0]
 80042a4:	2710      	movs	r7, #16
 80042a6:	2d00      	cmp	r5, #0
 80042a8:	d1a9      	bne.n	80041fe <_printf_i+0xd2>
 80042aa:	2220      	movs	r2, #32
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	4393      	bics	r3, r2
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	e7a4      	b.n	80041fe <_printf_i+0xd2>
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	680d      	ldr	r5, [r1, #0]
 80042b8:	1d10      	adds	r0, r2, #4
 80042ba:	6949      	ldr	r1, [r1, #20]
 80042bc:	6018      	str	r0, [r3, #0]
 80042be:	6813      	ldr	r3, [r2, #0]
 80042c0:	062e      	lsls	r6, r5, #24
 80042c2:	d501      	bpl.n	80042c8 <_printf_i+0x19c>
 80042c4:	6019      	str	r1, [r3, #0]
 80042c6:	e002      	b.n	80042ce <_printf_i+0x1a2>
 80042c8:	066d      	lsls	r5, r5, #25
 80042ca:	d5fb      	bpl.n	80042c4 <_printf_i+0x198>
 80042cc:	8019      	strh	r1, [r3, #0]
 80042ce:	2300      	movs	r3, #0
 80042d0:	9e04      	ldr	r6, [sp, #16]
 80042d2:	6123      	str	r3, [r4, #16]
 80042d4:	e7c0      	b.n	8004258 <_printf_i+0x12c>
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	1d11      	adds	r1, r2, #4
 80042da:	6019      	str	r1, [r3, #0]
 80042dc:	6816      	ldr	r6, [r2, #0]
 80042de:	2100      	movs	r1, #0
 80042e0:	0030      	movs	r0, r6
 80042e2:	6862      	ldr	r2, [r4, #4]
 80042e4:	f000 f858 	bl	8004398 <memchr>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d001      	beq.n	80042f0 <_printf_i+0x1c4>
 80042ec:	1b80      	subs	r0, r0, r6
 80042ee:	6060      	str	r0, [r4, #4]
 80042f0:	6863      	ldr	r3, [r4, #4]
 80042f2:	6123      	str	r3, [r4, #16]
 80042f4:	2300      	movs	r3, #0
 80042f6:	9a04      	ldr	r2, [sp, #16]
 80042f8:	7013      	strb	r3, [r2, #0]
 80042fa:	e7ad      	b.n	8004258 <_printf_i+0x12c>
 80042fc:	0032      	movs	r2, r6
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	9906      	ldr	r1, [sp, #24]
 8004302:	9805      	ldr	r0, [sp, #20]
 8004304:	9d07      	ldr	r5, [sp, #28]
 8004306:	47a8      	blx	r5
 8004308:	3001      	adds	r0, #1
 800430a:	d0af      	beq.n	800426c <_printf_i+0x140>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	079b      	lsls	r3, r3, #30
 8004310:	d415      	bmi.n	800433e <_printf_i+0x212>
 8004312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004314:	68e0      	ldr	r0, [r4, #12]
 8004316:	4298      	cmp	r0, r3
 8004318:	daaa      	bge.n	8004270 <_printf_i+0x144>
 800431a:	0018      	movs	r0, r3
 800431c:	e7a8      	b.n	8004270 <_printf_i+0x144>
 800431e:	0022      	movs	r2, r4
 8004320:	2301      	movs	r3, #1
 8004322:	9906      	ldr	r1, [sp, #24]
 8004324:	9805      	ldr	r0, [sp, #20]
 8004326:	9e07      	ldr	r6, [sp, #28]
 8004328:	3219      	adds	r2, #25
 800432a:	47b0      	blx	r6
 800432c:	3001      	adds	r0, #1
 800432e:	d09d      	beq.n	800426c <_printf_i+0x140>
 8004330:	3501      	adds	r5, #1
 8004332:	68e3      	ldr	r3, [r4, #12]
 8004334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	42ab      	cmp	r3, r5
 800433a:	dcf0      	bgt.n	800431e <_printf_i+0x1f2>
 800433c:	e7e9      	b.n	8004312 <_printf_i+0x1e6>
 800433e:	2500      	movs	r5, #0
 8004340:	e7f7      	b.n	8004332 <_printf_i+0x206>
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	080044dd 	.word	0x080044dd
 8004348:	080044ee 	.word	0x080044ee

0800434c <memmove>:
 800434c:	b510      	push	{r4, lr}
 800434e:	4288      	cmp	r0, r1
 8004350:	d902      	bls.n	8004358 <memmove+0xc>
 8004352:	188b      	adds	r3, r1, r2
 8004354:	4298      	cmp	r0, r3
 8004356:	d303      	bcc.n	8004360 <memmove+0x14>
 8004358:	2300      	movs	r3, #0
 800435a:	e007      	b.n	800436c <memmove+0x20>
 800435c:	5c8b      	ldrb	r3, [r1, r2]
 800435e:	5483      	strb	r3, [r0, r2]
 8004360:	3a01      	subs	r2, #1
 8004362:	d2fb      	bcs.n	800435c <memmove+0x10>
 8004364:	bd10      	pop	{r4, pc}
 8004366:	5ccc      	ldrb	r4, [r1, r3]
 8004368:	54c4      	strb	r4, [r0, r3]
 800436a:	3301      	adds	r3, #1
 800436c:	429a      	cmp	r2, r3
 800436e:	d1fa      	bne.n	8004366 <memmove+0x1a>
 8004370:	e7f8      	b.n	8004364 <memmove+0x18>
	...

08004374 <_sbrk_r>:
 8004374:	2300      	movs	r3, #0
 8004376:	b570      	push	{r4, r5, r6, lr}
 8004378:	4d06      	ldr	r5, [pc, #24]	; (8004394 <_sbrk_r+0x20>)
 800437a:	0004      	movs	r4, r0
 800437c:	0008      	movs	r0, r1
 800437e:	602b      	str	r3, [r5, #0]
 8004380:	f7fc fb66 	bl	8000a50 <_sbrk>
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	d103      	bne.n	8004390 <_sbrk_r+0x1c>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d000      	beq.n	8004390 <_sbrk_r+0x1c>
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	bd70      	pop	{r4, r5, r6, pc}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	200002b8 	.word	0x200002b8

08004398 <memchr>:
 8004398:	b2c9      	uxtb	r1, r1
 800439a:	1882      	adds	r2, r0, r2
 800439c:	4290      	cmp	r0, r2
 800439e:	d101      	bne.n	80043a4 <memchr+0xc>
 80043a0:	2000      	movs	r0, #0
 80043a2:	4770      	bx	lr
 80043a4:	7803      	ldrb	r3, [r0, #0]
 80043a6:	428b      	cmp	r3, r1
 80043a8:	d0fb      	beq.n	80043a2 <memchr+0xa>
 80043aa:	3001      	adds	r0, #1
 80043ac:	e7f6      	b.n	800439c <memchr+0x4>

080043ae <memcpy>:
 80043ae:	2300      	movs	r3, #0
 80043b0:	b510      	push	{r4, lr}
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d100      	bne.n	80043b8 <memcpy+0xa>
 80043b6:	bd10      	pop	{r4, pc}
 80043b8:	5ccc      	ldrb	r4, [r1, r3]
 80043ba:	54c4      	strb	r4, [r0, r3]
 80043bc:	3301      	adds	r3, #1
 80043be:	e7f8      	b.n	80043b2 <memcpy+0x4>

080043c0 <_realloc_r>:
 80043c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043c2:	0007      	movs	r7, r0
 80043c4:	000e      	movs	r6, r1
 80043c6:	0014      	movs	r4, r2
 80043c8:	2900      	cmp	r1, #0
 80043ca:	d105      	bne.n	80043d8 <_realloc_r+0x18>
 80043cc:	0011      	movs	r1, r2
 80043ce:	f7ff fc49 	bl	8003c64 <_malloc_r>
 80043d2:	0005      	movs	r5, r0
 80043d4:	0028      	movs	r0, r5
 80043d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043d8:	2a00      	cmp	r2, #0
 80043da:	d103      	bne.n	80043e4 <_realloc_r+0x24>
 80043dc:	f7ff fbd6 	bl	8003b8c <_free_r>
 80043e0:	0025      	movs	r5, r4
 80043e2:	e7f7      	b.n	80043d4 <_realloc_r+0x14>
 80043e4:	f000 f81b 	bl	800441e <_malloc_usable_size_r>
 80043e8:	9001      	str	r0, [sp, #4]
 80043ea:	4284      	cmp	r4, r0
 80043ec:	d803      	bhi.n	80043f6 <_realloc_r+0x36>
 80043ee:	0035      	movs	r5, r6
 80043f0:	0843      	lsrs	r3, r0, #1
 80043f2:	42a3      	cmp	r3, r4
 80043f4:	d3ee      	bcc.n	80043d4 <_realloc_r+0x14>
 80043f6:	0021      	movs	r1, r4
 80043f8:	0038      	movs	r0, r7
 80043fa:	f7ff fc33 	bl	8003c64 <_malloc_r>
 80043fe:	1e05      	subs	r5, r0, #0
 8004400:	d0e8      	beq.n	80043d4 <_realloc_r+0x14>
 8004402:	9b01      	ldr	r3, [sp, #4]
 8004404:	0022      	movs	r2, r4
 8004406:	429c      	cmp	r4, r3
 8004408:	d900      	bls.n	800440c <_realloc_r+0x4c>
 800440a:	001a      	movs	r2, r3
 800440c:	0031      	movs	r1, r6
 800440e:	0028      	movs	r0, r5
 8004410:	f7ff ffcd 	bl	80043ae <memcpy>
 8004414:	0031      	movs	r1, r6
 8004416:	0038      	movs	r0, r7
 8004418:	f7ff fbb8 	bl	8003b8c <_free_r>
 800441c:	e7da      	b.n	80043d4 <_realloc_r+0x14>

0800441e <_malloc_usable_size_r>:
 800441e:	1f0b      	subs	r3, r1, #4
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	1f18      	subs	r0, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	da01      	bge.n	800442c <_malloc_usable_size_r+0xe>
 8004428:	580b      	ldr	r3, [r1, r0]
 800442a:	18c0      	adds	r0, r0, r3
 800442c:	4770      	bx	lr
	...

08004430 <_init>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004436:	bc08      	pop	{r3}
 8004438:	469e      	mov	lr, r3
 800443a:	4770      	bx	lr

0800443c <_fini>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004442:	bc08      	pop	{r3}
 8004444:	469e      	mov	lr, r3
 8004446:	4770      	bx	lr
