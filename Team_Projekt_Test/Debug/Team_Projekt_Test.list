
Team_Projekt_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005384  08005384  00015384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800544c  0800544c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800544c  0800544c  0001544c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005454  08005454  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005454  08005454  00015454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800545c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000064  080054c0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080054c0  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cecd  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e56  00000000  00000000  0002cf9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  0002edf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091f  00000000  00000000  0002f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001525c  00000000  00000000  000302c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f68e  00000000  00000000  00045523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082641  00000000  00000000  00054bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e80  00000000  00000000  000d71f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000da074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800536c 	.word	0x0800536c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	0800536c 	.word	0x0800536c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <RV3028C7_RTC>:
} Mode;



void RV3028C7_RTC(uint8_t timer_val)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b089      	sub	sp, #36	; 0x24
 80004d0:	af04      	add	r7, sp, #16
 80004d2:	0002      	movs	r2, r0
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	701a      	strb	r2, [r3, #0]
	/*******************Test um zu sehen ob I2C Verbindung vorhanden ist********************/
	  if(HAL_I2C_IsDeviceReady(&hi2c1, RV3028C7_Address << 1, 2, 100) == HAL_OK)
 80004d8:	48a7      	ldr	r0, [pc, #668]	; (8000778 <RV3028C7_RTC+0x2ac>)
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	2202      	movs	r2, #2
 80004de:	21a4      	movs	r1, #164	; 0xa4
 80004e0:	f002 f868 	bl	80025b4 <HAL_I2C_IsDeviceReady>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d000      	beq.n	80004ea <RV3028C7_RTC+0x1e>
 80004e8:	e142      	b.n	8000770 <RV3028C7_RTC+0x2a4>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2201      	movs	r2, #1
 80004f0:	2120      	movs	r1, #32
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 fd22 	bl	8001f3c <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80004f8:	23fa      	movs	r3, #250	; 0xfa
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 ff05 	bl	800130c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000502:	23a0      	movs	r3, #160	; 0xa0
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2200      	movs	r2, #0
 8000508:	2120      	movs	r1, #32
 800050a:	0018      	movs	r0, r3
 800050c:	f001 fd16 	bl	8001f3c <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000510:	23fa      	movs	r3, #250	; 0xfa
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	0018      	movs	r0, r3
 8000516:	f000 fef9 	bl	800130c <HAL_Delay>
		  //wenn nicht Verbunden dann Fehler
	  }

	/*********************************RESET******************************************/
	uint8_t TE;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1, &TE, 1, 1000); // lesen von register
 800051a:	4897      	ldr	r0, [pc, #604]	; (8000778 <RV3028C7_RTC+0x2ac>)
 800051c:	23fa      	movs	r3, #250	; 0xfa
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	9302      	str	r3, [sp, #8]
 8000522:	2301      	movs	r3, #1
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	240f      	movs	r4, #15
 8000528:	193b      	adds	r3, r7, r4
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2301      	movs	r3, #1
 800052e:	220f      	movs	r2, #15
 8000530:	21a4      	movs	r1, #164	; 0xa4
 8000532:	f001 ff0b 	bl	800234c <HAL_I2C_Mem_Read>
	TE &= ~(1 << 2);
 8000536:	0021      	movs	r1, r4
 8000538:	187b      	adds	r3, r7, r1
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2204      	movs	r2, #4
 800053e:	4393      	bics	r3, r2
 8000540:	b2da      	uxtb	r2, r3
 8000542:	187b      	adds	r3, r7, r1
 8000544:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1,  &TE, 1, 1000);
 8000546:	488c      	ldr	r0, [pc, #560]	; (8000778 <RV3028C7_RTC+0x2ac>)
 8000548:	23fa      	movs	r3, #250	; 0xfa
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	9302      	str	r3, [sp, #8]
 800054e:	2301      	movs	r3, #1
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	187b      	adds	r3, r7, r1
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2301      	movs	r3, #1
 8000558:	220f      	movs	r2, #15
 800055a:	21a4      	movs	r1, #164	; 0xa4
 800055c:	f001 fdc8 	bl	80020f0 <HAL_I2C_Mem_Write>

	uint8_t TIE;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_2, 1, &TIE, 1, 1000); // lesen von register
 8000560:	4885      	ldr	r0, [pc, #532]	; (8000778 <RV3028C7_RTC+0x2ac>)
 8000562:	23fa      	movs	r3, #250	; 0xfa
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	9302      	str	r3, [sp, #8]
 8000568:	2301      	movs	r3, #1
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	240e      	movs	r4, #14
 800056e:	193b      	adds	r3, r7, r4
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2301      	movs	r3, #1
 8000574:	2210      	movs	r2, #16
 8000576:	21a4      	movs	r1, #164	; 0xa4
 8000578:	f001 fee8 	bl	800234c <HAL_I2C_Mem_Read>
	TIE &= ~(1 << 4);
 800057c:	0021      	movs	r1, r4
 800057e:	187b      	adds	r3, r7, r1
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2210      	movs	r2, #16
 8000584:	4393      	bics	r3, r2
 8000586:	b2da      	uxtb	r2, r3
 8000588:	187b      	adds	r3, r7, r1
 800058a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_2, 1,  &TIE, 1, 1000);
 800058c:	487a      	ldr	r0, [pc, #488]	; (8000778 <RV3028C7_RTC+0x2ac>)
 800058e:	23fa      	movs	r3, #250	; 0xfa
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	9302      	str	r3, [sp, #8]
 8000594:	2301      	movs	r3, #1
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	187b      	adds	r3, r7, r1
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2301      	movs	r3, #1
 800059e:	2210      	movs	r2, #16
 80005a0:	21a4      	movs	r1, #164	; 0xa4
 80005a2:	f001 fda5 	bl	80020f0 <HAL_I2C_Mem_Write>

	uint8_t TF;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Status, 1, &TF, 1, 1000); // lesen von register
 80005a6:	4874      	ldr	r0, [pc, #464]	; (8000778 <RV3028C7_RTC+0x2ac>)
 80005a8:	23fa      	movs	r3, #250	; 0xfa
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	9302      	str	r3, [sp, #8]
 80005ae:	2301      	movs	r3, #1
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	240d      	movs	r4, #13
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	220e      	movs	r2, #14
 80005bc:	21a4      	movs	r1, #164	; 0xa4
 80005be:	f001 fec5 	bl	800234c <HAL_I2C_Mem_Read>
	TF &= ~(1 << 3);
 80005c2:	0021      	movs	r1, r4
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2208      	movs	r2, #8
 80005ca:	4393      	bics	r3, r2
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Status, 1,  &TF, 1, 1000);
 80005d2:	4869      	ldr	r0, [pc, #420]	; (8000778 <RV3028C7_RTC+0x2ac>)
 80005d4:	23fa      	movs	r3, #250	; 0xfa
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	9302      	str	r3, [sp, #8]
 80005da:	2301      	movs	r3, #1
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	220e      	movs	r2, #14
 80005e6:	21a4      	movs	r1, #164	; 0xa4
 80005e8:	f001 fd82 	bl	80020f0 <HAL_I2C_Mem_Write>

	/*********************************INIT******************************************/
	uint8_t TRPT;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1, &TRPT, 1, 1000); // lesen von register
 80005ec:	4862      	ldr	r0, [pc, #392]	; (8000778 <RV3028C7_RTC+0x2ac>)
 80005ee:	23fa      	movs	r3, #250	; 0xfa
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	9302      	str	r3, [sp, #8]
 80005f4:	2301      	movs	r3, #1
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	240c      	movs	r4, #12
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2301      	movs	r3, #1
 8000600:	220f      	movs	r2, #15
 8000602:	21a4      	movs	r1, #164	; 0xa4
 8000604:	f001 fea2 	bl	800234c <HAL_I2C_Mem_Read>
	TRPT |= (1 << 7);
 8000608:	0021      	movs	r1, r4
 800060a:	187b      	adds	r3, r7, r1
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	4252      	negs	r2, r2
 8000612:	4313      	orrs	r3, r2
 8000614:	b2da      	uxtb	r2, r3
 8000616:	187b      	adds	r3, r7, r1
 8000618:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1,  &TRPT, 1, 1000);
 800061a:	4857      	ldr	r0, [pc, #348]	; (8000778 <RV3028C7_RTC+0x2ac>)
 800061c:	23fa      	movs	r3, #250	; 0xfa
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2301      	movs	r3, #1
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	187b      	adds	r3, r7, r1
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2301      	movs	r3, #1
 800062c:	220f      	movs	r2, #15
 800062e:	21a4      	movs	r1, #164	; 0xa4
 8000630:	f001 fd5e 	bl	80020f0 <HAL_I2C_Mem_Write>

	uint8_t TD;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1, &TD, 1, 1000); // lesen von register
 8000634:	4850      	ldr	r0, [pc, #320]	; (8000778 <RV3028C7_RTC+0x2ac>)
 8000636:	23fa      	movs	r3, #250	; 0xfa
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	9302      	str	r3, [sp, #8]
 800063c:	2301      	movs	r3, #1
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	240b      	movs	r4, #11
 8000642:	193b      	adds	r3, r7, r4
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	220f      	movs	r2, #15
 800064a:	21a4      	movs	r1, #164	; 0xa4
 800064c:	f001 fe7e 	bl	800234c <HAL_I2C_Mem_Read>
	TD |= 0x02;
 8000650:	0021      	movs	r1, r4
 8000652:	187b      	adds	r3, r7, r1
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2202      	movs	r2, #2
 8000658:	4313      	orrs	r3, r2
 800065a:	b2da      	uxtb	r2, r3
 800065c:	187b      	adds	r3, r7, r1
 800065e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1,  &TD, 1, 1000);
 8000660:	4845      	ldr	r0, [pc, #276]	; (8000778 <RV3028C7_RTC+0x2ac>)
 8000662:	23fa      	movs	r3, #250	; 0xfa
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	9302      	str	r3, [sp, #8]
 8000668:	2301      	movs	r3, #1
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	187b      	adds	r3, r7, r1
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2301      	movs	r3, #1
 8000672:	220f      	movs	r2, #15
 8000674:	21a4      	movs	r1, #164	; 0xa4
 8000676:	f001 fd3b 	bl	80020f0 <HAL_I2C_Mem_Write>


	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Timer_Val_0, 1,  &timer_val, 1, 1000);
 800067a:	483f      	ldr	r0, [pc, #252]	; (8000778 <RV3028C7_RTC+0x2ac>)
 800067c:	23fa      	movs	r3, #250	; 0xfa
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	9302      	str	r3, [sp, #8]
 8000682:	2301      	movs	r3, #1
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2301      	movs	r3, #1
 800068c:	220a      	movs	r2, #10
 800068e:	21a4      	movs	r1, #164	; 0xa4
 8000690:	f001 fd2e 	bl	80020f0 <HAL_I2C_Mem_Write>


	uint8_t TIEM;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_2, 1, &TIEM, 1, 1000); // lesen von register
 8000694:	4838      	ldr	r0, [pc, #224]	; (8000778 <RV3028C7_RTC+0x2ac>)
 8000696:	23fa      	movs	r3, #250	; 0xfa
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	9302      	str	r3, [sp, #8]
 800069c:	2301      	movs	r3, #1
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	240a      	movs	r4, #10
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2301      	movs	r3, #1
 80006a8:	2210      	movs	r2, #16
 80006aa:	21a4      	movs	r1, #164	; 0xa4
 80006ac:	f001 fe4e 	bl	800234c <HAL_I2C_Mem_Read>
	TIEM |= (1 << 4);
 80006b0:	0021      	movs	r1, r4
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2210      	movs	r2, #16
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_2, 1,  &TIEM, 1, 1000);
 80006c0:	482d      	ldr	r0, [pc, #180]	; (8000778 <RV3028C7_RTC+0x2ac>)
 80006c2:	23fa      	movs	r3, #250	; 0xfa
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	9302      	str	r3, [sp, #8]
 80006c8:	2301      	movs	r3, #1
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2301      	movs	r3, #1
 80006d2:	2210      	movs	r2, #16
 80006d4:	21a4      	movs	r1, #164	; 0xa4
 80006d6:	f001 fd0b 	bl	80020f0 <HAL_I2C_Mem_Write>

	uint8_t TEM;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1, &TEM, 1, 1000); // lesen von register
 80006da:	4827      	ldr	r0, [pc, #156]	; (8000778 <RV3028C7_RTC+0x2ac>)
 80006dc:	23fa      	movs	r3, #250	; 0xfa
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	9302      	str	r3, [sp, #8]
 80006e2:	2301      	movs	r3, #1
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	2409      	movs	r4, #9
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2301      	movs	r3, #1
 80006ee:	220f      	movs	r2, #15
 80006f0:	21a4      	movs	r1, #164	; 0xa4
 80006f2:	f001 fe2b 	bl	800234c <HAL_I2C_Mem_Read>
	TEM |= (1 << 2);
 80006f6:	0021      	movs	r1, r4
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2204      	movs	r2, #4
 80006fe:	4313      	orrs	r3, r2
 8000700:	b2da      	uxtb	r2, r3
 8000702:	187b      	adds	r3, r7, r1
 8000704:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1,  &TEM, 1, 1000);
 8000706:	481c      	ldr	r0, [pc, #112]	; (8000778 <RV3028C7_RTC+0x2ac>)
 8000708:	23fa      	movs	r3, #250	; 0xfa
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	9302      	str	r3, [sp, #8]
 800070e:	2301      	movs	r3, #1
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	187b      	adds	r3, r7, r1
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2301      	movs	r3, #1
 8000718:	220f      	movs	r2, #15
 800071a:	21a4      	movs	r1, #164	; 0xa4
 800071c:	f001 fce8 	bl	80020f0 <HAL_I2C_Mem_Write>
	/*********************************BACKUP******************************************/
	uint8_t backup = 0x00;
 8000720:	2108      	movs	r1, #8
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_EEPROM_Backup, 1,  &backup, 1, 1000); //reset
 8000728:	4813      	ldr	r0, [pc, #76]	; (8000778 <RV3028C7_RTC+0x2ac>)
 800072a:	23fa      	movs	r3, #250	; 0xfa
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	2301      	movs	r3, #1
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	000c      	movs	r4, r1
 8000736:	187b      	adds	r3, r7, r1
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	2237      	movs	r2, #55	; 0x37
 800073e:	21a4      	movs	r1, #164	; 0xa4
 8000740:	f001 fcd6 	bl	80020f0 <HAL_I2C_Mem_Write>

	backup |= (1 << 2);
 8000744:	0021      	movs	r1, r4
 8000746:	187b      	adds	r3, r7, r1
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2204      	movs	r2, #4
 800074c:	4313      	orrs	r3, r2
 800074e:	b2da      	uxtb	r2, r3
 8000750:	187b      	adds	r3, r7, r1
 8000752:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_EEPROM_Backup, 1,  &backup, 1, 1000);
 8000754:	4808      	ldr	r0, [pc, #32]	; (8000778 <RV3028C7_RTC+0x2ac>)
 8000756:	23fa      	movs	r3, #250	; 0xfa
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	9302      	str	r3, [sp, #8]
 800075c:	2301      	movs	r3, #1
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	187b      	adds	r3, r7, r1
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2301      	movs	r3, #1
 8000766:	2237      	movs	r2, #55	; 0x37
 8000768:	21a4      	movs	r1, #164	; 0xa4
 800076a:	f001 fcc1 	bl	80020f0 <HAL_I2C_Mem_Write>
 800076e:	e000      	b.n	8000772 <RV3028C7_RTC+0x2a6>
		  	  return;
 8000770:	46c0      	nop			; (mov r8, r8)

}
 8000772:	46bd      	mov	sp, r7
 8000774:	b005      	add	sp, #20
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	200000dc 	.word	0x200000dc

0800077c <PCF_RTC>:
 * 46,875ms bis 218,750ms reicht. Für unterschiedliche MCUs und Anwendungsgebiete kann dieser Timer
 * sinnvoll sein. Neben dem Modi werden weitere Parameter wie Frequenz und Anfangswert des Timers
 * um das Interrupt Intervall einzustellen.
 */
void PCF_RTC(uint8_t val, uint8_t freq, uint8_t inter, uint8_t control, Mode mode)
{
 800077c:	b5b0      	push	{r4, r5, r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af04      	add	r7, sp, #16
 8000782:	0005      	movs	r5, r0
 8000784:	000c      	movs	r4, r1
 8000786:	0010      	movs	r0, r2
 8000788:	0019      	movs	r1, r3
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	1c2a      	adds	r2, r5, #0
 800078e:	701a      	strb	r2, [r3, #0]
 8000790:	1dbb      	adds	r3, r7, #6
 8000792:	1c22      	adds	r2, r4, #0
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	1d7b      	adds	r3, r7, #5
 8000798:	1c02      	adds	r2, r0, #0
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	1c0a      	adds	r2, r1, #0
 80007a0:	701a      	strb	r2, [r3, #0]
	/*******************Test um zu sehen ob I2C Verbindung vorhanden ist********************/
	  if(HAL_I2C_IsDeviceReady(&hi2c1, PCF8523_Address << 1, 2, 100) == HAL_OK)
 80007a2:	4861      	ldr	r0, [pc, #388]	; (8000928 <PCF_RTC+0x1ac>)
 80007a4:	2364      	movs	r3, #100	; 0x64
 80007a6:	2202      	movs	r2, #2
 80007a8:	21d0      	movs	r1, #208	; 0xd0
 80007aa:	f001 ff03 	bl	80025b4 <HAL_I2C_IsDeviceReady>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d000      	beq.n	80007b4 <PCF_RTC+0x38>
 80007b2:	e0b5      	b.n	8000920 <PCF_RTC+0x1a4>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007b4:	23a0      	movs	r3, #160	; 0xa0
 80007b6:	05db      	lsls	r3, r3, #23
 80007b8:	2201      	movs	r2, #1
 80007ba:	2120      	movs	r1, #32
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fbbd 	bl	8001f3c <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80007c2:	23fa      	movs	r3, #250	; 0xfa
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fda0 	bl	800130c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007cc:	23a0      	movs	r3, #160	; 0xa0
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	2200      	movs	r2, #0
 80007d2:	2120      	movs	r1, #32
 80007d4:	0018      	movs	r0, r3
 80007d6:	f001 fbb1 	bl	8001f3c <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80007da:	23fa      	movs	r3, #250	; 0xfa
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 fd94 	bl	800130c <HAL_Delay>
		  	  return;
		  //wenn nicht Verbunden dann Fehler
	  }

	/*********************************RESET******************************************/
	HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Control_1, 1, &pcf_reset, 1, 1000);
 80007e4:	4850      	ldr	r0, [pc, #320]	; (8000928 <PCF_RTC+0x1ac>)
 80007e6:	23fa      	movs	r3, #250	; 0xfa
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	4b4e      	ldr	r3, [pc, #312]	; (800092c <PCF_RTC+0x1b0>)
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2301      	movs	r3, #1
 80007f6:	2200      	movs	r2, #0
 80007f8:	21d0      	movs	r1, #208	; 0xd0
 80007fa:	f001 fc79 	bl	80020f0 <HAL_I2C_Mem_Write>
	/*********************************Interrupt Enable******************************************/

	HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Control_2, 1,  &inter, 1, 1000); // schreiben des registers mit gesetztem bit
 80007fe:	484a      	ldr	r0, [pc, #296]	; (8000928 <PCF_RTC+0x1ac>)
 8000800:	23fa      	movs	r3, #250	; 0xfa
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	9302      	str	r3, [sp, #8]
 8000806:	2301      	movs	r3, #1
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	1d7b      	adds	r3, r7, #5
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2301      	movs	r3, #1
 8000810:	2201      	movs	r2, #1
 8000812:	21d0      	movs	r1, #208	; 0xd0
 8000814:	f001 fc6c 	bl	80020f0 <HAL_I2C_Mem_Write>
	/*********************************Modus******************************************/

	HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Tmr_CLKOUT_ctrl, 1,  &control, 1, 1000);
 8000818:	4843      	ldr	r0, [pc, #268]	; (8000928 <PCF_RTC+0x1ac>)
 800081a:	23fa      	movs	r3, #250	; 0xfa
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	9302      	str	r3, [sp, #8]
 8000820:	2301      	movs	r3, #1
 8000822:	9301      	str	r3, [sp, #4]
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2301      	movs	r3, #1
 800082a:	220f      	movs	r2, #15
 800082c:	21d0      	movs	r1, #208	; 0xd0
 800082e:	f001 fc5f 	bl	80020f0 <HAL_I2C_Mem_Write>


	if (mode == RTC_PCF_MODE_A)
 8000832:	2320      	movs	r3, #32
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d11a      	bne.n	8000872 <PCF_RTC+0xf6>
	{
		HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Tmr_A_freq_ctrl, 1, &freq, 1, 1000); // schreiben von frequenz register
 800083c:	483a      	ldr	r0, [pc, #232]	; (8000928 <PCF_RTC+0x1ac>)
 800083e:	23fa      	movs	r3, #250	; 0xfa
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	9302      	str	r3, [sp, #8]
 8000844:	2301      	movs	r3, #1
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	1dbb      	adds	r3, r7, #6
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2301      	movs	r3, #1
 800084e:	2210      	movs	r2, #16
 8000850:	21d0      	movs	r1, #208	; 0xd0
 8000852:	f001 fc4d 	bl	80020f0 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Tmr_A_reg, 1, &val, 1, 1000);
 8000856:	4834      	ldr	r0, [pc, #208]	; (8000928 <PCF_RTC+0x1ac>)
 8000858:	23fa      	movs	r3, #250	; 0xfa
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	9302      	str	r3, [sp, #8]
 800085e:	2301      	movs	r3, #1
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2301      	movs	r3, #1
 8000868:	2211      	movs	r2, #17
 800086a:	21d0      	movs	r1, #208	; 0xd0
 800086c:	f001 fc40 	bl	80020f0 <HAL_I2C_Mem_Write>
 8000870:	e02d      	b.n	80008ce <PCF_RTC+0x152>
	}
	else if (mode == RTC_PCF_MODE_B)
 8000872:	2320      	movs	r3, #32
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b02      	cmp	r3, #2
 800087a:	d11a      	bne.n	80008b2 <PCF_RTC+0x136>
	{
		HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, PCF8523_TIMER_B_FRCTL, 1, &freq, 1, 1000); // schreiben von frequenz register
 800087c:	482a      	ldr	r0, [pc, #168]	; (8000928 <PCF_RTC+0x1ac>)
 800087e:	23fa      	movs	r3, #250	; 0xfa
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	9302      	str	r3, [sp, #8]
 8000884:	2301      	movs	r3, #1
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	1dbb      	adds	r3, r7, #6
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2301      	movs	r3, #1
 800088e:	2212      	movs	r2, #18
 8000890:	21d0      	movs	r1, #208	; 0xd0
 8000892:	f001 fc2d 	bl	80020f0 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, PCF8523_TIMER_B_VALUE, 1, &val, 1, 1000);
 8000896:	4824      	ldr	r0, [pc, #144]	; (8000928 <PCF_RTC+0x1ac>)
 8000898:	23fa      	movs	r3, #250	; 0xfa
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	9302      	str	r3, [sp, #8]
 800089e:	2301      	movs	r3, #1
 80008a0:	9301      	str	r3, [sp, #4]
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2301      	movs	r3, #1
 80008a8:	2213      	movs	r2, #19
 80008aa:	21d0      	movs	r1, #208	; 0xd0
 80008ac:	f001 fc20 	bl	80020f0 <HAL_I2C_Mem_Write>
 80008b0:	e00d      	b.n	80008ce <PCF_RTC+0x152>
	}
	else
	{
		HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Control_1, 1, &pcf_reset, 1, 1000);
 80008b2:	481d      	ldr	r0, [pc, #116]	; (8000928 <PCF_RTC+0x1ac>)
 80008b4:	23fa      	movs	r3, #250	; 0xfa
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	9302      	str	r3, [sp, #8]
 80008ba:	2301      	movs	r3, #1
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <PCF_RTC+0x1b0>)
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2301      	movs	r3, #1
 80008c4:	2200      	movs	r2, #0
 80008c6:	21d0      	movs	r1, #208	; 0xd0
 80008c8:	f001 fc12 	bl	80020f0 <HAL_I2C_Mem_Write>
		return;
 80008cc:	e029      	b.n	8000922 <PCF_RTC+0x1a6>
	}
	/*********************************Batterie******************************************/

	uint8_t battery = 0x00; // Von Hand resetten!
 80008ce:	210f      	movs	r1, #15
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Control_3, 1,  &battery, 1, 1000); //reset
 80008d6:	4814      	ldr	r0, [pc, #80]	; (8000928 <PCF_RTC+0x1ac>)
 80008d8:	23fa      	movs	r3, #250	; 0xfa
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	9302      	str	r3, [sp, #8]
 80008de:	2301      	movs	r3, #1
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	000c      	movs	r4, r1
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2301      	movs	r3, #1
 80008ea:	2202      	movs	r2, #2
 80008ec:	21d0      	movs	r1, #208	; 0xd0
 80008ee:	f001 fbff 	bl	80020f0 <HAL_I2C_Mem_Write>

	battery |= (1 << 7);
 80008f2:	0021      	movs	r1, r4
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	4252      	negs	r2, r2
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	187b      	adds	r3, r7, r1
 8000902:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Control_3, 1, &battery, 1, 1000); // batterie mode aktiviert
 8000904:	4808      	ldr	r0, [pc, #32]	; (8000928 <PCF_RTC+0x1ac>)
 8000906:	23fa      	movs	r3, #250	; 0xfa
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	9302      	str	r3, [sp, #8]
 800090c:	2301      	movs	r3, #1
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	187b      	adds	r3, r7, r1
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2301      	movs	r3, #1
 8000916:	2202      	movs	r2, #2
 8000918:	21d0      	movs	r1, #208	; 0xd0
 800091a:	f001 fbe9 	bl	80020f0 <HAL_I2C_Mem_Write>
 800091e:	e000      	b.n	8000922 <PCF_RTC+0x1a6>
		  	  return;
 8000920:	46c0      	nop			; (mov r8, r8)

}
 8000922:	46bd      	mov	sp, r7
 8000924:	b004      	add	sp, #16
 8000926:	bdb0      	pop	{r4, r5, r7, pc}
 8000928:	200000dc 	.word	0x200000dc
 800092c:	20000000 	.word	0x20000000

08000930 <Go_To_Standby>:
 *Messungen benutzt um eine Schlussvolgerung von Standby-Modus und STFO-Schaltung zu
 *ziehen. PA0 dient hierbei als Wake-Up-Pin. Der Mikrocontroller geht in den Standby-
 *Modus. Er wacht auf, falls ein Interrupt auf dem Wake-Up-Pin empfangen wird.
 */
void Go_To_Standby()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

	  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <Go_To_Standby+0x6c>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2202      	movs	r2, #2
 800093a:	4013      	ands	r3, r2
 800093c:	2b02      	cmp	r3, #2
 800093e:	d11d      	bne.n	800097c <Go_To_Standby+0x4c>
	  {
		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <Go_To_Standby+0x6c>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <Go_To_Standby+0x6c>)
 8000946:	2108      	movs	r1, #8
 8000948:	430a      	orrs	r2, r1
 800094a:	601a      	str	r2, [r3, #0]


		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800094c:	23a0      	movs	r3, #160	; 0xa0
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	2201      	movs	r2, #1
 8000952:	2120      	movs	r1, #32
 8000954:	0018      	movs	r0, r3
 8000956:	f001 faf1 	bl	8001f3c <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800095a:	23fa      	movs	r3, #250	; 0xfa
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fcd4 	bl	800130c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	2200      	movs	r2, #0
 800096a:	2120      	movs	r1, #32
 800096c:	0018      	movs	r0, r3
 800096e:	f001 fae5 	bl	8001f3c <HAL_GPIO_WritePin>
		  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1); //disable PA0
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	0018      	movs	r0, r3
 8000978:	f002 fad8 	bl	8002f2c <HAL_PWR_DisableWakeUpPin>
	  }

	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <Go_To_Standby+0x6c>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <Go_To_Standby+0x6c>)
 8000982:	2104      	movs	r1, #4
 8000984:	430a      	orrs	r2, r1
 8000986:	601a      	str	r2, [r3, #0]

	  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	0018      	movs	r0, r3
 800098e:	f002 fabd 	bl	8002f0c <HAL_PWR_EnableWakeUpPin>

	  HAL_PWR_EnterSTANDBYMode();
 8000992:	f002 fadd 	bl	8002f50 <HAL_PWR_EnterSTANDBYMode>
}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40007000 	.word	0x40007000

080009a0 <feuchtigkeit>:
 * Messdaten um. Bei neuen Umgebungsbedingungen muss der Sensor neu kalibriert werden.
 * Bei der jetzigen Kalibrierung steht ein Messwert von 2780 für eine Feuchtigkeit von
 * 0% und ein Wert von 1180 für 100%.
 */
void feuchtigkeit (int daten)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	if(daten >= 2780)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <feuchtigkeit+0x4c>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	dd03      	ble.n	80009b8 <feuchtigkeit+0x18>
	{
		prozent = 0;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <feuchtigkeit+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
	}
	else if (daten <= 1180)
	{
		prozent = 100;
	}
}
 80009b6:	e014      	b.n	80009e2 <feuchtigkeit+0x42>
	else if (daten >= 1180)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <feuchtigkeit+0x54>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	dd09      	ble.n	80009d4 <feuchtigkeit+0x34>
		prozent = (2780-daten)/16;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <feuchtigkeit+0x58>)
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	d500      	bpl.n	80009ca <feuchtigkeit+0x2a>
 80009c8:	330f      	adds	r3, #15
 80009ca:	111b      	asrs	r3, r3, #4
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <feuchtigkeit+0x50>)
 80009d0:	701a      	strb	r2, [r3, #0]
}
 80009d2:	e006      	b.n	80009e2 <feuchtigkeit+0x42>
	else if (daten <= 1180)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <feuchtigkeit+0x5c>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	dc02      	bgt.n	80009e2 <feuchtigkeit+0x42>
		prozent = 100;
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <feuchtigkeit+0x50>)
 80009de:	2264      	movs	r2, #100	; 0x64
 80009e0:	701a      	strb	r2, [r3, #0]
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b002      	add	sp, #8
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	00000adb 	.word	0x00000adb
 80009f0:	200001d0 	.word	0x200001d0
 80009f4:	0000049b 	.word	0x0000049b
 80009f8:	00000adc 	.word	0x00000adc
 80009fc:	0000049c 	.word	0x0000049c

08000a00 <Messung>:
 * über den ADC gesammelt, durch die Funktion feuchtigkeit() weiterverarbeitet und
 * über eine UART-Schnittstelle versendet. Nach dem Verarbeiten der Daten wird der
 * Pin PC0 auf Low gesetzt und somit die Selbsthaltung ausgeschaltet.
 */
void Messung()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000a06:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <Messung+0x94>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f001 fa95 	bl	8001f3c <HAL_GPIO_WritePin>

	for (int i=0; i<3; i++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	e02f      	b.n	8000a78 <Messung+0x78>
	{
		HAL_ADC_Start(&hadc);
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <Messung+0x98>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fe0e 	bl	800163c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 20);
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <Messung+0x98>)
 8000a22:	2114      	movs	r1, #20
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 fe5d 	bl	80016e4 <HAL_ADC_PollForConversion>
		data = HAL_ADC_GetValue(&hadc);
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <Messung+0x98>)
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f000 fef5 	bl	800181c <HAL_ADC_GetValue>
 8000a32:	0003      	movs	r3, r0
 8000a34:	001a      	movs	r2, r3
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <Messung+0x9c>)
 8000a38:	601a      	str	r2, [r3, #0]
		feuchtigkeit(data);
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <Messung+0x9c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f7ff ffae 	bl	80009a0 <feuchtigkeit>
		sprintf(msg, "Feuchtigkeit %hu \r\n", prozent);
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <Messung+0xa0>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4916      	ldr	r1, [pc, #88]	; (8000aa4 <Messung+0xa4>)
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <Messung+0xa8>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f003 ffe6 	bl	8004a20 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <Messung+0xa8>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff fb56 	bl	8000108 <strlen>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	2301      	movs	r3, #1
 8000a62:	425b      	negs	r3, r3
 8000a64:	4910      	ldr	r1, [pc, #64]	; (8000aa8 <Messung+0xa8>)
 8000a66:	4811      	ldr	r0, [pc, #68]	; (8000aac <Messung+0xac>)
 8000a68:	f003 fa72 	bl	8003f50 <HAL_UART_Transmit>
		HAL_Delay(10);
 8000a6c:	200a      	movs	r0, #10
 8000a6e:	f000 fc4d 	bl	800130c <HAL_Delay>
	for (int i=0; i<3; i++)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3301      	adds	r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	ddcc      	ble.n	8000a18 <Messung+0x18>
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <Messung+0x94>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	2101      	movs	r1, #1
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 fa59 	bl	8001f3c <HAL_GPIO_WritePin>


}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	50000800 	.word	0x50000800
 8000a98:	20000080 	.word	0x20000080
 8000a9c:	200001b8 	.word	0x200001b8
 8000aa0:	200001d0 	.word	0x200001d0
 8000aa4:	08005384 	.word	0x08005384
 8000aa8:	200001bc 	.word	0x200001bc
 8000aac:	20000130 	.word	0x20000130

08000ab0 <chooseMode>:
 * von Standby und STFO-Schaltung da. Data-Modus wird benutzt um die Selbsthaltung zu schalten
 * sowie die Daten des Feuchtigkeitssensors auszulesen. Dieser Modus wird benutzt, wenn der MCU
 * mit der STFO-Schaltung verbunden ist.
 */
void chooseMode(Mode m)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	0002      	movs	r2, r0
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	701a      	strb	r2, [r3, #0]

	  switch (m){
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d828      	bhi.n	8000b16 <chooseMode+0x66>
 8000ac4:	009a      	lsls	r2, r3, #2
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <chooseMode+0x70>)
 8000ac8:	18d3      	adds	r3, r2, r3
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	469f      	mov	pc, r3

	  case RTC_RV_MODE:
		  RV3028C7_RTC(0x0A);
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f7ff fcfc 	bl	80004cc <RV3028C7_RTC>
		  break;
 8000ad4:	e020      	b.n	8000b18 <chooseMode+0x68>

	  case RTC_PCF_MODE_A:
		  PCF_RTC(pcf_timr, pcf_freq, InEn, con, RTC_PCF_MODE_A);
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <chooseMode+0x74>)
 8000ad8:	7818      	ldrb	r0, [r3, #0]
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <chooseMode+0x78>)
 8000adc:	7819      	ldrb	r1, [r3, #0]
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <chooseMode+0x7c>)
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <chooseMode+0x80>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2401      	movs	r4, #1
 8000ae8:	9400      	str	r4, [sp, #0]
 8000aea:	f7ff fe47 	bl	800077c <PCF_RTC>
		  break;
 8000aee:	e013      	b.n	8000b18 <chooseMode+0x68>

	  case RTC_PCF_MODE_B:
		  PCF_RTC(pcf_timr, pcf_freq, InEn, con, RTC_PCF_MODE_B);
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <chooseMode+0x74>)
 8000af2:	7818      	ldrb	r0, [r3, #0]
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <chooseMode+0x78>)
 8000af6:	7819      	ldrb	r1, [r3, #0]
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <chooseMode+0x7c>)
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <chooseMode+0x80>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2402      	movs	r4, #2
 8000b02:	9400      	str	r4, [sp, #0]
 8000b04:	f7ff fe3a 	bl	800077c <PCF_RTC>
		  break;
 8000b08:	e006      	b.n	8000b18 <chooseMode+0x68>

	  case DATA_MODE:
		  Messung();
 8000b0a:	f7ff ff79 	bl	8000a00 <Messung>
		  break;
 8000b0e:	e003      	b.n	8000b18 <chooseMode+0x68>

	  case SLEEP_MODE:
		  Go_To_Standby();
 8000b10:	f7ff ff0e 	bl	8000930 <Go_To_Standby>
		  break;
 8000b14:	e000      	b.n	8000b18 <chooseMode+0x68>

	  default:

		  break;
 8000b16:	46c0      	nop			; (mov r8, r8)

	  }


}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b003      	add	sp, #12
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	08005398 	.word	0x08005398
 8000b24:	20000002 	.word	0x20000002
 8000b28:	20000001 	.word	0x20000001
 8000b2c:	20000003 	.word	0x20000003
 8000b30:	20000004 	.word	0x20000004

08000b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  HAL_Init();
 8000b38:	f000 fb78 	bl	800122c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3c:	f000 f80c 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b40:	f000 f954 	bl	8000dec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b44:	f000 f8e2 	bl	8000d0c <MX_I2C1_Init>
  MX_ADC_Init();
 8000b48:	f000 f87a 	bl	8000c40 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000b4c:	f000 f91e 	bl	8000d8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */




 chooseMode(RTC_PCF_MODE_A);
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff ffad 	bl	8000ab0 <chooseMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <main+0x22>

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b09f      	sub	sp, #124	; 0x7c
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	2440      	movs	r4, #64	; 0x40
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	0018      	movs	r0, r3
 8000b64:	2338      	movs	r3, #56	; 0x38
 8000b66:	001a      	movs	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f003 ff79 	bl	8004a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6e:	232c      	movs	r3, #44	; 0x2c
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	0018      	movs	r0, r3
 8000b74:	2314      	movs	r3, #20
 8000b76:	001a      	movs	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f003 ff71 	bl	8004a60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	0018      	movs	r0, r3
 8000b82:	2328      	movs	r3, #40	; 0x28
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f003 ff6a 	bl	8004a60 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <SystemClock_Config+0xe0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a2a      	ldr	r2, [pc, #168]	; (8000c3c <SystemClock_Config+0xe4>)
 8000b92:	401a      	ands	r2, r3
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <SystemClock_Config+0xe0>)
 8000b96:	2180      	movs	r1, #128	; 0x80
 8000b98:	0109      	lsls	r1, r1, #4
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b9e:	0021      	movs	r1, r4
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2201      	movs	r2, #1
 8000baa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2210      	movs	r2, #16
 8000bb0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	0412      	lsls	r2, r2, #16
 8000bca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f002 f9d4 	bl	8002f7c <HAL_RCC_OscConfig>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bd8:	f000 f9c2 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	212c      	movs	r1, #44	; 0x2c
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	220f      	movs	r2, #15
 8000be2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2203      	movs	r2, #3
 8000be8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2100      	movs	r1, #0
 8000c00:	0018      	movs	r0, r3
 8000c02:	f002 fd8f 	bl	8003724 <HAL_RCC_ClockConfig>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c0a:	f000 f9a9 	bl	8000f60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	220a      	movs	r2, #10
 8000c12:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	0018      	movs	r0, r3
 8000c24:	f002 ffa2 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000c2c:	f000 f998 	bl	8000f60 <Error_Handler>
  }
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b01f      	add	sp, #124	; 0x7c
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	40007000 	.word	0x40007000
 8000c3c:	ffffe7ff 	.word	0xffffe7ff

08000c40 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c46:	003b      	movs	r3, r7
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f003 ff06 	bl	8004a60 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c54:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000c56:	4a2b      	ldr	r2, [pc, #172]	; (8000d04 <MX_ADC_Init+0xc4>)
 8000c58:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000c62:	22c0      	movs	r2, #192	; 0xc0
 8000c64:	0612      	lsls	r2, r2, #24
 8000c66:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c68:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000c82:	2220      	movs	r2, #32
 8000c84:	2100      	movs	r1, #0
 8000c86:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000c8a:	2221      	movs	r2, #33	; 0x21
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000c98:	22c2      	movs	r2, #194	; 0xc2
 8000c9a:	32ff      	adds	r2, #255	; 0xff
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000ca0:	222c      	movs	r2, #44	; 0x2c
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 fb44 	bl	8001354 <HAL_ADC_Init>
 8000ccc:	1e03      	subs	r3, r0, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000cd0:	f000 f946 	bl	8000f60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cd4:	003b      	movs	r3, r7
 8000cd6:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <MX_ADC_Init+0xc8>)
 8000cd8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000cda:	003b      	movs	r3, r7
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	0152      	lsls	r2, r2, #5
 8000ce0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ce2:	003a      	movs	r2, r7
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_ADC_Init+0xc0>)
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f000 fda3 	bl	8001834 <HAL_ADC_ConfigChannel>
 8000cee:	1e03      	subs	r3, r0, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000cf2:	f000 f935 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	20000080 	.word	0x20000080
 8000d04:	40012400 	.word	0x40012400
 8000d08:	04000002 	.word	0x04000002

08000d0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_I2C1_Init+0x74>)
 8000d12:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <MX_I2C1_Init+0x78>)
 8000d14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_I2C1_Init+0x74>)
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <MX_I2C1_Init+0x7c>)
 8000d1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_I2C1_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_I2C1_Init+0x74>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_I2C1_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_I2C1_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_I2C1_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_I2C1_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_I2C1_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_I2C1_Init+0x74>)
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f001 f93b 	bl	8001fc4 <HAL_I2C_Init>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d001      	beq.n	8000d56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d52:	f000 f905 	bl	8000f60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <MX_I2C1_Init+0x74>)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f002 f83e 	bl	8002ddc <HAL_I2CEx_ConfigAnalogFilter>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d001      	beq.n	8000d68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d64:	f000 f8fc 	bl	8000f60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <MX_I2C1_Init+0x74>)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f002 f881 	bl	8002e74 <HAL_I2CEx_ConfigDigitalFilter>
 8000d72:	1e03      	subs	r3, r0, #0
 8000d74:	d001      	beq.n	8000d7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d76:	f000 f8f3 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200000dc 	.word	0x200000dc
 8000d84:	40005400 	.word	0x40005400
 8000d88:	00303d5b 	.word	0x00303d5b

08000d8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000d92:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <MX_USART2_UART_Init+0x5c>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000d98:	22e1      	movs	r2, #225	; 0xe1
 8000d9a:	0252      	lsls	r2, r2, #9
 8000d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f003 f869 	bl	8003ea8 <HAL_UART_Init>
 8000dd6:	1e03      	subs	r3, r0, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dda:	f000 f8c1 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000130 	.word	0x20000130
 8000de8:	40004400 	.word	0x40004400

08000dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b08b      	sub	sp, #44	; 0x2c
 8000df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	2414      	movs	r4, #20
 8000df4:	193b      	adds	r3, r7, r4
 8000df6:	0018      	movs	r0, r3
 8000df8:	2314      	movs	r3, #20
 8000dfa:	001a      	movs	r2, r3
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	f003 fe2f 	bl	8004a60 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e02:	4b54      	ldr	r3, [pc, #336]	; (8000f54 <MX_GPIO_Init+0x168>)
 8000e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e06:	4b53      	ldr	r3, [pc, #332]	; (8000f54 <MX_GPIO_Init+0x168>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e0e:	4b51      	ldr	r3, [pc, #324]	; (8000f54 <MX_GPIO_Init+0x168>)
 8000e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b4e      	ldr	r3, [pc, #312]	; (8000f54 <MX_GPIO_Init+0x168>)
 8000e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e1e:	4b4d      	ldr	r3, [pc, #308]	; (8000f54 <MX_GPIO_Init+0x168>)
 8000e20:	2104      	movs	r1, #4
 8000e22:	430a      	orrs	r2, r1
 8000e24:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e26:	4b4b      	ldr	r3, [pc, #300]	; (8000f54 <MX_GPIO_Init+0x168>)
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b48      	ldr	r3, [pc, #288]	; (8000f54 <MX_GPIO_Init+0x168>)
 8000e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e36:	4b47      	ldr	r3, [pc, #284]	; (8000f54 <MX_GPIO_Init+0x168>)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e3e:	4b45      	ldr	r3, [pc, #276]	; (8000f54 <MX_GPIO_Init+0x168>)
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	2201      	movs	r2, #1
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b42      	ldr	r3, [pc, #264]	; (8000f54 <MX_GPIO_Init+0x168>)
 8000e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e4e:	4b41      	ldr	r3, [pc, #260]	; (8000f54 <MX_GPIO_Init+0x168>)
 8000e50:	2102      	movs	r1, #2
 8000e52:	430a      	orrs	r2, r1
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e56:	4b3f      	ldr	r3, [pc, #252]	; (8000f54 <MX_GPIO_Init+0x168>)
 8000e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e62:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <MX_GPIO_Init+0x16c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	2101      	movs	r1, #1
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 f867 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e6e:	23a0      	movs	r3, #160	; 0xa0
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	2200      	movs	r2, #0
 8000e74:	2120      	movs	r1, #32
 8000e76:	0018      	movs	r0, r3
 8000e78:	f001 f860 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e7c:	4b37      	ldr	r3, [pc, #220]	; (8000f5c <MX_GPIO_Init+0x170>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2120      	movs	r1, #32
 8000e82:	0018      	movs	r0, r3
 8000e84:	f001 f85a 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2201      	movs	r2, #1
 8000e92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	4a2d      	ldr	r2, [pc, #180]	; (8000f58 <MX_GPIO_Init+0x16c>)
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	0010      	movs	r0, r2
 8000ea8:	f000 feca 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000eac:	0021      	movs	r1, r4
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2288      	movs	r2, #136	; 0x88
 8000eb8:	0352      	lsls	r2, r2, #13
 8000eba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	4a24      	ldr	r2, [pc, #144]	; (8000f58 <MX_GPIO_Init+0x16c>)
 8000ec8:	0019      	movs	r1, r3
 8000eca:	0010      	movs	r0, r2
 8000ecc:	f000 feb8 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	2210      	movs	r2, #16
 8000ed4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	2201      	movs	r2, #1
 8000ee0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	193a      	adds	r2, r7, r4
 8000ee4:	23a0      	movs	r3, #160	; 0xa0
 8000ee6:	05db      	lsls	r3, r3, #23
 8000ee8:	0011      	movs	r1, r2
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 fea8 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	2201      	movs	r2, #1
 8000efa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	193a      	adds	r2, r7, r4
 8000f0a:	23a0      	movs	r3, #160	; 0xa0
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 fe95 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f16:	0021      	movs	r1, r4
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2201      	movs	r2, #1
 8000f22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2201      	movs	r2, #1
 8000f28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <MX_GPIO_Init+0x170>)
 8000f34:	0019      	movs	r1, r3
 8000f36:	0010      	movs	r0, r2
 8000f38:	f000 fe82 	bl	8001c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2005      	movs	r0, #5
 8000f42:	f000 fe4b 	bl	8001bdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000f46:	2005      	movs	r0, #5
 8000f48:	f000 fe5d 	bl	8001c06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b00b      	add	sp, #44	; 0x2c
 8000f52:	bd90      	pop	{r4, r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	50000800 	.word	0x50000800
 8000f5c:	50000400 	.word	0x50000400

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <HAL_MspInit+0x24>)
 8000f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x24>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <HAL_MspInit+0x24>)
 8000f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_MspInit+0x24>)
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	0549      	lsls	r1, r1, #21
 8000f86:	430a      	orrs	r2, r1
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	240c      	movs	r4, #12
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	2314      	movs	r3, #20
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f003 fd5a 	bl	8004a60 <memset>
  if(hadc->Instance==ADC1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <HAL_ADC_MspInit+0x70>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d122      	bne.n	8000ffc <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <HAL_ADC_MspInit+0x74>)
 8000fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_ADC_MspInit+0x74>)
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	0089      	lsls	r1, r1, #2
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <HAL_ADC_MspInit+0x74>)
 8000fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_ADC_MspInit+0x74>)
 8000fca:	2101      	movs	r1, #1
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_ADC_MspInit+0x74>)
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fdc:	193b      	adds	r3, r7, r4
 8000fde:	2202      	movs	r2, #2
 8000fe0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	193b      	adds	r3, r7, r4
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	193a      	adds	r2, r7, r4
 8000ff0:	23a0      	movs	r3, #160	; 0xa0
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 fe22 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b009      	add	sp, #36	; 0x24
 8001002:	bd90      	pop	{r4, r7, pc}
 8001004:	40012400 	.word	0x40012400
 8001008:	40021000 	.word	0x40021000

0800100c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	240c      	movs	r4, #12
 8001016:	193b      	adds	r3, r7, r4
 8001018:	0018      	movs	r0, r3
 800101a:	2314      	movs	r3, #20
 800101c:	001a      	movs	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f003 fd1e 	bl	8004a60 <memset>
  if(hi2c->Instance==I2C1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a18      	ldr	r2, [pc, #96]	; (800108c <HAL_I2C_MspInit+0x80>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d129      	bne.n	8001082 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_I2C_MspInit+0x84>)
 8001030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_I2C_MspInit+0x84>)
 8001034:	2102      	movs	r1, #2
 8001036:	430a      	orrs	r2, r1
 8001038:	62da      	str	r2, [r3, #44]	; 0x2c
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_I2C_MspInit+0x84>)
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	2202      	movs	r2, #2
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001046:	193b      	adds	r3, r7, r4
 8001048:	22c0      	movs	r2, #192	; 0xc0
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104e:	0021      	movs	r1, r4
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2212      	movs	r2, #18
 8001054:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2203      	movs	r2, #3
 8001060:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2204      	movs	r2, #4
 8001066:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	187b      	adds	r3, r7, r1
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_I2C_MspInit+0x88>)
 800106c:	0019      	movs	r1, r3
 800106e:	0010      	movs	r0, r2
 8001070:	f000 fde6 	bl	8001c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_I2C_MspInit+0x84>)
 8001076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_I2C_MspInit+0x84>)
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	0389      	lsls	r1, r1, #14
 800107e:	430a      	orrs	r2, r1
 8001080:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b009      	add	sp, #36	; 0x24
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	40005400 	.word	0x40005400
 8001090:	40021000 	.word	0x40021000
 8001094:	50000400 	.word	0x50000400

08001098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	240c      	movs	r4, #12
 80010a2:	193b      	adds	r3, r7, r4
 80010a4:	0018      	movs	r0, r3
 80010a6:	2314      	movs	r3, #20
 80010a8:	001a      	movs	r2, r3
 80010aa:	2100      	movs	r1, #0
 80010ac:	f003 fcd8 	bl	8004a60 <memset>
  if(huart->Instance==USART2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a18      	ldr	r2, [pc, #96]	; (8001118 <HAL_UART_MspInit+0x80>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d129      	bne.n	800110e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_UART_MspInit+0x84>)
 80010bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_UART_MspInit+0x84>)
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	0289      	lsls	r1, r1, #10
 80010c4:	430a      	orrs	r2, r1
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_UART_MspInit+0x84>)
 80010ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_UART_MspInit+0x84>)
 80010ce:	2101      	movs	r1, #1
 80010d0:	430a      	orrs	r2, r1
 80010d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_UART_MspInit+0x84>)
 80010d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d8:	2201      	movs	r2, #1
 80010da:	4013      	ands	r3, r2
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010e0:	0021      	movs	r1, r4
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	220c      	movs	r2, #12
 80010e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2202      	movs	r2, #2
 80010ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2203      	movs	r2, #3
 80010f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2204      	movs	r2, #4
 80010fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	187a      	adds	r2, r7, r1
 8001102:	23a0      	movs	r3, #160	; 0xa0
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f000 fd99 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b009      	add	sp, #36	; 0x24
 8001114:	bd90      	pop	{r4, r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	40004400 	.word	0x40004400
 800111c:	40021000 	.word	0x40021000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f8c6 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001152:	2002      	movs	r0, #2
 8001154:	f000 ff10 	bl	8001f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	18d3      	adds	r3, r2, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f003 fc6e 	bl	8004a70 <__errno>
 8001194:	0003      	movs	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	2301      	movs	r3, #1
 800119c:	425b      	negs	r3, r3
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	18d2      	adds	r2, r2, r3
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <_sbrk+0x64>)
 80011b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	0018      	movs	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b006      	add	sp, #24
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20005000 	.word	0x20005000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	200001d4 	.word	0x200001d4
 80011c8:	20000328 	.word	0x20000328

080011cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80011da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011dc:	f7ff fff6 	bl	80011cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e0:	480c      	ldr	r0, [pc, #48]	; (8001214 <LoopForever+0x6>)
  ldr r1, =_edata
 80011e2:	490d      	ldr	r1, [pc, #52]	; (8001218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <LoopForever+0xe>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f8:	4c0a      	ldr	r4, [pc, #40]	; (8001224 <LoopForever+0x16>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001206:	f003 fc39 	bl	8004a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120a:	f7ff fc93 	bl	8000b34 <main>

0800120e <LoopForever>:

LoopForever:
    b LoopForever
 800120e:	e7fe      	b.n	800120e <LoopForever>
   ldr   r0, =_estack
 8001210:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001218:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800121c:	0800545c 	.word	0x0800545c
  ldr r2, =_sbss
 8001220:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001224:	20000324 	.word	0x20000324

08001228 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC1_COMP_IRQHandler>
	...

0800122c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_Init+0x3c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_Init+0x3c>)
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	430a      	orrs	r2, r1
 8001242:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f811 	bl	800126c <HAL_InitTick>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d003      	beq.n	8001256 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	e001      	b.n	800125a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001256:	f7ff fe89 	bl	8000f6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	781b      	ldrb	r3, [r3, #0]
}
 800125e:	0018      	movs	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	b002      	add	sp, #8
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	40022000 	.word	0x40022000

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_InitTick+0x5c>)
 8001276:	681c      	ldr	r4, [r3, #0]
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_InitTick+0x60>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	0019      	movs	r1, r3
 800127e:	23fa      	movs	r3, #250	; 0xfa
 8001280:	0098      	lsls	r0, r3, #2
 8001282:	f7fe ff53 	bl	800012c <__udivsi3>
 8001286:	0003      	movs	r3, r0
 8001288:	0019      	movs	r1, r3
 800128a:	0020      	movs	r0, r4
 800128c:	f7fe ff4e 	bl	800012c <__udivsi3>
 8001290:	0003      	movs	r3, r0
 8001292:	0018      	movs	r0, r3
 8001294:	f000 fcc7 	bl	8001c26 <HAL_SYSTICK_Config>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d001      	beq.n	80012a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e00f      	b.n	80012c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d80b      	bhi.n	80012be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	2301      	movs	r3, #1
 80012aa:	425b      	negs	r3, r3
 80012ac:	2200      	movs	r2, #0
 80012ae:	0018      	movs	r0, r3
 80012b0:	f000 fc94 	bl	8001bdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_InitTick+0x64>)
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e000      	b.n	80012c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b003      	add	sp, #12
 80012c6:	bd90      	pop	{r4, r7, pc}
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000010 	.word	0x20000010
 80012d0:	2000000c 	.word	0x2000000c

080012d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_IncTick+0x1c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	001a      	movs	r2, r3
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_IncTick+0x20>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	18d2      	adds	r2, r2, r3
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <HAL_IncTick+0x20>)
 80012e6:	601a      	str	r2, [r3, #0]
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	20000010 	.word	0x20000010
 80012f4:	200001d8 	.word	0x200001d8

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b02      	ldr	r3, [pc, #8]	; (8001308 <HAL_GetTick+0x10>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	200001d8 	.word	0x200001d8

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff fff0 	bl	80012f8 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3301      	adds	r3, #1
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	001a      	movs	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	189b      	adds	r3, r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	f7ff ffe0 	bl	80012f8 <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b004      	add	sp, #16
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	20000010 	.word	0x20000010

08001354 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e159      	b.n	800161a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10a      	bne.n	8001384 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2250      	movs	r2, #80	; 0x50
 8001378:	2100      	movs	r1, #0
 800137a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0018      	movs	r0, r3
 8001380:	f7ff fe08 	bl	8000f94 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001388:	2210      	movs	r2, #16
 800138a:	4013      	ands	r3, r2
 800138c:	2b10      	cmp	r3, #16
 800138e:	d005      	beq.n	800139c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2204      	movs	r2, #4
 8001398:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800139a:	d00b      	beq.n	80013b4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a0:	2210      	movs	r2, #16
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2250      	movs	r2, #80	; 0x50
 80013ac:	2100      	movs	r1, #0
 80013ae:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e132      	b.n	800161a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b8:	4a9a      	ldr	r2, [pc, #616]	; (8001624 <HAL_ADC_Init+0x2d0>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	2202      	movs	r2, #2
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2203      	movs	r2, #3
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d108      	bne.n	80013e4 <HAL_ADC_Init+0x90>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2201      	movs	r2, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_ADC_Init+0x90>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <HAL_ADC_Init+0x92>
 80013e4:	2300      	movs	r3, #0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d149      	bne.n	800147e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	23c0      	movs	r3, #192	; 0xc0
 80013f0:	061b      	lsls	r3, r3, #24
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d00b      	beq.n	800140e <HAL_ADC_Init+0xba>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	05db      	lsls	r3, r3, #23
 80013fe:	429a      	cmp	r2, r3
 8001400:	d005      	beq.n	800140e <HAL_ADC_Init+0xba>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	061b      	lsls	r3, r3, #24
 800140a:	429a      	cmp	r2, r3
 800140c:	d111      	bne.n	8001432 <HAL_ADC_Init+0xde>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0092      	lsls	r2, r2, #2
 800141a:	0892      	lsrs	r2, r2, #2
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6919      	ldr	r1, [r3, #16]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	611a      	str	r2, [r3, #16]
 8001430:	e014      	b.n	800145c <HAL_ADC_Init+0x108>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0092      	lsls	r2, r2, #2
 800143e:	0892      	lsrs	r2, r2, #2
 8001440:	611a      	str	r2, [r3, #16]
 8001442:	4b79      	ldr	r3, [pc, #484]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b78      	ldr	r3, [pc, #480]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001448:	4978      	ldr	r1, [pc, #480]	; (800162c <HAL_ADC_Init+0x2d8>)
 800144a:	400a      	ands	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	4b76      	ldr	r3, [pc, #472]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	4b74      	ldr	r3, [pc, #464]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2118      	movs	r1, #24
 8001468:	438a      	bics	r2, r1
 800146a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68d9      	ldr	r1, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800147e:	4b6a      	ldr	r3, [pc, #424]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b69      	ldr	r3, [pc, #420]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001484:	496a      	ldr	r1, [pc, #424]	; (8001630 <HAL_ADC_Init+0x2dc>)
 8001486:	400a      	ands	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800148a:	4b67      	ldr	r3, [pc, #412]	; (8001628 <HAL_ADC_Init+0x2d4>)
 800148c:	6819      	ldr	r1, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001492:	065a      	lsls	r2, r3, #25
 8001494:	4b64      	ldr	r3, [pc, #400]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	055b      	lsls	r3, r3, #21
 80014a4:	4013      	ands	r3, r2
 80014a6:	d108      	bne.n	80014ba <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	0549      	lsls	r1, r1, #21
 80014b6:	430a      	orrs	r2, r1
 80014b8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	495b      	ldr	r1, [pc, #364]	; (8001634 <HAL_ADC_Init+0x2e0>)
 80014c6:	400a      	ands	r2, r1
 80014c8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68d9      	ldr	r1, [r3, #12]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d101      	bne.n	80014e0 <HAL_ADC_Init+0x18c>
 80014dc:	2304      	movs	r3, #4
 80014de:	e000      	b.n	80014e2 <HAL_ADC_Init+0x18e>
 80014e0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80014e2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2020      	movs	r0, #32
 80014e8:	5c1b      	ldrb	r3, [r3, r0]
 80014ea:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80014ec:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	202c      	movs	r0, #44	; 0x2c
 80014f2:	5c1b      	ldrb	r3, [r3, r0]
 80014f4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014f6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014fc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001504:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800150c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151a:	23c2      	movs	r3, #194	; 0xc2
 800151c:	33ff      	adds	r3, #255	; 0xff
 800151e:	429a      	cmp	r2, r3
 8001520:	d00b      	beq.n	800153a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68d9      	ldr	r1, [r3, #12]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2221      	movs	r2, #33	; 0x21
 800153e:	5c9b      	ldrb	r3, [r3, r2]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d11a      	bne.n	800157a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2220      	movs	r2, #32
 8001548:	5c9b      	ldrb	r3, [r3, r2]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	0249      	lsls	r1, r1, #9
 800155c:	430a      	orrs	r2, r1
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	e00b      	b.n	800157a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001566:	2220      	movs	r2, #32
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	2201      	movs	r2, #1
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157e:	2b01      	cmp	r3, #1
 8001580:	d11f      	bne.n	80015c2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	492a      	ldr	r1, [pc, #168]	; (8001638 <HAL_ADC_Init+0x2e4>)
 800158e:	400a      	ands	r2, r1
 8001590:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6919      	ldr	r1, [r3, #16]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80015a0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80015a6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	430a      	orrs	r2, r1
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	e00e      	b.n	80015e0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	2201      	movs	r2, #1
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d107      	bne.n	80015e0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691a      	ldr	r2, [r3, #16]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2101      	movs	r1, #1
 80015dc:	438a      	bics	r2, r1
 80015de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2107      	movs	r1, #7
 80015ec:	438a      	bics	r2, r1
 80015ee:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6959      	ldr	r1, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160c:	2203      	movs	r2, #3
 800160e:	4393      	bics	r3, r2
 8001610:	2201      	movs	r2, #1
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	fffffefd 	.word	0xfffffefd
 8001628:	40012708 	.word	0x40012708
 800162c:	ffc3ffff 	.word	0xffc3ffff
 8001630:	fdffffff 	.word	0xfdffffff
 8001634:	fffe0219 	.word	0xfffe0219
 8001638:	fffffc03 	.word	0xfffffc03

0800163c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001644:	230f      	movs	r3, #15
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2204      	movs	r2, #4
 8001654:	4013      	ands	r3, r2
 8001656:	d138      	bne.n	80016ca <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2250      	movs	r2, #80	; 0x50
 800165c:	5c9b      	ldrb	r3, [r3, r2]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_ADC_Start+0x2a>
 8001662:	2302      	movs	r3, #2
 8001664:	e038      	b.n	80016d8 <HAL_ADC_Start+0x9c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2250      	movs	r2, #80	; 0x50
 800166a:	2101      	movs	r1, #1
 800166c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d007      	beq.n	8001686 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001676:	230f      	movs	r3, #15
 8001678:	18fc      	adds	r4, r7, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	0018      	movs	r0, r3
 800167e:	f000 f979 	bl	8001974 <ADC_Enable>
 8001682:	0003      	movs	r3, r0
 8001684:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001686:	230f      	movs	r3, #15
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d120      	bne.n	80016d2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <HAL_ADC_Start+0xa4>)
 8001696:	4013      	ands	r3, r2
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	0052      	lsls	r2, r2, #1
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2250      	movs	r2, #80	; 0x50
 80016ac:	2100      	movs	r1, #0
 80016ae:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	221c      	movs	r2, #28
 80016b6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2104      	movs	r1, #4
 80016c4:	430a      	orrs	r2, r1
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	e003      	b.n	80016d2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016ca:	230f      	movs	r3, #15
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	2202      	movs	r2, #2
 80016d0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80016d2:	230f      	movs	r3, #15
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	781b      	ldrb	r3, [r3, #0]
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b005      	add	sp, #20
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	fffff0fe 	.word	0xfffff0fe

080016e4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d102      	bne.n	8001704 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80016fe:	2308      	movs	r3, #8
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e014      	b.n	800172e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2201      	movs	r2, #1
 800170c:	4013      	ands	r3, r2
 800170e:	2b01      	cmp	r3, #1
 8001710:	d10b      	bne.n	800172a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001716:	2220      	movs	r2, #32
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2250      	movs	r2, #80	; 0x50
 8001722:	2100      	movs	r1, #0
 8001724:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e072      	b.n	8001810 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800172a:	230c      	movs	r3, #12
 800172c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800172e:	f7ff fde3 	bl	80012f8 <HAL_GetTick>
 8001732:	0003      	movs	r3, r0
 8001734:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001736:	e01f      	b.n	8001778 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	3301      	adds	r3, #1
 800173c:	d01c      	beq.n	8001778 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <HAL_ADC_PollForConversion+0x70>
 8001744:	f7ff fdd8 	bl	80012f8 <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d211      	bcs.n	8001778 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4013      	ands	r3, r2
 800175e:	d10b      	bne.n	8001778 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001764:	2204      	movs	r2, #4
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2250      	movs	r2, #80	; 0x50
 8001770:	2100      	movs	r1, #0
 8001772:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e04b      	b.n	8001810 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4013      	ands	r3, r2
 8001782:	d0d9      	beq.n	8001738 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001788:	2280      	movs	r2, #128	; 0x80
 800178a:	0092      	lsls	r2, r2, #2
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	23c0      	movs	r3, #192	; 0xc0
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4013      	ands	r3, r2
 800179e:	d12e      	bne.n	80017fe <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2220      	movs	r2, #32
 80017a4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d129      	bne.n	80017fe <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2208      	movs	r2, #8
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d122      	bne.n	80017fe <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2204      	movs	r2, #4
 80017c0:	4013      	ands	r3, r2
 80017c2:	d110      	bne.n	80017e6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	210c      	movs	r1, #12
 80017d0:	438a      	bics	r2, r1
 80017d2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_ADC_PollForConversion+0x134>)
 80017da:	4013      	ands	r3, r2
 80017dc:	2201      	movs	r2, #1
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54
 80017e4:	e00b      	b.n	80017fe <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ea:	2220      	movs	r2, #32
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	2201      	movs	r2, #1
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d103      	bne.n	800180e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b004      	add	sp, #16
 8001816:	bd80      	pop	{r7, pc}
 8001818:	fffffefe 	.word	0xfffffefe

0800181c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2250      	movs	r2, #80	; 0x50
 8001842:	5c9b      	ldrb	r3, [r3, r2]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_ADC_ConfigChannel+0x18>
 8001848:	2302      	movs	r3, #2
 800184a:	e085      	b.n	8001958 <HAL_ADC_ConfigChannel+0x124>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2250      	movs	r2, #80	; 0x50
 8001850:	2101      	movs	r1, #1
 8001852:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2204      	movs	r2, #4
 800185c:	4013      	ands	r3, r2
 800185e:	d00b      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001864:	2220      	movs	r2, #32
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2250      	movs	r2, #80	; 0x50
 8001870:	2100      	movs	r1, #0
 8001872:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e06f      	b.n	8001958 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a38      	ldr	r2, [pc, #224]	; (8001960 <HAL_ADC_ConfigChannel+0x12c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d035      	beq.n	80018ee <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	035b      	lsls	r3, r3, #13
 800188e:	0b5a      	lsrs	r2, r3, #13
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	02db      	lsls	r3, r3, #11
 80018a0:	4013      	ands	r3, r2
 80018a2:	d009      	beq.n	80018b8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	0409      	lsls	r1, r1, #16
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80018b2:	200a      	movs	r0, #10
 80018b4:	f000 f8c6 	bl	8001a44 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	029b      	lsls	r3, r3, #10
 80018c0:	4013      	ands	r3, r2
 80018c2:	d006      	beq.n	80018d2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	03c9      	lsls	r1, r1, #15
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	025b      	lsls	r3, r3, #9
 80018da:	4013      	ands	r3, r2
 80018dc:	d037      	beq.n	800194e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80018de:	4b21      	ldr	r3, [pc, #132]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	0449      	lsls	r1, r1, #17
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e02f      	b.n	800194e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	035b      	lsls	r3, r3, #13
 80018fa:	0b5b      	lsrs	r3, r3, #13
 80018fc:	43d9      	mvns	r1, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	400a      	ands	r2, r1
 8001904:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	02db      	lsls	r3, r3, #11
 800190e:	4013      	ands	r3, r2
 8001910:	d005      	beq.n	800191e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 8001918:	4913      	ldr	r1, [pc, #76]	; (8001968 <HAL_ADC_ConfigChannel+0x134>)
 800191a:	400a      	ands	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	029b      	lsls	r3, r3, #10
 8001926:	4013      	ands	r3, r2
 8001928:	d005      	beq.n	8001936 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 8001930:	490e      	ldr	r1, [pc, #56]	; (800196c <HAL_ADC_ConfigChannel+0x138>)
 8001932:	400a      	ands	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	025b      	lsls	r3, r3, #9
 800193e:	4013      	ands	r3, r2
 8001940:	d005      	beq.n	800194e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 8001948:	4909      	ldr	r1, [pc, #36]	; (8001970 <HAL_ADC_ConfigChannel+0x13c>)
 800194a:	400a      	ands	r2, r1
 800194c:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2250      	movs	r2, #80	; 0x50
 8001952:	2100      	movs	r1, #0
 8001954:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	b002      	add	sp, #8
 800195e:	bd80      	pop	{r7, pc}
 8001960:	00001001 	.word	0x00001001
 8001964:	40012708 	.word	0x40012708
 8001968:	ff7fffff 	.word	0xff7fffff
 800196c:	ffbfffff 	.word	0xffbfffff
 8001970:	feffffff 	.word	0xfeffffff

08001974 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2203      	movs	r2, #3
 8001988:	4013      	ands	r3, r2
 800198a:	2b01      	cmp	r3, #1
 800198c:	d108      	bne.n	80019a0 <ADC_Enable+0x2c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <ADC_Enable+0x2c>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <ADC_Enable+0x2e>
 80019a0:	2300      	movs	r3, #0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d146      	bne.n	8001a34 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <ADC_Enable+0xcc>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	d00d      	beq.n	80019ce <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b6:	2210      	movs	r2, #16
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	2201      	movs	r2, #1
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e033      	b.n	8001a36 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2101      	movs	r1, #1
 80019da:	430a      	orrs	r2, r1
 80019dc:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80019de:	2001      	movs	r0, #1
 80019e0:	f000 f830 	bl	8001a44 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80019e4:	f7ff fc88 	bl	80012f8 <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019ec:	e01b      	b.n	8001a26 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019ee:	f7ff fc83 	bl	80012f8 <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b0a      	cmp	r3, #10
 80019fa:	d914      	bls.n	8001a26 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d00d      	beq.n	8001a26 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	2210      	movs	r2, #16
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e007      	b.n	8001a36 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d1dc      	bne.n	80019ee <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b004      	add	sp, #16
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	80000017 	.word	0x80000017

08001a44 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <ADC_DelayMicroSecond+0x38>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	490b      	ldr	r1, [pc, #44]	; (8001a80 <ADC_DelayMicroSecond+0x3c>)
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7fe fb6a 	bl	800012c <__udivsi3>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4353      	muls	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001a62:	e002      	b.n	8001a6a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f9      	bne.n	8001a64 <ADC_DelayMicroSecond+0x20>
  }
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b004      	add	sp, #16
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	000f4240 	.word	0x000f4240

08001a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	1dfb      	adds	r3, r7, #7
 8001a8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	1dfb      	adds	r3, r7, #7
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b7f      	cmp	r3, #127	; 0x7f
 8001a96:	d809      	bhi.n	8001aac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a98:	1dfb      	adds	r3, r7, #7
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	231f      	movs	r3, #31
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <__NVIC_EnableIRQ+0x30>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4091      	lsls	r1, r2
 8001aa8:	000a      	movs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
  }
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	e000e100 	.word	0xe000e100

08001ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	0002      	movs	r2, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	1dfb      	adds	r3, r7, #7
 8001ac4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	1dfb      	adds	r3, r7, #7
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b7f      	cmp	r3, #127	; 0x7f
 8001acc:	d828      	bhi.n	8001b20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ace:	4a2f      	ldr	r2, [pc, #188]	; (8001b8c <__NVIC_SetPriority+0xd4>)
 8001ad0:	1dfb      	adds	r3, r7, #7
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	33c0      	adds	r3, #192	; 0xc0
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	589b      	ldr	r3, [r3, r2]
 8001ade:	1dfa      	adds	r2, r7, #7
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	0011      	movs	r1, r2
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	00d2      	lsls	r2, r2, #3
 8001aea:	21ff      	movs	r1, #255	; 0xff
 8001aec:	4091      	lsls	r1, r2
 8001aee:	000a      	movs	r2, r1
 8001af0:	43d2      	mvns	r2, r2
 8001af2:	401a      	ands	r2, r3
 8001af4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	019b      	lsls	r3, r3, #6
 8001afa:	22ff      	movs	r2, #255	; 0xff
 8001afc:	401a      	ands	r2, r3
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	0018      	movs	r0, r3
 8001b04:	2303      	movs	r3, #3
 8001b06:	4003      	ands	r3, r0
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b0c:	481f      	ldr	r0, [pc, #124]	; (8001b8c <__NVIC_SetPriority+0xd4>)
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	430a      	orrs	r2, r1
 8001b18:	33c0      	adds	r3, #192	; 0xc0
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b1e:	e031      	b.n	8001b84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b20:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <__NVIC_SetPriority+0xd8>)
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	0019      	movs	r1, r3
 8001b28:	230f      	movs	r3, #15
 8001b2a:	400b      	ands	r3, r1
 8001b2c:	3b08      	subs	r3, #8
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3306      	adds	r3, #6
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	18d3      	adds	r3, r2, r3
 8001b36:	3304      	adds	r3, #4
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	1dfa      	adds	r2, r7, #7
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	0011      	movs	r1, r2
 8001b40:	2203      	movs	r2, #3
 8001b42:	400a      	ands	r2, r1
 8001b44:	00d2      	lsls	r2, r2, #3
 8001b46:	21ff      	movs	r1, #255	; 0xff
 8001b48:	4091      	lsls	r1, r2
 8001b4a:	000a      	movs	r2, r1
 8001b4c:	43d2      	mvns	r2, r2
 8001b4e:	401a      	ands	r2, r3
 8001b50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	019b      	lsls	r3, r3, #6
 8001b56:	22ff      	movs	r2, #255	; 0xff
 8001b58:	401a      	ands	r2, r3
 8001b5a:	1dfb      	adds	r3, r7, #7
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	2303      	movs	r3, #3
 8001b62:	4003      	ands	r3, r0
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b68:	4809      	ldr	r0, [pc, #36]	; (8001b90 <__NVIC_SetPriority+0xd8>)
 8001b6a:	1dfb      	adds	r3, r7, #7
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	001c      	movs	r4, r3
 8001b70:	230f      	movs	r3, #15
 8001b72:	4023      	ands	r3, r4
 8001b74:	3b08      	subs	r3, #8
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	3306      	adds	r3, #6
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	18c3      	adds	r3, r0, r3
 8001b80:	3304      	adds	r3, #4
 8001b82:	601a      	str	r2, [r3, #0]
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b003      	add	sp, #12
 8001b8a:	bd90      	pop	{r4, r7, pc}
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	1e5a      	subs	r2, r3, #1
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	045b      	lsls	r3, r3, #17
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d301      	bcc.n	8001bac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e010      	b.n	8001bce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <SysTick_Config+0x44>)
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	3a01      	subs	r2, #1
 8001bb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	425b      	negs	r3, r3
 8001bb8:	2103      	movs	r1, #3
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f7ff ff7c 	bl	8001ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <SysTick_Config+0x44>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <SysTick_Config+0x44>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b002      	add	sp, #8
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	210f      	movs	r1, #15
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	1c02      	adds	r2, r0, #0
 8001bec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff ff5d 	bl	8001ab8 <__NVIC_SetPriority>
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b004      	add	sp, #16
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7ff ff33 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b002      	add	sp, #8
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7ff ffaf 	bl	8001b94 <SysTick_Config>
 8001c36:	0003      	movs	r3, r0
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b002      	add	sp, #8
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c56:	e155      	b.n	8001f04 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4091      	lsls	r1, r2
 8001c62:	000a      	movs	r2, r1
 8001c64:	4013      	ands	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d100      	bne.n	8001c70 <HAL_GPIO_Init+0x30>
 8001c6e:	e146      	b.n	8001efe <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2203      	movs	r2, #3
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d005      	beq.n	8001c88 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2203      	movs	r2, #3
 8001c82:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d130      	bne.n	8001cea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	409a      	lsls	r2, r3
 8001c96:	0013      	movs	r3, r2
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	0013      	movs	r3, r2
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	0013      	movs	r3, r2
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d017      	beq.n	8001d26 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	409a      	lsls	r2, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	43da      	mvns	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	409a      	lsls	r2, r3
 8001d18:	0013      	movs	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d123      	bne.n	8001d7a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	08da      	lsrs	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3208      	adds	r2, #8
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	58d3      	ldr	r3, [r2, r3]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2207      	movs	r2, #7
 8001d44:	4013      	ands	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	220f      	movs	r2, #15
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2107      	movs	r1, #7
 8001d5e:	400b      	ands	r3, r1
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	409a      	lsls	r2, r3
 8001d64:	0013      	movs	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	08da      	lsrs	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3208      	adds	r2, #8
 8001d74:	0092      	lsls	r2, r2, #2
 8001d76:	6939      	ldr	r1, [r7, #16]
 8001d78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2203      	movs	r2, #3
 8001d86:	409a      	lsls	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2203      	movs	r2, #3
 8001d98:	401a      	ands	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	0013      	movs	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	23c0      	movs	r3, #192	; 0xc0
 8001db4:	029b      	lsls	r3, r3, #10
 8001db6:	4013      	ands	r3, r2
 8001db8:	d100      	bne.n	8001dbc <HAL_GPIO_Init+0x17c>
 8001dba:	e0a0      	b.n	8001efe <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbc:	4b57      	ldr	r3, [pc, #348]	; (8001f1c <HAL_GPIO_Init+0x2dc>)
 8001dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc0:	4b56      	ldr	r3, [pc, #344]	; (8001f1c <HAL_GPIO_Init+0x2dc>)
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc8:	4a55      	ldr	r2, [pc, #340]	; (8001f20 <HAL_GPIO_Init+0x2e0>)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	589b      	ldr	r3, [r3, r2]
 8001dd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	4013      	ands	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	409a      	lsls	r2, r3
 8001de2:	0013      	movs	r3, r2
 8001de4:	43da      	mvns	r2, r3
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	23a0      	movs	r3, #160	; 0xa0
 8001df0:	05db      	lsls	r3, r3, #23
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d01f      	beq.n	8001e36 <HAL_GPIO_Init+0x1f6>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4a      	ldr	r2, [pc, #296]	; (8001f24 <HAL_GPIO_Init+0x2e4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d019      	beq.n	8001e32 <HAL_GPIO_Init+0x1f2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a49      	ldr	r2, [pc, #292]	; (8001f28 <HAL_GPIO_Init+0x2e8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0x1ee>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a48      	ldr	r2, [pc, #288]	; (8001f2c <HAL_GPIO_Init+0x2ec>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_GPIO_Init+0x1ea>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a47      	ldr	r2, [pc, #284]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_GPIO_Init+0x1e6>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a46      	ldr	r2, [pc, #280]	; (8001f34 <HAL_GPIO_Init+0x2f4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_GPIO_Init+0x1e2>
 8001e1e:	2305      	movs	r3, #5
 8001e20:	e00a      	b.n	8001e38 <HAL_GPIO_Init+0x1f8>
 8001e22:	2306      	movs	r3, #6
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x1f8>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x1f8>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x1f8>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x1f8>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x1f8>
 8001e36:	2300      	movs	r3, #0
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e48:	4935      	ldr	r1, [pc, #212]	; (8001f20 <HAL_GPIO_Init+0x2e0>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <HAL_GPIO_Init+0x2f8>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	035b      	lsls	r3, r3, #13
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_GPIO_Init+0x2f8>)
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_GPIO_Init+0x2f8>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43da      	mvns	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	039b      	lsls	r3, r3, #14
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ea4:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_GPIO_Init+0x2f8>)
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <HAL_GPIO_Init+0x2f8>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	029b      	lsls	r3, r3, #10
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_GPIO_Init+0x2f8>)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_GPIO_Init+0x2f8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	43da      	mvns	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	025b      	lsls	r3, r3, #9
 8001eec:	4013      	ands	r3, r2
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <HAL_GPIO_Init+0x2f8>)
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	40da      	lsrs	r2, r3
 8001f0c:	1e13      	subs	r3, r2, #0
 8001f0e:	d000      	beq.n	8001f12 <HAL_GPIO_Init+0x2d2>
 8001f10:	e6a2      	b.n	8001c58 <HAL_GPIO_Init+0x18>
  }
}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b006      	add	sp, #24
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010000 	.word	0x40010000
 8001f24:	50000400 	.word	0x50000400
 8001f28:	50000800 	.word	0x50000800
 8001f2c:	50000c00 	.word	0x50000c00
 8001f30:	50001000 	.word	0x50001000
 8001f34:	50001c00 	.word	0x50001c00
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	0008      	movs	r0, r1
 8001f46:	0011      	movs	r1, r2
 8001f48:	1cbb      	adds	r3, r7, #2
 8001f4a:	1c02      	adds	r2, r0, #0
 8001f4c:	801a      	strh	r2, [r3, #0]
 8001f4e:	1c7b      	adds	r3, r7, #1
 8001f50:	1c0a      	adds	r2, r1, #0
 8001f52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f54:	1c7b      	adds	r3, r7, #1
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d004      	beq.n	8001f66 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5c:	1cbb      	adds	r3, r7, #2
 8001f5e:	881a      	ldrh	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001f64:	e003      	b.n	8001f6e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001f66:	1cbb      	adds	r3, r7, #2
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b002      	add	sp, #8
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	0002      	movs	r2, r0
 8001f80:	1dbb      	adds	r3, r7, #6
 8001f82:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	1dba      	adds	r2, r7, #6
 8001f8a:	8812      	ldrh	r2, [r2, #0]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d008      	beq.n	8001fa2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001f92:	1dba      	adds	r2, r7, #6
 8001f94:	8812      	ldrh	r2, [r2, #0]
 8001f96:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f98:	1dbb      	adds	r3, r7, #6
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 f807 	bl	8001fb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b002      	add	sp, #8
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	40010400 	.word	0x40010400

08001fb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	1dbb      	adds	r3, r7, #6
 8001fba:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b002      	add	sp, #8
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e082      	b.n	80020dc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2241      	movs	r2, #65	; 0x41
 8001fda:	5c9b      	ldrb	r3, [r3, r2]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d107      	bne.n	8001ff2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2240      	movs	r2, #64	; 0x40
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7ff f80d 	bl	800100c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2241      	movs	r2, #65	; 0x41
 8001ff6:	2124      	movs	r1, #36	; 0x24
 8001ff8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	438a      	bics	r2, r1
 8002008:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4934      	ldr	r1, [pc, #208]	; (80020e4 <HAL_I2C_Init+0x120>)
 8002014:	400a      	ands	r2, r1
 8002016:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4931      	ldr	r1, [pc, #196]	; (80020e8 <HAL_I2C_Init+0x124>)
 8002024:	400a      	ands	r2, r1
 8002026:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d108      	bne.n	8002042 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2180      	movs	r1, #128	; 0x80
 800203a:	0209      	lsls	r1, r1, #8
 800203c:	430a      	orrs	r2, r1
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	e007      	b.n	8002052 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2184      	movs	r1, #132	; 0x84
 800204c:	0209      	lsls	r1, r1, #8
 800204e:	430a      	orrs	r2, r1
 8002050:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d104      	bne.n	8002064 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	491f      	ldr	r1, [pc, #124]	; (80020ec <HAL_I2C_Init+0x128>)
 8002070:	430a      	orrs	r2, r1
 8002072:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	491a      	ldr	r1, [pc, #104]	; (80020e8 <HAL_I2C_Init+0x124>)
 8002080:	400a      	ands	r2, r1
 8002082:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	431a      	orrs	r2, r3
 800208e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69d9      	ldr	r1, [r3, #28]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2101      	movs	r1, #1
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2241      	movs	r2, #65	; 0x41
 80020c8:	2120      	movs	r1, #32
 80020ca:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2242      	movs	r2, #66	; 0x42
 80020d6:	2100      	movs	r1, #0
 80020d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	f0ffffff 	.word	0xf0ffffff
 80020e8:	ffff7fff 	.word	0xffff7fff
 80020ec:	02008000 	.word	0x02008000

080020f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	000c      	movs	r4, r1
 80020fa:	0010      	movs	r0, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	230a      	movs	r3, #10
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	1c22      	adds	r2, r4, #0
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	2308      	movs	r3, #8
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	1c02      	adds	r2, r0, #0
 800210c:	801a      	strh	r2, [r3, #0]
 800210e:	1dbb      	adds	r3, r7, #6
 8002110:	1c0a      	adds	r2, r1, #0
 8002112:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2241      	movs	r2, #65	; 0x41
 8002118:	5c9b      	ldrb	r3, [r3, r2]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b20      	cmp	r3, #32
 800211e:	d000      	beq.n	8002122 <HAL_I2C_Mem_Write+0x32>
 8002120:	e10c      	b.n	800233c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <HAL_I2C_Mem_Write+0x42>
 8002128:	232c      	movs	r3, #44	; 0x2c
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d105      	bne.n	800213e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	0092      	lsls	r2, r2, #2
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0ff      	b.n	800233e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2240      	movs	r2, #64	; 0x40
 8002142:	5c9b      	ldrb	r3, [r3, r2]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_I2C_Mem_Write+0x5c>
 8002148:	2302      	movs	r3, #2
 800214a:	e0f8      	b.n	800233e <HAL_I2C_Mem_Write+0x24e>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2240      	movs	r2, #64	; 0x40
 8002150:	2101      	movs	r1, #1
 8002152:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002154:	f7ff f8d0 	bl	80012f8 <HAL_GetTick>
 8002158:	0003      	movs	r3, r0
 800215a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	0219      	lsls	r1, r3, #8
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2319      	movs	r3, #25
 8002168:	2201      	movs	r2, #1
 800216a:	f000 fc25 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 800216e:	1e03      	subs	r3, r0, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0e3      	b.n	800233e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2241      	movs	r2, #65	; 0x41
 800217a:	2121      	movs	r1, #33	; 0x21
 800217c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2242      	movs	r2, #66	; 0x42
 8002182:	2140      	movs	r1, #64	; 0x40
 8002184:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	222c      	movs	r2, #44	; 0x2c
 8002196:	18ba      	adds	r2, r7, r2
 8002198:	8812      	ldrh	r2, [r2, #0]
 800219a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021a2:	1dbb      	adds	r3, r7, #6
 80021a4:	881c      	ldrh	r4, [r3, #0]
 80021a6:	2308      	movs	r3, #8
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	881a      	ldrh	r2, [r3, #0]
 80021ac:	230a      	movs	r3, #10
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	8819      	ldrh	r1, [r3, #0]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	0023      	movs	r3, r4
 80021be:	f000 fb13 	bl	80027e8 <I2C_RequestMemoryWrite>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2240      	movs	r2, #64	; 0x40
 80021ca:	2100      	movs	r1, #0
 80021cc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0b5      	b.n	800233e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2bff      	cmp	r3, #255	; 0xff
 80021da:	d911      	bls.n	8002200 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	22ff      	movs	r2, #255	; 0xff
 80021e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	045c      	lsls	r4, r3, #17
 80021ec:	230a      	movs	r3, #10
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	8819      	ldrh	r1, [r3, #0]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	2300      	movs	r3, #0
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	0023      	movs	r3, r4
 80021fa:	f000 fdb5 	bl	8002d68 <I2C_TransferConfig>
 80021fe:	e012      	b.n	8002226 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	b2da      	uxtb	r2, r3
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	049c      	lsls	r4, r3, #18
 8002214:	230a      	movs	r3, #10
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	8819      	ldrh	r1, [r3, #0]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	2300      	movs	r3, #0
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	0023      	movs	r3, r4
 8002222:	f000 fda1 	bl	8002d68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	0018      	movs	r0, r3
 800222e:	f000 fc11 	bl	8002a54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002232:	1e03      	subs	r3, r0, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e081      	b.n	800233e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d03a      	beq.n	80022ea <HAL_I2C_Mem_Write+0x1fa>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	2b00      	cmp	r3, #0
 800227a:	d136      	bne.n	80022ea <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800227c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	0013      	movs	r3, r2
 8002286:	2200      	movs	r2, #0
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	f000 fb95 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 800228e:	1e03      	subs	r3, r0, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e053      	b.n	800233e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	2bff      	cmp	r3, #255	; 0xff
 800229e:	d911      	bls.n	80022c4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	22ff      	movs	r2, #255	; 0xff
 80022a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	045c      	lsls	r4, r3, #17
 80022b0:	230a      	movs	r3, #10
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	8819      	ldrh	r1, [r3, #0]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	2300      	movs	r3, #0
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	0023      	movs	r3, r4
 80022be:	f000 fd53 	bl	8002d68 <I2C_TransferConfig>
 80022c2:	e012      	b.n	80022ea <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	049c      	lsls	r4, r3, #18
 80022d8:	230a      	movs	r3, #10
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	8819      	ldrh	r1, [r3, #0]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	2300      	movs	r3, #0
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	0023      	movs	r3, r4
 80022e6:	f000 fd3f 	bl	8002d68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d198      	bne.n	8002226 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f000 fbf0 	bl	8002ae0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002300:	1e03      	subs	r3, r0, #0
 8002302:	d001      	beq.n	8002308 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e01a      	b.n	800233e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2220      	movs	r2, #32
 800230e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	490b      	ldr	r1, [pc, #44]	; (8002348 <HAL_I2C_Mem_Write+0x258>)
 800231c:	400a      	ands	r2, r1
 800231e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2241      	movs	r2, #65	; 0x41
 8002324:	2120      	movs	r1, #32
 8002326:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2242      	movs	r2, #66	; 0x42
 800232c:	2100      	movs	r1, #0
 800232e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	2100      	movs	r1, #0
 8002336:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	e000      	b.n	800233e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800233c:	2302      	movs	r3, #2
  }
}
 800233e:	0018      	movs	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	b007      	add	sp, #28
 8002344:	bd90      	pop	{r4, r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	fe00e800 	.word	0xfe00e800

0800234c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b089      	sub	sp, #36	; 0x24
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	000c      	movs	r4, r1
 8002356:	0010      	movs	r0, r2
 8002358:	0019      	movs	r1, r3
 800235a:	230a      	movs	r3, #10
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	1c22      	adds	r2, r4, #0
 8002360:	801a      	strh	r2, [r3, #0]
 8002362:	2308      	movs	r3, #8
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	1c02      	adds	r2, r0, #0
 8002368:	801a      	strh	r2, [r3, #0]
 800236a:	1dbb      	adds	r3, r7, #6
 800236c:	1c0a      	adds	r2, r1, #0
 800236e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2241      	movs	r2, #65	; 0x41
 8002374:	5c9b      	ldrb	r3, [r3, r2]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b20      	cmp	r3, #32
 800237a:	d000      	beq.n	800237e <HAL_I2C_Mem_Read+0x32>
 800237c:	e110      	b.n	80025a0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <HAL_I2C_Mem_Read+0x42>
 8002384:	232c      	movs	r3, #44	; 0x2c
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	0092      	lsls	r2, r2, #2
 8002394:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e103      	b.n	80025a2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	5c9b      	ldrb	r3, [r3, r2]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_I2C_Mem_Read+0x5c>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e0fc      	b.n	80025a2 <HAL_I2C_Mem_Read+0x256>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	2101      	movs	r1, #1
 80023ae:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023b0:	f7fe ffa2 	bl	80012f8 <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	0219      	lsls	r1, r3, #8
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2319      	movs	r3, #25
 80023c4:	2201      	movs	r2, #1
 80023c6:	f000 faf7 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 80023ca:	1e03      	subs	r3, r0, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0e7      	b.n	80025a2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2241      	movs	r2, #65	; 0x41
 80023d6:	2122      	movs	r1, #34	; 0x22
 80023d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2242      	movs	r2, #66	; 0x42
 80023de:	2140      	movs	r1, #64	; 0x40
 80023e0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	222c      	movs	r2, #44	; 0x2c
 80023f2:	18ba      	adds	r2, r7, r2
 80023f4:	8812      	ldrh	r2, [r2, #0]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023fe:	1dbb      	adds	r3, r7, #6
 8002400:	881c      	ldrh	r4, [r3, #0]
 8002402:	2308      	movs	r3, #8
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	881a      	ldrh	r2, [r3, #0]
 8002408:	230a      	movs	r3, #10
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	8819      	ldrh	r1, [r3, #0]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	0023      	movs	r3, r4
 800241a:	f000 fa49 	bl	80028b0 <I2C_RequestMemoryRead>
 800241e:	1e03      	subs	r3, r0, #0
 8002420:	d005      	beq.n	800242e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2240      	movs	r2, #64	; 0x40
 8002426:	2100      	movs	r1, #0
 8002428:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0b9      	b.n	80025a2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	2bff      	cmp	r3, #255	; 0xff
 8002436:	d911      	bls.n	800245c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	22ff      	movs	r2, #255	; 0xff
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	b2da      	uxtb	r2, r3
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	045c      	lsls	r4, r3, #17
 8002448:	230a      	movs	r3, #10
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	8819      	ldrh	r1, [r3, #0]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	4b56      	ldr	r3, [pc, #344]	; (80025ac <HAL_I2C_Mem_Read+0x260>)
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	0023      	movs	r3, r4
 8002456:	f000 fc87 	bl	8002d68 <I2C_TransferConfig>
 800245a:	e012      	b.n	8002482 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246a:	b2da      	uxtb	r2, r3
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	049c      	lsls	r4, r3, #18
 8002470:	230a      	movs	r3, #10
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	8819      	ldrh	r1, [r3, #0]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	4b4c      	ldr	r3, [pc, #304]	; (80025ac <HAL_I2C_Mem_Read+0x260>)
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	0023      	movs	r3, r4
 800247e:	f000 fc73 	bl	8002d68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	0013      	movs	r3, r2
 800248c:	2200      	movs	r2, #0
 800248e:	2104      	movs	r1, #4
 8002490:	f000 fa92 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 8002494:	1e03      	subs	r3, r0, #0
 8002496:	d001      	beq.n	800249c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e082      	b.n	80025a2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d03a      	beq.n	800254e <HAL_I2C_Mem_Read+0x202>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d136      	bne.n	800254e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	0013      	movs	r3, r2
 80024ea:	2200      	movs	r2, #0
 80024ec:	2180      	movs	r1, #128	; 0x80
 80024ee:	f000 fa63 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 80024f2:	1e03      	subs	r3, r0, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e053      	b.n	80025a2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2bff      	cmp	r3, #255	; 0xff
 8002502:	d911      	bls.n	8002528 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	22ff      	movs	r2, #255	; 0xff
 8002508:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	b2da      	uxtb	r2, r3
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	045c      	lsls	r4, r3, #17
 8002514:	230a      	movs	r3, #10
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	8819      	ldrh	r1, [r3, #0]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	2300      	movs	r3, #0
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	0023      	movs	r3, r4
 8002522:	f000 fc21 	bl	8002d68 <I2C_TransferConfig>
 8002526:	e012      	b.n	800254e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	b2da      	uxtb	r2, r3
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	049c      	lsls	r4, r3, #18
 800253c:	230a      	movs	r3, #10
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	8819      	ldrh	r1, [r3, #0]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	2300      	movs	r3, #0
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	0023      	movs	r3, r4
 800254a:	f000 fc0d 	bl	8002d68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d194      	bne.n	8002482 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	0018      	movs	r0, r3
 8002560:	f000 fabe 	bl	8002ae0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d001      	beq.n	800256c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e01a      	b.n	80025a2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2220      	movs	r2, #32
 8002572:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	490c      	ldr	r1, [pc, #48]	; (80025b0 <HAL_I2C_Mem_Read+0x264>)
 8002580:	400a      	ands	r2, r1
 8002582:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2241      	movs	r2, #65	; 0x41
 8002588:	2120      	movs	r1, #32
 800258a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2242      	movs	r2, #66	; 0x42
 8002590:	2100      	movs	r1, #0
 8002592:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2240      	movs	r2, #64	; 0x40
 8002598:	2100      	movs	r1, #0
 800259a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b007      	add	sp, #28
 80025a8:	bd90      	pop	{r4, r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	80002400 	.word	0x80002400
 80025b0:	fe00e800 	.word	0xfe00e800

080025b4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	230a      	movs	r3, #10
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	1c0a      	adds	r2, r1, #0
 80025c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2241      	movs	r2, #65	; 0x41
 80025d0:	5c9b      	ldrb	r3, [r3, r2]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d000      	beq.n	80025da <HAL_I2C_IsDeviceReady+0x26>
 80025d8:	e0fd      	b.n	80027d6 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699a      	ldr	r2, [r3, #24]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	401a      	ands	r2, r3
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d101      	bne.n	80025f2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	e0f2      	b.n	80027d8 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2240      	movs	r2, #64	; 0x40
 80025f6:	5c9b      	ldrb	r3, [r3, r2]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_I2C_IsDeviceReady+0x4c>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0eb      	b.n	80027d8 <HAL_I2C_IsDeviceReady+0x224>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	2101      	movs	r1, #1
 8002606:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2241      	movs	r2, #65	; 0x41
 800260c:	2124      	movs	r1, #36	; 0x24
 800260e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d107      	bne.n	800262e <HAL_I2C_IsDeviceReady+0x7a>
 800261e:	230a      	movs	r3, #10
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	059b      	lsls	r3, r3, #22
 8002626:	0d9b      	lsrs	r3, r3, #22
 8002628:	4a6d      	ldr	r2, [pc, #436]	; (80027e0 <HAL_I2C_IsDeviceReady+0x22c>)
 800262a:	431a      	orrs	r2, r3
 800262c:	e006      	b.n	800263c <HAL_I2C_IsDeviceReady+0x88>
 800262e:	230a      	movs	r3, #10
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	059b      	lsls	r3, r3, #22
 8002636:	0d9b      	lsrs	r3, r3, #22
 8002638:	4a6a      	ldr	r2, [pc, #424]	; (80027e4 <HAL_I2C_IsDeviceReady+0x230>)
 800263a:	431a      	orrs	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002642:	f7fe fe59 	bl	80012f8 <HAL_GetTick>
 8002646:	0003      	movs	r3, r0
 8002648:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2220      	movs	r2, #32
 8002652:	4013      	ands	r3, r2
 8002654:	3b20      	subs	r3, #32
 8002656:	425a      	negs	r2, r3
 8002658:	4153      	adcs	r3, r2
 800265a:	b2da      	uxtb	r2, r3
 800265c:	231f      	movs	r3, #31
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2210      	movs	r2, #16
 800266a:	4013      	ands	r3, r2
 800266c:	3b10      	subs	r3, #16
 800266e:	425a      	negs	r2, r3
 8002670:	4153      	adcs	r3, r2
 8002672:	b2da      	uxtb	r2, r3
 8002674:	231e      	movs	r3, #30
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800267a:	e035      	b.n	80026e8 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	3301      	adds	r3, #1
 8002680:	d01a      	beq.n	80026b8 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002682:	f7fe fe39 	bl	80012f8 <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d302      	bcc.n	8002698 <HAL_I2C_IsDeviceReady+0xe4>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10f      	bne.n	80026b8 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2241      	movs	r2, #65	; 0x41
 800269c:	2120      	movs	r1, #32
 800269e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	2220      	movs	r2, #32
 80026a6:	431a      	orrs	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2240      	movs	r2, #64	; 0x40
 80026b0:	2100      	movs	r1, #0
 80026b2:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e08f      	b.n	80027d8 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2220      	movs	r2, #32
 80026c0:	4013      	ands	r3, r2
 80026c2:	3b20      	subs	r3, #32
 80026c4:	425a      	negs	r2, r3
 80026c6:	4153      	adcs	r3, r2
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	231f      	movs	r3, #31
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2210      	movs	r2, #16
 80026d8:	4013      	ands	r3, r2
 80026da:	3b10      	subs	r3, #16
 80026dc:	425a      	negs	r2, r3
 80026de:	4153      	adcs	r3, r2
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	231e      	movs	r3, #30
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80026e8:	231f      	movs	r3, #31
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d104      	bne.n	80026fc <HAL_I2C_IsDeviceReady+0x148>
 80026f2:	231e      	movs	r3, #30
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0bf      	beq.n	800267c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2210      	movs	r2, #16
 8002704:	4013      	ands	r3, r2
 8002706:	2b10      	cmp	r3, #16
 8002708:	d01a      	beq.n	8002740 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	0013      	movs	r3, r2
 8002714:	2200      	movs	r2, #0
 8002716:	2120      	movs	r1, #32
 8002718:	f000 f94e 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 800271c:	1e03      	subs	r3, r0, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e059      	b.n	80027d8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2220      	movs	r2, #32
 800272a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2241      	movs	r2, #65	; 0x41
 8002730:	2120      	movs	r1, #32
 8002732:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2240      	movs	r2, #64	; 0x40
 8002738:	2100      	movs	r1, #0
 800273a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e04b      	b.n	80027d8 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	0013      	movs	r3, r2
 800274a:	2200      	movs	r2, #0
 800274c:	2120      	movs	r1, #32
 800274e:	f000 f933 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d001      	beq.n	800275a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e03e      	b.n	80027d8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2210      	movs	r2, #16
 8002760:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2220      	movs	r2, #32
 8002768:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	d119      	bne.n	80027a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	01c9      	lsls	r1, r1, #7
 8002780:	430a      	orrs	r2, r1
 8002782:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	0013      	movs	r3, r2
 800278e:	2200      	movs	r2, #0
 8002790:	2120      	movs	r1, #32
 8002792:	f000 f911 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e01c      	b.n	80027d8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2220      	movs	r2, #32
 80027a4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3301      	adds	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d900      	bls.n	80027b6 <HAL_I2C_IsDeviceReady+0x202>
 80027b4:	e72f      	b.n	8002616 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2241      	movs	r2, #65	; 0x41
 80027ba:	2120      	movs	r1, #32
 80027bc:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	2220      	movs	r2, #32
 80027c4:	431a      	orrs	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2240      	movs	r2, #64	; 0x40
 80027ce:	2100      	movs	r1, #0
 80027d0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
  }
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b008      	add	sp, #32
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	02002000 	.word	0x02002000
 80027e4:	02002800 	.word	0x02002800

080027e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027e8:	b5b0      	push	{r4, r5, r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	000c      	movs	r4, r1
 80027f2:	0010      	movs	r0, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	250a      	movs	r5, #10
 80027f8:	197b      	adds	r3, r7, r5
 80027fa:	1c22      	adds	r2, r4, #0
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	2308      	movs	r3, #8
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	1c02      	adds	r2, r0, #0
 8002804:	801a      	strh	r2, [r3, #0]
 8002806:	1dbb      	adds	r3, r7, #6
 8002808:	1c0a      	adds	r2, r1, #0
 800280a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800280c:	1dbb      	adds	r3, r7, #6
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	045c      	lsls	r4, r3, #17
 8002816:	197b      	adds	r3, r7, r5
 8002818:	8819      	ldrh	r1, [r3, #0]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	4b23      	ldr	r3, [pc, #140]	; (80028ac <I2C_RequestMemoryWrite+0xc4>)
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	0023      	movs	r3, r4
 8002822:	f000 faa1 	bl	8002d68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	6a39      	ldr	r1, [r7, #32]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	0018      	movs	r0, r3
 800282e:	f000 f911 	bl	8002a54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002832:	1e03      	subs	r3, r0, #0
 8002834:	d001      	beq.n	800283a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e033      	b.n	80028a2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800283a:	1dbb      	adds	r3, r7, #6
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d107      	bne.n	8002852 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002842:	2308      	movs	r3, #8
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	629a      	str	r2, [r3, #40]	; 0x28
 8002850:	e019      	b.n	8002886 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002852:	2308      	movs	r3, #8
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	b29b      	uxth	r3, r3
 800285c:	b2da      	uxtb	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002866:	6a39      	ldr	r1, [r7, #32]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	0018      	movs	r0, r3
 800286c:	f000 f8f2 	bl	8002a54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002870:	1e03      	subs	r3, r0, #0
 8002872:	d001      	beq.n	8002878 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e014      	b.n	80028a2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002878:	2308      	movs	r3, #8
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002886:	6a3a      	ldr	r2, [r7, #32]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	0013      	movs	r3, r2
 8002890:	2200      	movs	r2, #0
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	f000 f890 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 8002898:	1e03      	subs	r3, r0, #0
 800289a:	d001      	beq.n	80028a0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	0018      	movs	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b004      	add	sp, #16
 80028a8:	bdb0      	pop	{r4, r5, r7, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	80002000 	.word	0x80002000

080028b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80028b0:	b5b0      	push	{r4, r5, r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	000c      	movs	r4, r1
 80028ba:	0010      	movs	r0, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	250a      	movs	r5, #10
 80028c0:	197b      	adds	r3, r7, r5
 80028c2:	1c22      	adds	r2, r4, #0
 80028c4:	801a      	strh	r2, [r3, #0]
 80028c6:	2308      	movs	r3, #8
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	1c02      	adds	r2, r0, #0
 80028cc:	801a      	strh	r2, [r3, #0]
 80028ce:	1dbb      	adds	r3, r7, #6
 80028d0:	1c0a      	adds	r2, r1, #0
 80028d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028d4:	1dbb      	adds	r3, r7, #6
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	197b      	adds	r3, r7, r5
 80028dc:	8819      	ldrh	r1, [r3, #0]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	4b23      	ldr	r3, [pc, #140]	; (8002970 <I2C_RequestMemoryRead+0xc0>)
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2300      	movs	r3, #0
 80028e6:	f000 fa3f 	bl	8002d68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ec:	6a39      	ldr	r1, [r7, #32]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 f8af 	bl	8002a54 <I2C_WaitOnTXISFlagUntilTimeout>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d001      	beq.n	80028fe <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e033      	b.n	8002966 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028fe:	1dbb      	adds	r3, r7, #6
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002906:	2308      	movs	r3, #8
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
 8002914:	e019      	b.n	800294a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002916:	2308      	movs	r3, #8
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	b29b      	uxth	r3, r3
 8002920:	b2da      	uxtb	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292a:	6a39      	ldr	r1, [r7, #32]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	0018      	movs	r0, r3
 8002930:	f000 f890 	bl	8002a54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002934:	1e03      	subs	r3, r0, #0
 8002936:	d001      	beq.n	800293c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e014      	b.n	8002966 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800293c:	2308      	movs	r3, #8
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800294a:	6a3a      	ldr	r2, [r7, #32]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	0013      	movs	r3, r2
 8002954:	2200      	movs	r2, #0
 8002956:	2140      	movs	r1, #64	; 0x40
 8002958:	f000 f82e 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 800295c:	1e03      	subs	r3, r0, #0
 800295e:	d001      	beq.n	8002964 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	0018      	movs	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	b004      	add	sp, #16
 800296c:	bdb0      	pop	{r4, r5, r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	80002000 	.word	0x80002000

08002974 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2202      	movs	r2, #2
 8002984:	4013      	ands	r3, r2
 8002986:	2b02      	cmp	r3, #2
 8002988:	d103      	bne.n	8002992 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2201      	movs	r2, #1
 800299a:	4013      	ands	r3, r2
 800299c:	2b01      	cmp	r3, #1
 800299e:	d007      	beq.n	80029b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2101      	movs	r1, #1
 80029ac:	430a      	orrs	r2, r1
 80029ae:	619a      	str	r2, [r3, #24]
  }
}
 80029b0:	46c0      	nop			; (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b002      	add	sp, #8
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	1dfb      	adds	r3, r7, #7
 80029c6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c8:	e030      	b.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	3301      	adds	r3, #1
 80029ce:	d02d      	beq.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d0:	f7fe fc92 	bl	80012f8 <HAL_GetTick>
 80029d4:	0002      	movs	r2, r0
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d302      	bcc.n	80029e6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d122      	bne.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	4013      	ands	r3, r2
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	425a      	negs	r2, r3
 80029f6:	4153      	adcs	r3, r2
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	001a      	movs	r2, r3
 80029fc:	1dfb      	adds	r3, r7, #7
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d113      	bne.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	2220      	movs	r2, #32
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2241      	movs	r2, #65	; 0x41
 8002a14:	2120      	movs	r1, #32
 8002a16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2242      	movs	r2, #66	; 0x42
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2240      	movs	r2, #64	; 0x40
 8002a24:	2100      	movs	r1, #0
 8002a26:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e00f      	b.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	4013      	ands	r3, r2
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	425a      	negs	r2, r3
 8002a3c:	4153      	adcs	r3, r2
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	001a      	movs	r2, r3
 8002a42:	1dfb      	adds	r3, r7, #7
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d0bf      	beq.n	80029ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b004      	add	sp, #16
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a60:	e032      	b.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 f87d 	bl	8002b68 <I2C_IsErrorOccurred>
 8002a6e:	1e03      	subs	r3, r0, #0
 8002a70:	d001      	beq.n	8002a76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e030      	b.n	8002ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	d025      	beq.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7c:	f7fe fc3c 	bl	80012f8 <HAL_GetTick>
 8002a80:	0002      	movs	r2, r0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d302      	bcc.n	8002a92 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d11a      	bne.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d013      	beq.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2241      	movs	r2, #65	; 0x41
 8002ab0:	2120      	movs	r1, #32
 8002ab2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2242      	movs	r2, #66	; 0x42
 8002ab8:	2100      	movs	r1, #0
 8002aba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e007      	b.n	8002ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d1c5      	bne.n	8002a62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	0018      	movs	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b004      	add	sp, #16
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aec:	e02f      	b.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 f837 	bl	8002b68 <I2C_IsErrorOccurred>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d001      	beq.n	8002b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e02d      	b.n	8002b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b02:	f7fe fbf9 	bl	80012f8 <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d302      	bcc.n	8002b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d11a      	bne.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d013      	beq.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2241      	movs	r2, #65	; 0x41
 8002b36:	2120      	movs	r1, #32
 8002b38:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2242      	movs	r2, #66	; 0x42
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2240      	movs	r2, #64	; 0x40
 8002b46:	2100      	movs	r1, #0
 8002b48:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e007      	b.n	8002b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2220      	movs	r2, #32
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d1c8      	bne.n	8002aee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	0018      	movs	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b004      	add	sp, #16
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b08b      	sub	sp, #44	; 0x2c
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b74:	2327      	movs	r3, #39	; 0x27
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2210      	movs	r2, #16
 8002b90:	4013      	ands	r3, r2
 8002b92:	d100      	bne.n	8002b96 <I2C_IsErrorOccurred+0x2e>
 8002b94:	e082      	b.n	8002c9c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b9e:	e060      	b.n	8002c62 <I2C_IsErrorOccurred+0xfa>
 8002ba0:	2427      	movs	r4, #39	; 0x27
 8002ba2:	193b      	adds	r3, r7, r4
 8002ba4:	193a      	adds	r2, r7, r4
 8002ba6:	7812      	ldrb	r2, [r2, #0]
 8002ba8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	3301      	adds	r3, #1
 8002bae:	d058      	beq.n	8002c62 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bb0:	f7fe fba2 	bl	80012f8 <HAL_GetTick>
 8002bb4:	0002      	movs	r2, r0
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d306      	bcc.n	8002bce <I2C_IsErrorOccurred+0x66>
 8002bc0:	193b      	adds	r3, r7, r4
 8002bc2:	193a      	adds	r2, r7, r4
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d149      	bne.n	8002c62 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	01db      	lsls	r3, r3, #7
 8002bd8:	4013      	ands	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bdc:	2013      	movs	r0, #19
 8002bde:	183b      	adds	r3, r7, r0
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	2142      	movs	r1, #66	; 0x42
 8002be4:	5c52      	ldrb	r2, [r2, r1]
 8002be6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d126      	bne.n	8002c4a <I2C_IsErrorOccurred+0xe2>
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	01db      	lsls	r3, r3, #7
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d021      	beq.n	8002c4a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002c06:	183b      	adds	r3, r7, r0
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d01d      	beq.n	8002c4a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2180      	movs	r1, #128	; 0x80
 8002c1a:	01c9      	lsls	r1, r1, #7
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c20:	f7fe fb6a 	bl	80012f8 <HAL_GetTick>
 8002c24:	0003      	movs	r3, r0
 8002c26:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c28:	e00f      	b.n	8002c4a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c2a:	f7fe fb65 	bl	80012f8 <HAL_GetTick>
 8002c2e:	0002      	movs	r2, r0
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b19      	cmp	r3, #25
 8002c36:	d908      	bls.n	8002c4a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c40:	2327      	movs	r3, #39	; 0x27
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]

              break;
 8002c48:	e00b      	b.n	8002c62 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2220      	movs	r2, #32
 8002c52:	4013      	ands	r3, r2
 8002c54:	2127      	movs	r1, #39	; 0x27
 8002c56:	187a      	adds	r2, r7, r1
 8002c58:	1879      	adds	r1, r7, r1
 8002c5a:	7809      	ldrb	r1, [r1, #0]
 8002c5c:	7011      	strb	r1, [r2, #0]
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d1e3      	bne.n	8002c2a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d004      	beq.n	8002c7a <I2C_IsErrorOccurred+0x112>
 8002c70:	2327      	movs	r3, #39	; 0x27
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d092      	beq.n	8002ba0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c7a:	2327      	movs	r3, #39	; 0x27
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	2204      	movs	r2, #4
 8002c90:	4313      	orrs	r3, r2
 8002c92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c94:	2327      	movs	r3, #39	; 0x27
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4013      	ands	r3, r2
 8002cac:	d00c      	beq.n	8002cc8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	0052      	lsls	r2, r2, #1
 8002cbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cc0:	2327      	movs	r3, #39	; 0x27
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d00c      	beq.n	8002cec <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	00d2      	lsls	r2, r2, #3
 8002ce2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ce4:	2327      	movs	r3, #39	; 0x27
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d00c      	beq.n	8002d10 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2280      	movs	r2, #128	; 0x80
 8002d04:	0092      	lsls	r2, r2, #2
 8002d06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d08:	2327      	movs	r3, #39	; 0x27
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002d10:	2327      	movs	r3, #39	; 0x27
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d01d      	beq.n	8002d56 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7ff fe29 	bl	8002974 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	490d      	ldr	r1, [pc, #52]	; (8002d64 <I2C_IsErrorOccurred+0x1fc>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2241      	movs	r2, #65	; 0x41
 8002d42:	2120      	movs	r1, #32
 8002d44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2242      	movs	r2, #66	; 0x42
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2240      	movs	r2, #64	; 0x40
 8002d52:	2100      	movs	r1, #0
 8002d54:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002d56:	2327      	movs	r3, #39	; 0x27
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	781b      	ldrb	r3, [r3, #0]
}
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b00b      	add	sp, #44	; 0x2c
 8002d62:	bd90      	pop	{r4, r7, pc}
 8002d64:	fe00e800 	.word	0xfe00e800

08002d68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	0008      	movs	r0, r1
 8002d72:	0011      	movs	r1, r2
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	240a      	movs	r4, #10
 8002d78:	193b      	adds	r3, r7, r4
 8002d7a:	1c02      	adds	r2, r0, #0
 8002d7c:	801a      	strh	r2, [r3, #0]
 8002d7e:	2009      	movs	r0, #9
 8002d80:	183b      	adds	r3, r7, r0
 8002d82:	1c0a      	adds	r2, r1, #0
 8002d84:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d86:	193b      	adds	r3, r7, r4
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	059b      	lsls	r3, r3, #22
 8002d8c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d8e:	183b      	adds	r3, r7, r0
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	0419      	lsls	r1, r3, #16
 8002d94:	23ff      	movs	r3, #255	; 0xff
 8002d96:	041b      	lsls	r3, r3, #16
 8002d98:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d9a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	4313      	orrs	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db2:	0d51      	lsrs	r1, r2, #21
 8002db4:	2280      	movs	r2, #128	; 0x80
 8002db6:	00d2      	lsls	r2, r2, #3
 8002db8:	400a      	ands	r2, r1
 8002dba:	4907      	ldr	r1, [pc, #28]	; (8002dd8 <I2C_TransferConfig+0x70>)
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	43d2      	mvns	r2, r2
 8002dc0:	401a      	ands	r2, r3
 8002dc2:	0011      	movs	r1, r2
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b007      	add	sp, #28
 8002dd4:	bd90      	pop	{r4, r7, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	03ff63ff 	.word	0x03ff63ff

08002ddc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2241      	movs	r2, #65	; 0x41
 8002dea:	5c9b      	ldrb	r3, [r3, r2]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d138      	bne.n	8002e64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2240      	movs	r2, #64	; 0x40
 8002df6:	5c9b      	ldrb	r3, [r3, r2]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e032      	b.n	8002e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2240      	movs	r2, #64	; 0x40
 8002e04:	2101      	movs	r1, #1
 8002e06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2241      	movs	r2, #65	; 0x41
 8002e0c:	2124      	movs	r1, #36	; 0x24
 8002e0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	438a      	bics	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4911      	ldr	r1, [pc, #68]	; (8002e70 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2241      	movs	r2, #65	; 0x41
 8002e54:	2120      	movs	r1, #32
 8002e56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e000      	b.n	8002e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e64:	2302      	movs	r3, #2
  }
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b002      	add	sp, #8
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	ffffefff 	.word	0xffffefff

08002e74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2241      	movs	r2, #65	; 0x41
 8002e82:	5c9b      	ldrb	r3, [r3, r2]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d139      	bne.n	8002efe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2240      	movs	r2, #64	; 0x40
 8002e8e:	5c9b      	ldrb	r3, [r3, r2]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e033      	b.n	8002f00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2240      	movs	r2, #64	; 0x40
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2241      	movs	r2, #65	; 0x41
 8002ea4:	2124      	movs	r1, #36	; 0x24
 8002ea6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	438a      	bics	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4a11      	ldr	r2, [pc, #68]	; (8002f08 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2241      	movs	r2, #65	; 0x41
 8002eee:	2120      	movs	r1, #32
 8002ef0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2240      	movs	r2, #64	; 0x40
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
  }
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b004      	add	sp, #16
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	fffff0ff 	.word	0xfffff0ff

08002f0c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	605a      	str	r2, [r3, #4]
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40007000 	.word	0x40007000

08002f2c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2  
  *           @arg PWR_WAKEUP_PIN3  for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_PWR_DisableWakeUpPin+0x20>)
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	43d9      	mvns	r1, r3
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <HAL_PWR_DisableWakeUpPin+0x20>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b002      	add	sp, #8
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	40007000 	.word	0x40007000

08002f50 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002f66:	2104      	movs	r1, #4
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002f6c:	bf30      	wfi
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40007000 	.word	0x40007000
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f7c:	b5b0      	push	{r4, r5, r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f000 fbbf 	bl	800370e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f90:	4bc9      	ldr	r3, [pc, #804]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	220c      	movs	r2, #12
 8002f96:	4013      	ands	r3, r2
 8002f98:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f9a:	4bc7      	ldr	r3, [pc, #796]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	025b      	lsls	r3, r3, #9
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2201      	movs	r2, #1
 8002fac:	4013      	ands	r3, r2
 8002fae:	d100      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x36>
 8002fb0:	e07e      	b.n	80030b0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d007      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d112      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x68>
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	025b      	lsls	r3, r3, #9
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d10d      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	4bbb      	ldr	r3, [pc, #748]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	029b      	lsls	r3, r3, #10
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x5a>
 8002fd4:	e06b      	b.n	80030ae <HAL_RCC_OscConfig+0x132>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d167      	bne.n	80030ae <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f000 fb95 	bl	800370e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	025b      	lsls	r3, r3, #9
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_OscConfig+0x84>
 8002ff0:	4bb1      	ldr	r3, [pc, #708]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4bb0      	ldr	r3, [pc, #704]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	0249      	lsls	r1, r1, #9
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e027      	b.n	8003050 <HAL_RCC_OscConfig+0xd4>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	23a0      	movs	r3, #160	; 0xa0
 8003006:	02db      	lsls	r3, r3, #11
 8003008:	429a      	cmp	r2, r3
 800300a:	d10e      	bne.n	800302a <HAL_RCC_OscConfig+0xae>
 800300c:	4baa      	ldr	r3, [pc, #680]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4ba9      	ldr	r3, [pc, #676]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	02c9      	lsls	r1, r1, #11
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	4ba7      	ldr	r3, [pc, #668]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4ba6      	ldr	r3, [pc, #664]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	0249      	lsls	r1, r1, #9
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e012      	b.n	8003050 <HAL_RCC_OscConfig+0xd4>
 800302a:	4ba3      	ldr	r3, [pc, #652]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4ba2      	ldr	r3, [pc, #648]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003030:	49a2      	ldr	r1, [pc, #648]	; (80032bc <HAL_RCC_OscConfig+0x340>)
 8003032:	400a      	ands	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	4ba0      	ldr	r3, [pc, #640]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	025b      	lsls	r3, r3, #9
 800303e:	4013      	ands	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4b9c      	ldr	r3, [pc, #624]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b9b      	ldr	r3, [pc, #620]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 800304a:	499d      	ldr	r1, [pc, #628]	; (80032c0 <HAL_RCC_OscConfig+0x344>)
 800304c:	400a      	ands	r2, r1
 800304e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d015      	beq.n	8003084 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fe f94e 	bl	80012f8 <HAL_GetTick>
 800305c:	0003      	movs	r3, r0
 800305e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003060:	e009      	b.n	8003076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003062:	f7fe f949 	bl	80012f8 <HAL_GetTick>
 8003066:	0002      	movs	r2, r0
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b64      	cmp	r3, #100	; 0x64
 800306e:	d902      	bls.n	8003076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	f000 fb4c 	bl	800370e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003076:	4b90      	ldr	r3, [pc, #576]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	029b      	lsls	r3, r3, #10
 800307e:	4013      	ands	r3, r2
 8003080:	d0ef      	beq.n	8003062 <HAL_RCC_OscConfig+0xe6>
 8003082:	e015      	b.n	80030b0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe f938 	bl	80012f8 <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800308e:	f7fe f933 	bl	80012f8 <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b64      	cmp	r3, #100	; 0x64
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e336      	b.n	800370e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030a0:	4b85      	ldr	r3, [pc, #532]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	029b      	lsls	r3, r3, #10
 80030a8:	4013      	ands	r3, r2
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x112>
 80030ac:	e000      	b.n	80030b0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	d100      	bne.n	80030bc <HAL_RCC_OscConfig+0x140>
 80030ba:	e099      	b.n	80031f0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	2220      	movs	r2, #32
 80030c6:	4013      	ands	r3, r2
 80030c8:	d009      	beq.n	80030de <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80030ca:	4b7b      	ldr	r3, [pc, #492]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4b7a      	ldr	r3, [pc, #488]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 80030d0:	2120      	movs	r1, #32
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	2220      	movs	r2, #32
 80030da:	4393      	bics	r3, r2
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d13e      	bne.n	8003168 <HAL_RCC_OscConfig+0x1ec>
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d13b      	bne.n	8003168 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80030f0:	4b71      	ldr	r3, [pc, #452]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2204      	movs	r2, #4
 80030f6:	4013      	ands	r3, r2
 80030f8:	d004      	beq.n	8003104 <HAL_RCC_OscConfig+0x188>
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e304      	b.n	800370e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003104:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a6e      	ldr	r2, [pc, #440]	; (80032c4 <HAL_RCC_OscConfig+0x348>)
 800310a:	4013      	ands	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	021a      	lsls	r2, r3, #8
 8003114:	4b68      	ldr	r3, [pc, #416]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800311a:	4b67      	ldr	r3, [pc, #412]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2209      	movs	r2, #9
 8003120:	4393      	bics	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	4b64      	ldr	r3, [pc, #400]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800312c:	f000 fc42 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003130:	0001      	movs	r1, r0
 8003132:	4b61      	ldr	r3, [pc, #388]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	220f      	movs	r2, #15
 800313a:	4013      	ands	r3, r2
 800313c:	4a62      	ldr	r2, [pc, #392]	; (80032c8 <HAL_RCC_OscConfig+0x34c>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	000a      	movs	r2, r1
 8003142:	40da      	lsrs	r2, r3
 8003144:	4b61      	ldr	r3, [pc, #388]	; (80032cc <HAL_RCC_OscConfig+0x350>)
 8003146:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003148:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <HAL_RCC_OscConfig+0x354>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2513      	movs	r5, #19
 800314e:	197c      	adds	r4, r7, r5
 8003150:	0018      	movs	r0, r3
 8003152:	f7fe f88b 	bl	800126c <HAL_InitTick>
 8003156:	0003      	movs	r3, r0
 8003158:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800315a:	197b      	adds	r3, r7, r5
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d046      	beq.n	80031f0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003162:	197b      	adds	r3, r7, r5
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	e2d2      	b.n	800370e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	2b00      	cmp	r3, #0
 800316c:	d027      	beq.n	80031be <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800316e:	4b52      	ldr	r3, [pc, #328]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2209      	movs	r2, #9
 8003174:	4393      	bics	r3, r2
 8003176:	0019      	movs	r1, r3
 8003178:	4b4f      	ldr	r3, [pc, #316]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	430a      	orrs	r2, r1
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe f8ba 	bl	80012f8 <HAL_GetTick>
 8003184:	0003      	movs	r3, r0
 8003186:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318a:	f7fe f8b5 	bl	80012f8 <HAL_GetTick>
 800318e:	0002      	movs	r2, r0
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e2b8      	b.n	800370e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800319c:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2204      	movs	r2, #4
 80031a2:	4013      	ands	r3, r2
 80031a4:	d0f1      	beq.n	800318a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a6:	4b44      	ldr	r3, [pc, #272]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4a46      	ldr	r2, [pc, #280]	; (80032c4 <HAL_RCC_OscConfig+0x348>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	021a      	lsls	r2, r3, #8
 80031b6:	4b40      	ldr	r3, [pc, #256]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	e018      	b.n	80031f0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b3d      	ldr	r3, [pc, #244]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 80031c4:	2101      	movs	r1, #1
 80031c6:	438a      	bics	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fe f895 	bl	80012f8 <HAL_GetTick>
 80031ce:	0003      	movs	r3, r0
 80031d0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d4:	f7fe f890 	bl	80012f8 <HAL_GetTick>
 80031d8:	0002      	movs	r2, r0
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e293      	b.n	800370e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031e6:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2204      	movs	r2, #4
 80031ec:	4013      	ands	r3, r2
 80031ee:	d1f1      	bne.n	80031d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2210      	movs	r2, #16
 80031f6:	4013      	ands	r3, r2
 80031f8:	d100      	bne.n	80031fc <HAL_RCC_OscConfig+0x280>
 80031fa:	e0a2      	b.n	8003342 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d140      	bne.n	8003284 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4013      	ands	r3, r2
 800320c:	d005      	beq.n	800321a <HAL_RCC_OscConfig+0x29e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e279      	b.n	800370e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800321a:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4a2d      	ldr	r2, [pc, #180]	; (80032d4 <HAL_RCC_OscConfig+0x358>)
 8003220:	4013      	ands	r3, r2
 8003222:	0019      	movs	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003228:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800322e:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	0a19      	lsrs	r1, r3, #8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	061a      	lsls	r2, r3, #24
 800323c:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	0b5b      	lsrs	r3, r3, #13
 8003248:	3301      	adds	r3, #1
 800324a:	2280      	movs	r2, #128	; 0x80
 800324c:	0212      	lsls	r2, r2, #8
 800324e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	210f      	movs	r1, #15
 8003258:	400b      	ands	r3, r1
 800325a:	491b      	ldr	r1, [pc, #108]	; (80032c8 <HAL_RCC_OscConfig+0x34c>)
 800325c:	5ccb      	ldrb	r3, [r1, r3]
 800325e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003260:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_RCC_OscConfig+0x350>)
 8003262:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_RCC_OscConfig+0x354>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2513      	movs	r5, #19
 800326a:	197c      	adds	r4, r7, r5
 800326c:	0018      	movs	r0, r3
 800326e:	f7fd fffd 	bl	800126c <HAL_InitTick>
 8003272:	0003      	movs	r3, r0
 8003274:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003276:	197b      	adds	r3, r7, r5
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d061      	beq.n	8003342 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800327e:	197b      	adds	r3, r7, r5
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	e244      	b.n	800370e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d040      	beq.n	800330e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800328c:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_RCC_OscConfig+0x33c>)
 8003292:	2180      	movs	r1, #128	; 0x80
 8003294:	0049      	lsls	r1, r1, #1
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329a:	f7fe f82d 	bl	80012f8 <HAL_GetTick>
 800329e:	0003      	movs	r3, r0
 80032a0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032a2:	e019      	b.n	80032d8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032a4:	f7fe f828 	bl	80012f8 <HAL_GetTick>
 80032a8:	0002      	movs	r2, r0
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d912      	bls.n	80032d8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e22b      	b.n	800370e <HAL_RCC_OscConfig+0x792>
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	40021000 	.word	0x40021000
 80032bc:	fffeffff 	.word	0xfffeffff
 80032c0:	fffbffff 	.word	0xfffbffff
 80032c4:	ffffe0ff 	.word	0xffffe0ff
 80032c8:	080053ac 	.word	0x080053ac
 80032cc:	20000008 	.word	0x20000008
 80032d0:	2000000c 	.word	0x2000000c
 80032d4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032d8:	4bca      	ldr	r3, [pc, #808]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4013      	ands	r3, r2
 80032e2:	d0df      	beq.n	80032a4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032e4:	4bc7      	ldr	r3, [pc, #796]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4ac7      	ldr	r2, [pc, #796]	; (8003608 <HAL_RCC_OscConfig+0x68c>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032f2:	4bc4      	ldr	r3, [pc, #784]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f8:	4bc2      	ldr	r3, [pc, #776]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	0a19      	lsrs	r1, r3, #8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	061a      	lsls	r2, r3, #24
 8003306:	4bbf      	ldr	r3, [pc, #764]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	e019      	b.n	8003342 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800330e:	4bbd      	ldr	r3, [pc, #756]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4bbc      	ldr	r3, [pc, #752]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003314:	49bd      	ldr	r1, [pc, #756]	; (800360c <HAL_RCC_OscConfig+0x690>)
 8003316:	400a      	ands	r2, r1
 8003318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331a:	f7fd ffed 	bl	80012f8 <HAL_GetTick>
 800331e:	0003      	movs	r3, r0
 8003320:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003324:	f7fd ffe8 	bl	80012f8 <HAL_GetTick>
 8003328:	0002      	movs	r2, r0
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e1eb      	b.n	800370e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003336:	4bb3      	ldr	r3, [pc, #716]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4013      	ands	r3, r2
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2208      	movs	r2, #8
 8003348:	4013      	ands	r3, r2
 800334a:	d036      	beq.n	80033ba <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d019      	beq.n	8003388 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003354:	4bab      	ldr	r3, [pc, #684]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003358:	4baa      	ldr	r3, [pc, #680]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800335a:	2101      	movs	r1, #1
 800335c:	430a      	orrs	r2, r1
 800335e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003360:	f7fd ffca 	bl	80012f8 <HAL_GetTick>
 8003364:	0003      	movs	r3, r0
 8003366:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800336a:	f7fd ffc5 	bl	80012f8 <HAL_GetTick>
 800336e:	0002      	movs	r2, r0
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e1c8      	b.n	800370e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800337c:	4ba1      	ldr	r3, [pc, #644]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800337e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003380:	2202      	movs	r2, #2
 8003382:	4013      	ands	r3, r2
 8003384:	d0f1      	beq.n	800336a <HAL_RCC_OscConfig+0x3ee>
 8003386:	e018      	b.n	80033ba <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003388:	4b9e      	ldr	r3, [pc, #632]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800338a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800338c:	4b9d      	ldr	r3, [pc, #628]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800338e:	2101      	movs	r1, #1
 8003390:	438a      	bics	r2, r1
 8003392:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003394:	f7fd ffb0 	bl	80012f8 <HAL_GetTick>
 8003398:	0003      	movs	r3, r0
 800339a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339e:	f7fd ffab 	bl	80012f8 <HAL_GetTick>
 80033a2:	0002      	movs	r2, r0
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e1ae      	b.n	800370e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033b0:	4b94      	ldr	r3, [pc, #592]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80033b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b4:	2202      	movs	r2, #2
 80033b6:	4013      	ands	r3, r2
 80033b8:	d1f1      	bne.n	800339e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2204      	movs	r2, #4
 80033c0:	4013      	ands	r3, r2
 80033c2:	d100      	bne.n	80033c6 <HAL_RCC_OscConfig+0x44a>
 80033c4:	e0ae      	b.n	8003524 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c6:	2023      	movs	r0, #35	; 0x23
 80033c8:	183b      	adds	r3, r7, r0
 80033ca:	2200      	movs	r2, #0
 80033cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ce:	4b8d      	ldr	r3, [pc, #564]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80033d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	055b      	lsls	r3, r3, #21
 80033d6:	4013      	ands	r3, r2
 80033d8:	d109      	bne.n	80033ee <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	4b8a      	ldr	r3, [pc, #552]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80033dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033de:	4b89      	ldr	r3, [pc, #548]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80033e0:	2180      	movs	r1, #128	; 0x80
 80033e2:	0549      	lsls	r1, r1, #21
 80033e4:	430a      	orrs	r2, r1
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80033e8:	183b      	adds	r3, r7, r0
 80033ea:	2201      	movs	r2, #1
 80033ec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ee:	4b88      	ldr	r3, [pc, #544]	; (8003610 <HAL_RCC_OscConfig+0x694>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4013      	ands	r3, r2
 80033f8:	d11a      	bne.n	8003430 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fa:	4b85      	ldr	r3, [pc, #532]	; (8003610 <HAL_RCC_OscConfig+0x694>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b84      	ldr	r3, [pc, #528]	; (8003610 <HAL_RCC_OscConfig+0x694>)
 8003400:	2180      	movs	r1, #128	; 0x80
 8003402:	0049      	lsls	r1, r1, #1
 8003404:	430a      	orrs	r2, r1
 8003406:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003408:	f7fd ff76 	bl	80012f8 <HAL_GetTick>
 800340c:	0003      	movs	r3, r0
 800340e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003412:	f7fd ff71 	bl	80012f8 <HAL_GetTick>
 8003416:	0002      	movs	r2, r0
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b64      	cmp	r3, #100	; 0x64
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e174      	b.n	800370e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	4b7a      	ldr	r3, [pc, #488]	; (8003610 <HAL_RCC_OscConfig+0x694>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4013      	ands	r3, r2
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	429a      	cmp	r2, r3
 800343a:	d107      	bne.n	800344c <HAL_RCC_OscConfig+0x4d0>
 800343c:	4b71      	ldr	r3, [pc, #452]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800343e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003440:	4b70      	ldr	r3, [pc, #448]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	0049      	lsls	r1, r1, #1
 8003446:	430a      	orrs	r2, r1
 8003448:	651a      	str	r2, [r3, #80]	; 0x50
 800344a:	e031      	b.n	80034b0 <HAL_RCC_OscConfig+0x534>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10c      	bne.n	800346e <HAL_RCC_OscConfig+0x4f2>
 8003454:	4b6b      	ldr	r3, [pc, #428]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003458:	4b6a      	ldr	r3, [pc, #424]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800345a:	496c      	ldr	r1, [pc, #432]	; (800360c <HAL_RCC_OscConfig+0x690>)
 800345c:	400a      	ands	r2, r1
 800345e:	651a      	str	r2, [r3, #80]	; 0x50
 8003460:	4b68      	ldr	r3, [pc, #416]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003462:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003464:	4b67      	ldr	r3, [pc, #412]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003466:	496b      	ldr	r1, [pc, #428]	; (8003614 <HAL_RCC_OscConfig+0x698>)
 8003468:	400a      	ands	r2, r1
 800346a:	651a      	str	r2, [r3, #80]	; 0x50
 800346c:	e020      	b.n	80034b0 <HAL_RCC_OscConfig+0x534>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	23a0      	movs	r3, #160	; 0xa0
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	429a      	cmp	r2, r3
 8003478:	d10e      	bne.n	8003498 <HAL_RCC_OscConfig+0x51c>
 800347a:	4b62      	ldr	r3, [pc, #392]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800347c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800347e:	4b61      	ldr	r3, [pc, #388]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003480:	2180      	movs	r1, #128	; 0x80
 8003482:	00c9      	lsls	r1, r1, #3
 8003484:	430a      	orrs	r2, r1
 8003486:	651a      	str	r2, [r3, #80]	; 0x50
 8003488:	4b5e      	ldr	r3, [pc, #376]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800348a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800348c:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	0049      	lsls	r1, r1, #1
 8003492:	430a      	orrs	r2, r1
 8003494:	651a      	str	r2, [r3, #80]	; 0x50
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0x534>
 8003498:	4b5a      	ldr	r3, [pc, #360]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800349a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800349c:	4b59      	ldr	r3, [pc, #356]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800349e:	495b      	ldr	r1, [pc, #364]	; (800360c <HAL_RCC_OscConfig+0x690>)
 80034a0:	400a      	ands	r2, r1
 80034a2:	651a      	str	r2, [r3, #80]	; 0x50
 80034a4:	4b57      	ldr	r3, [pc, #348]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80034a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034a8:	4b56      	ldr	r3, [pc, #344]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80034aa:	495a      	ldr	r1, [pc, #360]	; (8003614 <HAL_RCC_OscConfig+0x698>)
 80034ac:	400a      	ands	r2, r1
 80034ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b8:	f7fd ff1e 	bl	80012f8 <HAL_GetTick>
 80034bc:	0003      	movs	r3, r0
 80034be:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034c0:	e009      	b.n	80034d6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fd ff19 	bl	80012f8 <HAL_GetTick>
 80034c6:	0002      	movs	r2, r0
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	4a52      	ldr	r2, [pc, #328]	; (8003618 <HAL_RCC_OscConfig+0x69c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e11b      	b.n	800370e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034d6:	4b4b      	ldr	r3, [pc, #300]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80034d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4013      	ands	r3, r2
 80034e0:	d0ef      	beq.n	80034c2 <HAL_RCC_OscConfig+0x546>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7fd ff08 	bl	80012f8 <HAL_GetTick>
 80034e8:	0003      	movs	r3, r0
 80034ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034ec:	e009      	b.n	8003502 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fd ff03 	bl	80012f8 <HAL_GetTick>
 80034f2:	0002      	movs	r2, r0
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	4a47      	ldr	r2, [pc, #284]	; (8003618 <HAL_RCC_OscConfig+0x69c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e105      	b.n	800370e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003502:	4b40      	ldr	r3, [pc, #256]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4013      	ands	r3, r2
 800350c:	d1ef      	bne.n	80034ee <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800350e:	2323      	movs	r3, #35	; 0x23
 8003510:	18fb      	adds	r3, r7, r3
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d105      	bne.n	8003524 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003518:	4b3a      	ldr	r3, [pc, #232]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800351a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800351c:	4b39      	ldr	r3, [pc, #228]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800351e:	493f      	ldr	r1, [pc, #252]	; (800361c <HAL_RCC_OscConfig+0x6a0>)
 8003520:	400a      	ands	r2, r1
 8003522:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2220      	movs	r2, #32
 800352a:	4013      	ands	r3, r2
 800352c:	d049      	beq.n	80035c2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d026      	beq.n	8003584 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003536:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	4b32      	ldr	r3, [pc, #200]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800353c:	2101      	movs	r1, #1
 800353e:	430a      	orrs	r2, r1
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	4b30      	ldr	r3, [pc, #192]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003546:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003548:	2101      	movs	r1, #1
 800354a:	430a      	orrs	r2, r1
 800354c:	635a      	str	r2, [r3, #52]	; 0x34
 800354e:	4b34      	ldr	r3, [pc, #208]	; (8003620 <HAL_RCC_OscConfig+0x6a4>)
 8003550:	6a1a      	ldr	r2, [r3, #32]
 8003552:	4b33      	ldr	r3, [pc, #204]	; (8003620 <HAL_RCC_OscConfig+0x6a4>)
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	0189      	lsls	r1, r1, #6
 8003558:	430a      	orrs	r2, r1
 800355a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fd fecc 	bl	80012f8 <HAL_GetTick>
 8003560:	0003      	movs	r3, r0
 8003562:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003566:	f7fd fec7 	bl	80012f8 <HAL_GetTick>
 800356a:	0002      	movs	r2, r0
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0ca      	b.n	800370e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003578:	4b22      	ldr	r3, [pc, #136]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2202      	movs	r2, #2
 800357e:	4013      	ands	r3, r2
 8003580:	d0f1      	beq.n	8003566 <HAL_RCC_OscConfig+0x5ea>
 8003582:	e01e      	b.n	80035c2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003584:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 800358a:	2101      	movs	r1, #1
 800358c:	438a      	bics	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	4b23      	ldr	r3, [pc, #140]	; (8003620 <HAL_RCC_OscConfig+0x6a4>)
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	4b22      	ldr	r3, [pc, #136]	; (8003620 <HAL_RCC_OscConfig+0x6a4>)
 8003596:	4923      	ldr	r1, [pc, #140]	; (8003624 <HAL_RCC_OscConfig+0x6a8>)
 8003598:	400a      	ands	r2, r1
 800359a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fd feac 	bl	80012f8 <HAL_GetTick>
 80035a0:	0003      	movs	r3, r0
 80035a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035a6:	f7fd fea7 	bl	80012f8 <HAL_GetTick>
 80035aa:	0002      	movs	r2, r0
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e0aa      	b.n	800370e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035b8:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2202      	movs	r2, #2
 80035be:	4013      	ands	r3, r2
 80035c0:	d1f1      	bne.n	80035a6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d100      	bne.n	80035cc <HAL_RCC_OscConfig+0x650>
 80035ca:	e09f      	b.n	800370c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d100      	bne.n	80035d4 <HAL_RCC_OscConfig+0x658>
 80035d2:	e078      	b.n	80036c6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d159      	bne.n	8003690 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b08      	ldr	r3, [pc, #32]	; (8003604 <HAL_RCC_OscConfig+0x688>)
 80035e2:	4911      	ldr	r1, [pc, #68]	; (8003628 <HAL_RCC_OscConfig+0x6ac>)
 80035e4:	400a      	ands	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fd fe86 	bl	80012f8 <HAL_GetTick>
 80035ec:	0003      	movs	r3, r0
 80035ee:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035f0:	e01c      	b.n	800362c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fd fe81 	bl	80012f8 <HAL_GetTick>
 80035f6:	0002      	movs	r2, r0
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d915      	bls.n	800362c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e084      	b.n	800370e <HAL_RCC_OscConfig+0x792>
 8003604:	40021000 	.word	0x40021000
 8003608:	ffff1fff 	.word	0xffff1fff
 800360c:	fffffeff 	.word	0xfffffeff
 8003610:	40007000 	.word	0x40007000
 8003614:	fffffbff 	.word	0xfffffbff
 8003618:	00001388 	.word	0x00001388
 800361c:	efffffff 	.word	0xefffffff
 8003620:	40010000 	.word	0x40010000
 8003624:	ffffdfff 	.word	0xffffdfff
 8003628:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800362c:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <HAL_RCC_OscConfig+0x79c>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	049b      	lsls	r3, r3, #18
 8003634:	4013      	ands	r3, r2
 8003636:	d1dc      	bne.n	80035f2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003638:	4b37      	ldr	r3, [pc, #220]	; (8003718 <HAL_RCC_OscConfig+0x79c>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a37      	ldr	r2, [pc, #220]	; (800371c <HAL_RCC_OscConfig+0x7a0>)
 800363e:	4013      	ands	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003650:	431a      	orrs	r2, r3
 8003652:	4b31      	ldr	r3, [pc, #196]	; (8003718 <HAL_RCC_OscConfig+0x79c>)
 8003654:	430a      	orrs	r2, r1
 8003656:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003658:	4b2f      	ldr	r3, [pc, #188]	; (8003718 <HAL_RCC_OscConfig+0x79c>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <HAL_RCC_OscConfig+0x79c>)
 800365e:	2180      	movs	r1, #128	; 0x80
 8003660:	0449      	lsls	r1, r1, #17
 8003662:	430a      	orrs	r2, r1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fd fe47 	bl	80012f8 <HAL_GetTick>
 800366a:	0003      	movs	r3, r0
 800366c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003670:	f7fd fe42 	bl	80012f8 <HAL_GetTick>
 8003674:	0002      	movs	r2, r0
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e045      	b.n	800370e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003682:	4b25      	ldr	r3, [pc, #148]	; (8003718 <HAL_RCC_OscConfig+0x79c>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	2380      	movs	r3, #128	; 0x80
 8003688:	049b      	lsls	r3, r3, #18
 800368a:	4013      	ands	r3, r2
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x6f4>
 800368e:	e03d      	b.n	800370c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003690:	4b21      	ldr	r3, [pc, #132]	; (8003718 <HAL_RCC_OscConfig+0x79c>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b20      	ldr	r3, [pc, #128]	; (8003718 <HAL_RCC_OscConfig+0x79c>)
 8003696:	4922      	ldr	r1, [pc, #136]	; (8003720 <HAL_RCC_OscConfig+0x7a4>)
 8003698:	400a      	ands	r2, r1
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fd fe2c 	bl	80012f8 <HAL_GetTick>
 80036a0:	0003      	movs	r3, r0
 80036a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fd fe27 	bl	80012f8 <HAL_GetTick>
 80036aa:	0002      	movs	r2, r0
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e02a      	b.n	800370e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036b8:	4b17      	ldr	r3, [pc, #92]	; (8003718 <HAL_RCC_OscConfig+0x79c>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	049b      	lsls	r3, r3, #18
 80036c0:	4013      	ands	r3, r2
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x72a>
 80036c4:	e022      	b.n	800370c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e01d      	b.n	800370e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <HAL_RCC_OscConfig+0x79c>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	025b      	lsls	r3, r3, #9
 80036de:	401a      	ands	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d10f      	bne.n	8003708 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	23f0      	movs	r3, #240	; 0xf0
 80036ec:	039b      	lsls	r3, r3, #14
 80036ee:	401a      	ands	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d107      	bne.n	8003708 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	23c0      	movs	r3, #192	; 0xc0
 80036fc:	041b      	lsls	r3, r3, #16
 80036fe:	401a      	ands	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b00a      	add	sp, #40	; 0x28
 8003714:	bdb0      	pop	{r4, r5, r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	40021000 	.word	0x40021000
 800371c:	ff02ffff 	.word	0xff02ffff
 8003720:	feffffff 	.word	0xfeffffff

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b5b0      	push	{r4, r5, r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e128      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b96      	ldr	r3, [pc, #600]	; (8003994 <HAL_RCC_ClockConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2201      	movs	r2, #1
 800373e:	4013      	ands	r3, r2
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d91e      	bls.n	8003784 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b93      	ldr	r3, [pc, #588]	; (8003994 <HAL_RCC_ClockConfig+0x270>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2201      	movs	r2, #1
 800374c:	4393      	bics	r3, r2
 800374e:	0019      	movs	r1, r3
 8003750:	4b90      	ldr	r3, [pc, #576]	; (8003994 <HAL_RCC_ClockConfig+0x270>)
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003758:	f7fd fdce 	bl	80012f8 <HAL_GetTick>
 800375c:	0003      	movs	r3, r0
 800375e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003760:	e009      	b.n	8003776 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003762:	f7fd fdc9 	bl	80012f8 <HAL_GetTick>
 8003766:	0002      	movs	r2, r0
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	4a8a      	ldr	r2, [pc, #552]	; (8003998 <HAL_RCC_ClockConfig+0x274>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e109      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b87      	ldr	r3, [pc, #540]	; (8003994 <HAL_RCC_ClockConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2201      	movs	r2, #1
 800377c:	4013      	ands	r3, r2
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d1ee      	bne.n	8003762 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2202      	movs	r2, #2
 800378a:	4013      	ands	r3, r2
 800378c:	d009      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378e:	4b83      	ldr	r3, [pc, #524]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	22f0      	movs	r2, #240	; 0xf0
 8003794:	4393      	bics	r3, r2
 8003796:	0019      	movs	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	4b7f      	ldr	r3, [pc, #508]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 800379e:	430a      	orrs	r2, r1
 80037a0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2201      	movs	r2, #1
 80037a8:	4013      	ands	r3, r2
 80037aa:	d100      	bne.n	80037ae <HAL_RCC_ClockConfig+0x8a>
 80037ac:	e089      	b.n	80038c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037b6:	4b79      	ldr	r3, [pc, #484]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	029b      	lsls	r3, r3, #10
 80037be:	4013      	ands	r3, r2
 80037c0:	d120      	bne.n	8003804 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0e1      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037ce:	4b73      	ldr	r3, [pc, #460]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	049b      	lsls	r3, r3, #18
 80037d6:	4013      	ands	r3, r2
 80037d8:	d114      	bne.n	8003804 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0d5      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d106      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037e6:	4b6d      	ldr	r3, [pc, #436]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2204      	movs	r2, #4
 80037ec:	4013      	ands	r3, r2
 80037ee:	d109      	bne.n	8003804 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0ca      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037f4:	4b69      	ldr	r3, [pc, #420]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4013      	ands	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0c2      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003804:	4b65      	ldr	r3, [pc, #404]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	2203      	movs	r2, #3
 800380a:	4393      	bics	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	4b62      	ldr	r3, [pc, #392]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 8003814:	430a      	orrs	r2, r1
 8003816:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003818:	f7fd fd6e 	bl	80012f8 <HAL_GetTick>
 800381c:	0003      	movs	r3, r0
 800381e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d111      	bne.n	800384c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003828:	e009      	b.n	800383e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382a:	f7fd fd65 	bl	80012f8 <HAL_GetTick>
 800382e:	0002      	movs	r2, r0
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	4a58      	ldr	r2, [pc, #352]	; (8003998 <HAL_RCC_ClockConfig+0x274>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0a5      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800383e:	4b57      	ldr	r3, [pc, #348]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	220c      	movs	r2, #12
 8003844:	4013      	ands	r3, r2
 8003846:	2b08      	cmp	r3, #8
 8003848:	d1ef      	bne.n	800382a <HAL_RCC_ClockConfig+0x106>
 800384a:	e03a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d111      	bne.n	8003878 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003854:	e009      	b.n	800386a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003856:	f7fd fd4f 	bl	80012f8 <HAL_GetTick>
 800385a:	0002      	movs	r2, r0
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	4a4d      	ldr	r2, [pc, #308]	; (8003998 <HAL_RCC_ClockConfig+0x274>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e08f      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800386a:	4b4c      	ldr	r3, [pc, #304]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	220c      	movs	r2, #12
 8003870:	4013      	ands	r3, r2
 8003872:	2b0c      	cmp	r3, #12
 8003874:	d1ef      	bne.n	8003856 <HAL_RCC_ClockConfig+0x132>
 8003876:	e024      	b.n	80038c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d11b      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003880:	e009      	b.n	8003896 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003882:	f7fd fd39 	bl	80012f8 <HAL_GetTick>
 8003886:	0002      	movs	r2, r0
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	4a42      	ldr	r2, [pc, #264]	; (8003998 <HAL_RCC_ClockConfig+0x274>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e079      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003896:	4b41      	ldr	r3, [pc, #260]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	220c      	movs	r2, #12
 800389c:	4013      	ands	r3, r2
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d1ef      	bne.n	8003882 <HAL_RCC_ClockConfig+0x15e>
 80038a2:	e00e      	b.n	80038c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a4:	f7fd fd28 	bl	80012f8 <HAL_GetTick>
 80038a8:	0002      	movs	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	4a3a      	ldr	r2, [pc, #232]	; (8003998 <HAL_RCC_ClockConfig+0x274>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e068      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80038b8:	4b38      	ldr	r3, [pc, #224]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	220c      	movs	r2, #12
 80038be:	4013      	ands	r3, r2
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c2:	4b34      	ldr	r3, [pc, #208]	; (8003994 <HAL_RCC_ClockConfig+0x270>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2201      	movs	r2, #1
 80038c8:	4013      	ands	r3, r2
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d21e      	bcs.n	800390e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d0:	4b30      	ldr	r3, [pc, #192]	; (8003994 <HAL_RCC_ClockConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2201      	movs	r2, #1
 80038d6:	4393      	bics	r3, r2
 80038d8:	0019      	movs	r1, r3
 80038da:	4b2e      	ldr	r3, [pc, #184]	; (8003994 <HAL_RCC_ClockConfig+0x270>)
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038e2:	f7fd fd09 	bl	80012f8 <HAL_GetTick>
 80038e6:	0003      	movs	r3, r0
 80038e8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	e009      	b.n	8003900 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ec:	f7fd fd04 	bl	80012f8 <HAL_GetTick>
 80038f0:	0002      	movs	r2, r0
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	4a28      	ldr	r2, [pc, #160]	; (8003998 <HAL_RCC_ClockConfig+0x274>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e044      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003900:	4b24      	ldr	r3, [pc, #144]	; (8003994 <HAL_RCC_ClockConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2201      	movs	r2, #1
 8003906:	4013      	ands	r3, r2
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d1ee      	bne.n	80038ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2204      	movs	r2, #4
 8003914:	4013      	ands	r3, r2
 8003916:	d009      	beq.n	800392c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003918:	4b20      	ldr	r3, [pc, #128]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a20      	ldr	r2, [pc, #128]	; (80039a0 <HAL_RCC_ClockConfig+0x27c>)
 800391e:	4013      	ands	r3, r2
 8003920:	0019      	movs	r1, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 8003928:	430a      	orrs	r2, r1
 800392a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2208      	movs	r2, #8
 8003932:	4013      	ands	r3, r2
 8003934:	d00a      	beq.n	800394c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003936:	4b19      	ldr	r3, [pc, #100]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_RCC_ClockConfig+0x280>)
 800393c:	4013      	ands	r3, r2
 800393e:	0019      	movs	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	00da      	lsls	r2, r3, #3
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 8003948:	430a      	orrs	r2, r1
 800394a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800394c:	f000 f832 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003950:	0001      	movs	r1, r0
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <HAL_RCC_ClockConfig+0x278>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	220f      	movs	r2, #15
 800395a:	4013      	ands	r3, r2
 800395c:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <HAL_RCC_ClockConfig+0x284>)
 800395e:	5cd3      	ldrb	r3, [r2, r3]
 8003960:	000a      	movs	r2, r1
 8003962:	40da      	lsrs	r2, r3
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_RCC_ClockConfig+0x288>)
 8003966:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <HAL_RCC_ClockConfig+0x28c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	250b      	movs	r5, #11
 800396e:	197c      	adds	r4, r7, r5
 8003970:	0018      	movs	r0, r3
 8003972:	f7fd fc7b 	bl	800126c <HAL_InitTick>
 8003976:	0003      	movs	r3, r0
 8003978:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800397a:	197b      	adds	r3, r7, r5
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003982:	197b      	adds	r3, r7, r5
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	e000      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b004      	add	sp, #16
 8003990:	bdb0      	pop	{r4, r5, r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	40022000 	.word	0x40022000
 8003998:	00001388 	.word	0x00001388
 800399c:	40021000 	.word	0x40021000
 80039a0:	fffff8ff 	.word	0xfffff8ff
 80039a4:	ffffc7ff 	.word	0xffffc7ff
 80039a8:	080053ac 	.word	0x080053ac
 80039ac:	20000008 	.word	0x20000008
 80039b0:	2000000c 	.word	0x2000000c

080039b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	b5b0      	push	{r4, r5, r7, lr}
 80039b6:	b08e      	sub	sp, #56	; 0x38
 80039b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80039ba:	4b4c      	ldr	r3, [pc, #304]	; (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c2:	230c      	movs	r3, #12
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d014      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x40>
 80039ca:	d900      	bls.n	80039ce <HAL_RCC_GetSysClockFreq+0x1a>
 80039cc:	e07b      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x112>
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d002      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x24>
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d00b      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x3a>
 80039d6:	e076      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80039d8:	4b44      	ldr	r3, [pc, #272]	; (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2210      	movs	r2, #16
 80039de:	4013      	ands	r3, r2
 80039e0:	d002      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80039e2:	4b43      	ldr	r3, [pc, #268]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80039e4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80039e6:	e07c      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80039e8:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x140>)
 80039ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039ec:	e079      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039ee:	4b42      	ldr	r3, [pc, #264]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x144>)
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039f2:	e076      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f6:	0c9a      	lsrs	r2, r3, #18
 80039f8:	230f      	movs	r3, #15
 80039fa:	401a      	ands	r2, r3
 80039fc:	4b3f      	ldr	r3, [pc, #252]	; (8003afc <HAL_RCC_GetSysClockFreq+0x148>)
 80039fe:	5c9b      	ldrb	r3, [r3, r2]
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	0d9a      	lsrs	r2, r3, #22
 8003a06:	2303      	movs	r3, #3
 8003a08:	4013      	ands	r3, r2
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a0e:	4b37      	ldr	r3, [pc, #220]	; (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	025b      	lsls	r3, r3, #9
 8003a16:	4013      	ands	r3, r2
 8003a18:	d01a      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	4a35      	ldr	r2, [pc, #212]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003a24:	2300      	movs	r3, #0
 8003a26:	69b8      	ldr	r0, [r7, #24]
 8003a28:	69f9      	ldr	r1, [r7, #28]
 8003a2a:	f7fc fc2b 	bl	8000284 <__aeabi_lmul>
 8003a2e:	0002      	movs	r2, r0
 8003a30:	000b      	movs	r3, r1
 8003a32:	0010      	movs	r0, r2
 8003a34:	0019      	movs	r1, r3
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f7fc fbff 	bl	8000244 <__aeabi_uldivmod>
 8003a46:	0002      	movs	r2, r0
 8003a48:	000b      	movs	r3, r1
 8003a4a:	0013      	movs	r3, r2
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4e:	e037      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a50:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2210      	movs	r2, #16
 8003a56:	4013      	ands	r3, r2
 8003a58:	d01a      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	4a23      	ldr	r2, [pc, #140]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a64:	2300      	movs	r3, #0
 8003a66:	68b8      	ldr	r0, [r7, #8]
 8003a68:	68f9      	ldr	r1, [r7, #12]
 8003a6a:	f7fc fc0b 	bl	8000284 <__aeabi_lmul>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	000b      	movs	r3, r1
 8003a72:	0010      	movs	r0, r2
 8003a74:	0019      	movs	r1, r3
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f7fc fbdf 	bl	8000244 <__aeabi_uldivmod>
 8003a86:	0002      	movs	r2, r0
 8003a88:	000b      	movs	r3, r1
 8003a8a:	0013      	movs	r3, r2
 8003a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a8e:	e017      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a92:	0018      	movs	r0, r3
 8003a94:	2300      	movs	r3, #0
 8003a96:	0019      	movs	r1, r3
 8003a98:	4a16      	ldr	r2, [pc, #88]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x140>)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f7fc fbf2 	bl	8000284 <__aeabi_lmul>
 8003aa0:	0002      	movs	r2, r0
 8003aa2:	000b      	movs	r3, r1
 8003aa4:	0010      	movs	r0, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	001c      	movs	r4, r3
 8003aac:	2300      	movs	r3, #0
 8003aae:	001d      	movs	r5, r3
 8003ab0:	0022      	movs	r2, r4
 8003ab2:	002b      	movs	r3, r5
 8003ab4:	f7fc fbc6 	bl	8000244 <__aeabi_uldivmod>
 8003ab8:	0002      	movs	r2, r0
 8003aba:	000b      	movs	r3, r1
 8003abc:	0013      	movs	r3, r2
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ac4:	e00d      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	0b5b      	lsrs	r3, r3, #13
 8003acc:	2207      	movs	r2, #7
 8003ace:	4013      	ands	r3, r2
 8003ad0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	0212      	lsls	r2, r2, #8
 8003ada:	409a      	lsls	r2, r3
 8003adc:	0013      	movs	r3, r2
 8003ade:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ae0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b00e      	add	sp, #56	; 0x38
 8003aea:	bdb0      	pop	{r4, r5, r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	003d0900 	.word	0x003d0900
 8003af4:	00f42400 	.word	0x00f42400
 8003af8:	007a1200 	.word	0x007a1200
 8003afc:	080053c4 	.word	0x080053c4

08003b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b04:	4b02      	ldr	r3, [pc, #8]	; (8003b10 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	20000008 	.word	0x20000008

08003b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b18:	f7ff fff2 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b1c:	0001      	movs	r1, r0
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	2207      	movs	r2, #7
 8003b26:	4013      	ands	r3, r2
 8003b28:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b2a:	5cd3      	ldrb	r3, [r2, r3]
 8003b2c:	40d9      	lsrs	r1, r3
 8003b2e:	000b      	movs	r3, r1
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	080053bc 	.word	0x080053bc

08003b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b44:	f7ff ffdc 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b48:	0001      	movs	r1, r0
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	0adb      	lsrs	r3, r3, #11
 8003b50:	2207      	movs	r2, #7
 8003b52:	4013      	ands	r3, r2
 8003b54:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	40d9      	lsrs	r1, r3
 8003b5a:	000b      	movs	r3, r1
}
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	40021000 	.word	0x40021000
 8003b68:	080053bc 	.word	0x080053bc

08003b6c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003b74:	2317      	movs	r3, #23
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2220      	movs	r2, #32
 8003b82:	4013      	ands	r3, r2
 8003b84:	d106      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d100      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003b92:	e104      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b94:	4bb9      	ldr	r3, [pc, #740]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	055b      	lsls	r3, r3, #21
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d10a      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba0:	4bb6      	ldr	r3, [pc, #728]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba4:	4bb5      	ldr	r3, [pc, #724]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ba6:	2180      	movs	r1, #128	; 0x80
 8003ba8:	0549      	lsls	r1, r1, #21
 8003baa:	430a      	orrs	r2, r1
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003bae:	2317      	movs	r3, #23
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb6:	4bb2      	ldr	r3, [pc, #712]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d11a      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc2:	4baf      	ldr	r3, [pc, #700]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4bae      	ldr	r3, [pc, #696]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003bc8:	2180      	movs	r1, #128	; 0x80
 8003bca:	0049      	lsls	r1, r1, #1
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd0:	f7fd fb92 	bl	80012f8 <HAL_GetTick>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	e008      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bda:	f7fd fb8d 	bl	80012f8 <HAL_GetTick>
 8003bde:	0002      	movs	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b64      	cmp	r3, #100	; 0x64
 8003be6:	d901      	bls.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e143      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bec:	4ba4      	ldr	r3, [pc, #656]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003bf8:	4ba0      	ldr	r3, [pc, #640]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	23c0      	movs	r3, #192	; 0xc0
 8003bfe:	039b      	lsls	r3, r3, #14
 8003c00:	4013      	ands	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	23c0      	movs	r3, #192	; 0xc0
 8003c0a:	039b      	lsls	r3, r3, #14
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d107      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	23c0      	movs	r3, #192	; 0xc0
 8003c1a:	039b      	lsls	r3, r3, #14
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d013      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	23c0      	movs	r3, #192	; 0xc0
 8003c2a:	029b      	lsls	r3, r3, #10
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	23c0      	movs	r3, #192	; 0xc0
 8003c30:	029b      	lsls	r3, r3, #10
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d10a      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003c36:	4b91      	ldr	r3, [pc, #580]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	029b      	lsls	r3, r3, #10
 8003c3e:	401a      	ands	r2, r3
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	029b      	lsls	r3, r3, #10
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d101      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e113      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003c4c:	4b8b      	ldr	r3, [pc, #556]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c50:	23c0      	movs	r3, #192	; 0xc0
 8003c52:	029b      	lsls	r3, r3, #10
 8003c54:	4013      	ands	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d049      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	23c0      	movs	r3, #192	; 0xc0
 8003c64:	029b      	lsls	r3, r3, #10
 8003c66:	4013      	ands	r3, r2
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d004      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2220      	movs	r2, #32
 8003c74:	4013      	ands	r3, r2
 8003c76:	d10d      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	23c0      	movs	r3, #192	; 0xc0
 8003c7e:	029b      	lsls	r3, r3, #10
 8003c80:	4013      	ands	r3, r2
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d034      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4013      	ands	r3, r2
 8003c92:	d02e      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003c94:	4b79      	ldr	r3, [pc, #484]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c98:	4a7a      	ldr	r2, [pc, #488]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c9e:	4b77      	ldr	r3, [pc, #476]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ca2:	4b76      	ldr	r3, [pc, #472]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ca4:	2180      	movs	r1, #128	; 0x80
 8003ca6:	0309      	lsls	r1, r1, #12
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cac:	4b73      	ldr	r3, [pc, #460]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cb0:	4b72      	ldr	r3, [pc, #456]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cb2:	4975      	ldr	r1, [pc, #468]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003cb8:	4b70      	ldr	r3, [pc, #448]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d014      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fd fb16 	bl	80012f8 <HAL_GetTick>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cd0:	e009      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fd fb11 	bl	80012f8 <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	4a6b      	ldr	r2, [pc, #428]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e0c6      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ce6:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d0ef      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d01f      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	23c0      	movs	r3, #192	; 0xc0
 8003d04:	029b      	lsls	r3, r3, #10
 8003d06:	401a      	ands	r2, r3
 8003d08:	23c0      	movs	r3, #192	; 0xc0
 8003d0a:	029b      	lsls	r3, r3, #10
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d10c      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003d10:	4b5a      	ldr	r3, [pc, #360]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a5e      	ldr	r2, [pc, #376]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	23c0      	movs	r3, #192	; 0xc0
 8003d20:	039b      	lsls	r3, r3, #14
 8003d22:	401a      	ands	r2, r3
 8003d24:	4b55      	ldr	r3, [pc, #340]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d26:	430a      	orrs	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	4b54      	ldr	r3, [pc, #336]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d2c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	23c0      	movs	r3, #192	; 0xc0
 8003d34:	029b      	lsls	r3, r3, #10
 8003d36:	401a      	ands	r2, r3
 8003d38:	4b50      	ldr	r3, [pc, #320]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2220      	movs	r2, #32
 8003d44:	4013      	ands	r3, r2
 8003d46:	d01f      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	23c0      	movs	r3, #192	; 0xc0
 8003d4e:	029b      	lsls	r3, r3, #10
 8003d50:	401a      	ands	r2, r3
 8003d52:	23c0      	movs	r3, #192	; 0xc0
 8003d54:	029b      	lsls	r3, r3, #10
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d5a:	4b48      	ldr	r3, [pc, #288]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a4c      	ldr	r2, [pc, #304]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	0019      	movs	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	23c0      	movs	r3, #192	; 0xc0
 8003d6a:	039b      	lsls	r3, r3, #14
 8003d6c:	401a      	ands	r2, r3
 8003d6e:	4b43      	ldr	r3, [pc, #268]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d70:	430a      	orrs	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d76:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	23c0      	movs	r3, #192	; 0xc0
 8003d7e:	029b      	lsls	r3, r3, #10
 8003d80:	401a      	ands	r2, r3
 8003d82:	4b3e      	ldr	r3, [pc, #248]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d84:	430a      	orrs	r2, r1
 8003d86:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d88:	2317      	movs	r3, #23
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d92:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d96:	4b39      	ldr	r3, [pc, #228]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d98:	493e      	ldr	r1, [pc, #248]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003d9a:	400a      	ands	r2, r1
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2201      	movs	r2, #1
 8003da4:	4013      	ands	r3, r2
 8003da6:	d009      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003da8:	4b34      	ldr	r3, [pc, #208]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dac:	2203      	movs	r2, #3
 8003dae:	4393      	bics	r3, r2
 8003db0:	0019      	movs	r1, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	4b31      	ldr	r3, [pc, #196]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003db8:	430a      	orrs	r2, r1
 8003dba:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d009      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dc6:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dca:	220c      	movs	r2, #12
 8003dcc:	4393      	bics	r3, r2
 8003dce:	0019      	movs	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2204      	movs	r2, #4
 8003de0:	4013      	ands	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	4a2b      	ldr	r2, [pc, #172]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	0019      	movs	r1, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695a      	ldr	r2, [r3, #20]
 8003df2:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003df4:	430a      	orrs	r2, r1
 8003df6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d009      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e06:	4a25      	ldr	r2, [pc, #148]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e12:	430a      	orrs	r2, r1
 8003e14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e22:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e26:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e32:	430a      	orrs	r2, r1
 8003e34:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2240      	movs	r2, #64	; 0x40
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e44:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	0019      	movs	r1, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e50:	430a      	orrs	r2, r1
 8003e52:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2280      	movs	r2, #128	; 0x80
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	4a10      	ldr	r2, [pc, #64]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	0019      	movs	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1a      	ldr	r2, [r3, #32]
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b006      	add	sp, #24
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40007000 	.word	0x40007000
 8003e84:	fffcffff 	.word	0xfffcffff
 8003e88:	fff7ffff 	.word	0xfff7ffff
 8003e8c:	00001388 	.word	0x00001388
 8003e90:	ffcfffff 	.word	0xffcfffff
 8003e94:	efffffff 	.word	0xefffffff
 8003e98:	fffff3ff 	.word	0xfffff3ff
 8003e9c:	ffffcfff 	.word	0xffffcfff
 8003ea0:	fbffffff 	.word	0xfbffffff
 8003ea4:	fff3ffff 	.word	0xfff3ffff

08003ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e044      	b.n	8003f44 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d107      	bne.n	8003ed2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2278      	movs	r2, #120	; 0x78
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f7fd f8e3 	bl	8001098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2224      	movs	r2, #36	; 0x24
 8003ed6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	438a      	bics	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	0018      	movs	r0, r3
 8003eec:	f000 f8d0 	bl	8004090 <UART_SetConfig>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e024      	b.n	8003f44 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	0018      	movs	r0, r3
 8003f06:	f000 fb61 	bl	80045cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	490d      	ldr	r1, [pc, #52]	; (8003f4c <HAL_UART_Init+0xa4>)
 8003f16:	400a      	ands	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	212a      	movs	r1, #42	; 0x2a
 8003f26:	438a      	bics	r2, r1
 8003f28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2101      	movs	r1, #1
 8003f36:	430a      	orrs	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f000 fbf9 	bl	8004734 <UART_CheckIdleState>
 8003f42:	0003      	movs	r3, r0
}
 8003f44:	0018      	movs	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b002      	add	sp, #8
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	ffffb7ff 	.word	0xffffb7ff

08003f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	1dbb      	adds	r3, r7, #6
 8003f5e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d000      	beq.n	8003f6a <HAL_UART_Transmit+0x1a>
 8003f68:	e08c      	b.n	8004084 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_UART_Transmit+0x28>
 8003f70:	1dbb      	adds	r3, r7, #6
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e084      	b.n	8004086 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	015b      	lsls	r3, r3, #5
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d109      	bne.n	8003f9c <HAL_UART_Transmit+0x4c>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2201      	movs	r2, #1
 8003f94:	4013      	ands	r3, r2
 8003f96:	d001      	beq.n	8003f9c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e074      	b.n	8004086 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2284      	movs	r2, #132	; 0x84
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2221      	movs	r2, #33	; 0x21
 8003fa8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003faa:	f7fd f9a5 	bl	80012f8 <HAL_GetTick>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1dba      	adds	r2, r7, #6
 8003fb6:	2150      	movs	r1, #80	; 0x50
 8003fb8:	8812      	ldrh	r2, [r2, #0]
 8003fba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1dba      	adds	r2, r7, #6
 8003fc0:	2152      	movs	r1, #82	; 0x52
 8003fc2:	8812      	ldrh	r2, [r2, #0]
 8003fc4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	015b      	lsls	r3, r3, #5
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d108      	bne.n	8003fe4 <HAL_UART_Transmit+0x94>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d104      	bne.n	8003fe4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	e003      	b.n	8003fec <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fec:	e02f      	b.n	800404e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	0013      	movs	r3, r2
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2180      	movs	r1, #128	; 0x80
 8003ffc:	f000 fc42 	bl	8004884 <UART_WaitOnFlagUntilTimeout>
 8004000:	1e03      	subs	r3, r0, #0
 8004002:	d004      	beq.n	800400e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e03b      	b.n	8004086 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	001a      	movs	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	05d2      	lsls	r2, r2, #23
 8004020:	0dd2      	lsrs	r2, r2, #23
 8004022:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	3302      	adds	r3, #2
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e007      	b.n	800403c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	781a      	ldrb	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3301      	adds	r3, #1
 800403a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2252      	movs	r2, #82	; 0x52
 8004040:	5a9b      	ldrh	r3, [r3, r2]
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b299      	uxth	r1, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2252      	movs	r2, #82	; 0x52
 800404c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2252      	movs	r2, #82	; 0x52
 8004052:	5a9b      	ldrh	r3, [r3, r2]
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1c9      	bne.n	8003fee <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	0013      	movs	r3, r2
 8004064:	2200      	movs	r2, #0
 8004066:	2140      	movs	r1, #64	; 0x40
 8004068:	f000 fc0c 	bl	8004884 <UART_WaitOnFlagUntilTimeout>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d004      	beq.n	800407a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e005      	b.n	8004086 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e000      	b.n	8004086 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
  }
}
 8004086:	0018      	movs	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	b008      	add	sp, #32
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004090:	b5b0      	push	{r4, r5, r7, lr}
 8004092:	b08e      	sub	sp, #56	; 0x38
 8004094:	af00      	add	r7, sp, #0
 8004096:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004098:	231a      	movs	r3, #26
 800409a:	2218      	movs	r2, #24
 800409c:	189b      	adds	r3, r3, r2
 800409e:	19db      	adds	r3, r3, r7
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4ac3      	ldr	r2, [pc, #780]	; (80043d0 <UART_SetConfig+0x340>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	0019      	movs	r1, r3
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ce:	430a      	orrs	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4abe      	ldr	r2, [pc, #760]	; (80043d4 <UART_SetConfig+0x344>)
 80040da:	4013      	ands	r3, r2
 80040dc:	0019      	movs	r1, r3
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4ab8      	ldr	r2, [pc, #736]	; (80043d8 <UART_SetConfig+0x348>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004100:	4313      	orrs	r3, r2
 8004102:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	4ab4      	ldr	r2, [pc, #720]	; (80043dc <UART_SetConfig+0x34c>)
 800410c:	4013      	ands	r3, r2
 800410e:	0019      	movs	r1, r3
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004116:	430a      	orrs	r2, r1
 8004118:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4ab0      	ldr	r2, [pc, #704]	; (80043e0 <UART_SetConfig+0x350>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d131      	bne.n	8004188 <UART_SetConfig+0xf8>
 8004124:	4baf      	ldr	r3, [pc, #700]	; (80043e4 <UART_SetConfig+0x354>)
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	2203      	movs	r2, #3
 800412a:	4013      	ands	r3, r2
 800412c:	2b03      	cmp	r3, #3
 800412e:	d01d      	beq.n	800416c <UART_SetConfig+0xdc>
 8004130:	d823      	bhi.n	800417a <UART_SetConfig+0xea>
 8004132:	2b02      	cmp	r3, #2
 8004134:	d00c      	beq.n	8004150 <UART_SetConfig+0xc0>
 8004136:	d820      	bhi.n	800417a <UART_SetConfig+0xea>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <UART_SetConfig+0xb2>
 800413c:	2b01      	cmp	r3, #1
 800413e:	d00e      	beq.n	800415e <UART_SetConfig+0xce>
 8004140:	e01b      	b.n	800417a <UART_SetConfig+0xea>
 8004142:	231b      	movs	r3, #27
 8004144:	2218      	movs	r2, #24
 8004146:	189b      	adds	r3, r3, r2
 8004148:	19db      	adds	r3, r3, r7
 800414a:	2201      	movs	r2, #1
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	e0b4      	b.n	80042ba <UART_SetConfig+0x22a>
 8004150:	231b      	movs	r3, #27
 8004152:	2218      	movs	r2, #24
 8004154:	189b      	adds	r3, r3, r2
 8004156:	19db      	adds	r3, r3, r7
 8004158:	2202      	movs	r2, #2
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	e0ad      	b.n	80042ba <UART_SetConfig+0x22a>
 800415e:	231b      	movs	r3, #27
 8004160:	2218      	movs	r2, #24
 8004162:	189b      	adds	r3, r3, r2
 8004164:	19db      	adds	r3, r3, r7
 8004166:	2204      	movs	r2, #4
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e0a6      	b.n	80042ba <UART_SetConfig+0x22a>
 800416c:	231b      	movs	r3, #27
 800416e:	2218      	movs	r2, #24
 8004170:	189b      	adds	r3, r3, r2
 8004172:	19db      	adds	r3, r3, r7
 8004174:	2208      	movs	r2, #8
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e09f      	b.n	80042ba <UART_SetConfig+0x22a>
 800417a:	231b      	movs	r3, #27
 800417c:	2218      	movs	r2, #24
 800417e:	189b      	adds	r3, r3, r2
 8004180:	19db      	adds	r3, r3, r7
 8004182:	2210      	movs	r2, #16
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e098      	b.n	80042ba <UART_SetConfig+0x22a>
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a96      	ldr	r2, [pc, #600]	; (80043e8 <UART_SetConfig+0x358>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d131      	bne.n	80041f6 <UART_SetConfig+0x166>
 8004192:	4b94      	ldr	r3, [pc, #592]	; (80043e4 <UART_SetConfig+0x354>)
 8004194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004196:	220c      	movs	r2, #12
 8004198:	4013      	ands	r3, r2
 800419a:	2b0c      	cmp	r3, #12
 800419c:	d01d      	beq.n	80041da <UART_SetConfig+0x14a>
 800419e:	d823      	bhi.n	80041e8 <UART_SetConfig+0x158>
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d00c      	beq.n	80041be <UART_SetConfig+0x12e>
 80041a4:	d820      	bhi.n	80041e8 <UART_SetConfig+0x158>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <UART_SetConfig+0x120>
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d00e      	beq.n	80041cc <UART_SetConfig+0x13c>
 80041ae:	e01b      	b.n	80041e8 <UART_SetConfig+0x158>
 80041b0:	231b      	movs	r3, #27
 80041b2:	2218      	movs	r2, #24
 80041b4:	189b      	adds	r3, r3, r2
 80041b6:	19db      	adds	r3, r3, r7
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	e07d      	b.n	80042ba <UART_SetConfig+0x22a>
 80041be:	231b      	movs	r3, #27
 80041c0:	2218      	movs	r2, #24
 80041c2:	189b      	adds	r3, r3, r2
 80041c4:	19db      	adds	r3, r3, r7
 80041c6:	2202      	movs	r2, #2
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	e076      	b.n	80042ba <UART_SetConfig+0x22a>
 80041cc:	231b      	movs	r3, #27
 80041ce:	2218      	movs	r2, #24
 80041d0:	189b      	adds	r3, r3, r2
 80041d2:	19db      	adds	r3, r3, r7
 80041d4:	2204      	movs	r2, #4
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	e06f      	b.n	80042ba <UART_SetConfig+0x22a>
 80041da:	231b      	movs	r3, #27
 80041dc:	2218      	movs	r2, #24
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	19db      	adds	r3, r3, r7
 80041e2:	2208      	movs	r2, #8
 80041e4:	701a      	strb	r2, [r3, #0]
 80041e6:	e068      	b.n	80042ba <UART_SetConfig+0x22a>
 80041e8:	231b      	movs	r3, #27
 80041ea:	2218      	movs	r2, #24
 80041ec:	189b      	adds	r3, r3, r2
 80041ee:	19db      	adds	r3, r3, r7
 80041f0:	2210      	movs	r2, #16
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	e061      	b.n	80042ba <UART_SetConfig+0x22a>
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7c      	ldr	r2, [pc, #496]	; (80043ec <UART_SetConfig+0x35c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d106      	bne.n	800420e <UART_SetConfig+0x17e>
 8004200:	231b      	movs	r3, #27
 8004202:	2218      	movs	r2, #24
 8004204:	189b      	adds	r3, r3, r2
 8004206:	19db      	adds	r3, r3, r7
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	e055      	b.n	80042ba <UART_SetConfig+0x22a>
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a77      	ldr	r2, [pc, #476]	; (80043f0 <UART_SetConfig+0x360>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d106      	bne.n	8004226 <UART_SetConfig+0x196>
 8004218:	231b      	movs	r3, #27
 800421a:	2218      	movs	r2, #24
 800421c:	189b      	adds	r3, r3, r2
 800421e:	19db      	adds	r3, r3, r7
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e049      	b.n	80042ba <UART_SetConfig+0x22a>
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6b      	ldr	r2, [pc, #428]	; (80043d8 <UART_SetConfig+0x348>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d13e      	bne.n	80042ae <UART_SetConfig+0x21e>
 8004230:	4b6c      	ldr	r3, [pc, #432]	; (80043e4 <UART_SetConfig+0x354>)
 8004232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004234:	23c0      	movs	r3, #192	; 0xc0
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	4013      	ands	r3, r2
 800423a:	22c0      	movs	r2, #192	; 0xc0
 800423c:	0112      	lsls	r2, r2, #4
 800423e:	4293      	cmp	r3, r2
 8004240:	d027      	beq.n	8004292 <UART_SetConfig+0x202>
 8004242:	22c0      	movs	r2, #192	; 0xc0
 8004244:	0112      	lsls	r2, r2, #4
 8004246:	4293      	cmp	r3, r2
 8004248:	d82a      	bhi.n	80042a0 <UART_SetConfig+0x210>
 800424a:	2280      	movs	r2, #128	; 0x80
 800424c:	0112      	lsls	r2, r2, #4
 800424e:	4293      	cmp	r3, r2
 8004250:	d011      	beq.n	8004276 <UART_SetConfig+0x1e6>
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	0112      	lsls	r2, r2, #4
 8004256:	4293      	cmp	r3, r2
 8004258:	d822      	bhi.n	80042a0 <UART_SetConfig+0x210>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <UART_SetConfig+0x1d8>
 800425e:	2280      	movs	r2, #128	; 0x80
 8004260:	00d2      	lsls	r2, r2, #3
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <UART_SetConfig+0x1f4>
 8004266:	e01b      	b.n	80042a0 <UART_SetConfig+0x210>
 8004268:	231b      	movs	r3, #27
 800426a:	2218      	movs	r2, #24
 800426c:	189b      	adds	r3, r3, r2
 800426e:	19db      	adds	r3, r3, r7
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e021      	b.n	80042ba <UART_SetConfig+0x22a>
 8004276:	231b      	movs	r3, #27
 8004278:	2218      	movs	r2, #24
 800427a:	189b      	adds	r3, r3, r2
 800427c:	19db      	adds	r3, r3, r7
 800427e:	2202      	movs	r2, #2
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e01a      	b.n	80042ba <UART_SetConfig+0x22a>
 8004284:	231b      	movs	r3, #27
 8004286:	2218      	movs	r2, #24
 8004288:	189b      	adds	r3, r3, r2
 800428a:	19db      	adds	r3, r3, r7
 800428c:	2204      	movs	r2, #4
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	e013      	b.n	80042ba <UART_SetConfig+0x22a>
 8004292:	231b      	movs	r3, #27
 8004294:	2218      	movs	r2, #24
 8004296:	189b      	adds	r3, r3, r2
 8004298:	19db      	adds	r3, r3, r7
 800429a:	2208      	movs	r2, #8
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e00c      	b.n	80042ba <UART_SetConfig+0x22a>
 80042a0:	231b      	movs	r3, #27
 80042a2:	2218      	movs	r2, #24
 80042a4:	189b      	adds	r3, r3, r2
 80042a6:	19db      	adds	r3, r3, r7
 80042a8:	2210      	movs	r2, #16
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	e005      	b.n	80042ba <UART_SetConfig+0x22a>
 80042ae:	231b      	movs	r3, #27
 80042b0:	2218      	movs	r2, #24
 80042b2:	189b      	adds	r3, r3, r2
 80042b4:	19db      	adds	r3, r3, r7
 80042b6:	2210      	movs	r2, #16
 80042b8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a46      	ldr	r2, [pc, #280]	; (80043d8 <UART_SetConfig+0x348>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d000      	beq.n	80042c6 <UART_SetConfig+0x236>
 80042c4:	e09a      	b.n	80043fc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042c6:	231b      	movs	r3, #27
 80042c8:	2218      	movs	r2, #24
 80042ca:	189b      	adds	r3, r3, r2
 80042cc:	19db      	adds	r3, r3, r7
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d01d      	beq.n	8004310 <UART_SetConfig+0x280>
 80042d4:	dc20      	bgt.n	8004318 <UART_SetConfig+0x288>
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d015      	beq.n	8004306 <UART_SetConfig+0x276>
 80042da:	dc1d      	bgt.n	8004318 <UART_SetConfig+0x288>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <UART_SetConfig+0x256>
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d005      	beq.n	80042f0 <UART_SetConfig+0x260>
 80042e4:	e018      	b.n	8004318 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e6:	f7ff fc15 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 80042ea:	0003      	movs	r3, r0
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042ee:	e01c      	b.n	800432a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042f0:	4b3c      	ldr	r3, [pc, #240]	; (80043e4 <UART_SetConfig+0x354>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2210      	movs	r2, #16
 80042f6:	4013      	ands	r3, r2
 80042f8:	d002      	beq.n	8004300 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80042fa:	4b3e      	ldr	r3, [pc, #248]	; (80043f4 <UART_SetConfig+0x364>)
 80042fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042fe:	e014      	b.n	800432a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004300:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <UART_SetConfig+0x368>)
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004304:	e011      	b.n	800432a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004306:	f7ff fb55 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 800430a:	0003      	movs	r3, r0
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800430e:	e00c      	b.n	800432a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004316:	e008      	b.n	800432a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800431c:	231a      	movs	r3, #26
 800431e:	2218      	movs	r2, #24
 8004320:	189b      	adds	r3, r3, r2
 8004322:	19db      	adds	r3, r3, r7
 8004324:	2201      	movs	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]
        break;
 8004328:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d100      	bne.n	8004332 <UART_SetConfig+0x2a2>
 8004330:	e133      	b.n	800459a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	0013      	movs	r3, r2
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	189b      	adds	r3, r3, r2
 800433c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800433e:	429a      	cmp	r2, r3
 8004340:	d305      	bcc.n	800434e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800434a:	429a      	cmp	r2, r3
 800434c:	d906      	bls.n	800435c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800434e:	231a      	movs	r3, #26
 8004350:	2218      	movs	r2, #24
 8004352:	189b      	adds	r3, r3, r2
 8004354:	19db      	adds	r3, r3, r7
 8004356:	2201      	movs	r2, #1
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	e11e      	b.n	800459a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	6939      	ldr	r1, [r7, #16]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	000b      	movs	r3, r1
 800436a:	0e1b      	lsrs	r3, r3, #24
 800436c:	0010      	movs	r0, r2
 800436e:	0205      	lsls	r5, r0, #8
 8004370:	431d      	orrs	r5, r3
 8004372:	000b      	movs	r3, r1
 8004374:	021c      	lsls	r4, r3, #8
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	68b8      	ldr	r0, [r7, #8]
 8004384:	68f9      	ldr	r1, [r7, #12]
 8004386:	1900      	adds	r0, r0, r4
 8004388:	4169      	adcs	r1, r5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	2300      	movs	r3, #0
 8004392:	607b      	str	r3, [r7, #4]
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f7fb ff54 	bl	8000244 <__aeabi_uldivmod>
 800439c:	0002      	movs	r2, r0
 800439e:	000b      	movs	r3, r1
 80043a0:	0013      	movs	r3, r2
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a6:	23c0      	movs	r3, #192	; 0xc0
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d309      	bcc.n	80043c2 <UART_SetConfig+0x332>
 80043ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	035b      	lsls	r3, r3, #13
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d204      	bcs.n	80043c2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043be:	60da      	str	r2, [r3, #12]
 80043c0:	e0eb      	b.n	800459a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80043c2:	231a      	movs	r3, #26
 80043c4:	2218      	movs	r2, #24
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	19db      	adds	r3, r3, r7
 80043ca:	2201      	movs	r2, #1
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	e0e4      	b.n	800459a <UART_SetConfig+0x50a>
 80043d0:	efff69f3 	.word	0xefff69f3
 80043d4:	ffffcfff 	.word	0xffffcfff
 80043d8:	40004800 	.word	0x40004800
 80043dc:	fffff4ff 	.word	0xfffff4ff
 80043e0:	40013800 	.word	0x40013800
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40004400 	.word	0x40004400
 80043ec:	40004c00 	.word	0x40004c00
 80043f0:	40005000 	.word	0x40005000
 80043f4:	003d0900 	.word	0x003d0900
 80043f8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	429a      	cmp	r2, r3
 8004406:	d000      	beq.n	800440a <UART_SetConfig+0x37a>
 8004408:	e070      	b.n	80044ec <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800440a:	231b      	movs	r3, #27
 800440c:	2218      	movs	r2, #24
 800440e:	189b      	adds	r3, r3, r2
 8004410:	19db      	adds	r3, r3, r7
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d822      	bhi.n	800445e <UART_SetConfig+0x3ce>
 8004418:	009a      	lsls	r2, r3, #2
 800441a:	4b67      	ldr	r3, [pc, #412]	; (80045b8 <UART_SetConfig+0x528>)
 800441c:	18d3      	adds	r3, r2, r3
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004422:	f7ff fb77 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8004426:	0003      	movs	r3, r0
 8004428:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800442a:	e021      	b.n	8004470 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800442c:	f7ff fb88 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8004430:	0003      	movs	r3, r0
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004434:	e01c      	b.n	8004470 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004436:	4b61      	ldr	r3, [pc, #388]	; (80045bc <UART_SetConfig+0x52c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2210      	movs	r2, #16
 800443c:	4013      	ands	r3, r2
 800443e:	d002      	beq.n	8004446 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004440:	4b5f      	ldr	r3, [pc, #380]	; (80045c0 <UART_SetConfig+0x530>)
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004444:	e014      	b.n	8004470 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004446:	4b5f      	ldr	r3, [pc, #380]	; (80045c4 <UART_SetConfig+0x534>)
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800444a:	e011      	b.n	8004470 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800444c:	f7ff fab2 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8004450:	0003      	movs	r3, r0
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004454:	e00c      	b.n	8004470 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800445c:	e008      	b.n	8004470 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004462:	231a      	movs	r3, #26
 8004464:	2218      	movs	r2, #24
 8004466:	189b      	adds	r3, r3, r2
 8004468:	19db      	adds	r3, r3, r7
 800446a:	2201      	movs	r2, #1
 800446c:	701a      	strb	r2, [r3, #0]
        break;
 800446e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d100      	bne.n	8004478 <UART_SetConfig+0x3e8>
 8004476:	e090      	b.n	800459a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	005a      	lsls	r2, r3, #1
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	18d2      	adds	r2, r2, r3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	0019      	movs	r1, r3
 800448a:	0010      	movs	r0, r2
 800448c:	f7fb fe4e 	bl	800012c <__udivsi3>
 8004490:	0003      	movs	r3, r0
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	2b0f      	cmp	r3, #15
 8004498:	d921      	bls.n	80044de <UART_SetConfig+0x44e>
 800449a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	025b      	lsls	r3, r3, #9
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d21c      	bcs.n	80044de <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	200e      	movs	r0, #14
 80044aa:	2418      	movs	r4, #24
 80044ac:	1903      	adds	r3, r0, r4
 80044ae:	19db      	adds	r3, r3, r7
 80044b0:	210f      	movs	r1, #15
 80044b2:	438a      	bics	r2, r1
 80044b4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	085b      	lsrs	r3, r3, #1
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2207      	movs	r2, #7
 80044be:	4013      	ands	r3, r2
 80044c0:	b299      	uxth	r1, r3
 80044c2:	1903      	adds	r3, r0, r4
 80044c4:	19db      	adds	r3, r3, r7
 80044c6:	1902      	adds	r2, r0, r4
 80044c8:	19d2      	adds	r2, r2, r7
 80044ca:	8812      	ldrh	r2, [r2, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	1902      	adds	r2, r0, r4
 80044d6:	19d2      	adds	r2, r2, r7
 80044d8:	8812      	ldrh	r2, [r2, #0]
 80044da:	60da      	str	r2, [r3, #12]
 80044dc:	e05d      	b.n	800459a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80044de:	231a      	movs	r3, #26
 80044e0:	2218      	movs	r2, #24
 80044e2:	189b      	adds	r3, r3, r2
 80044e4:	19db      	adds	r3, r3, r7
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	e056      	b.n	800459a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044ec:	231b      	movs	r3, #27
 80044ee:	2218      	movs	r2, #24
 80044f0:	189b      	adds	r3, r3, r2
 80044f2:	19db      	adds	r3, r3, r7
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d822      	bhi.n	8004540 <UART_SetConfig+0x4b0>
 80044fa:	009a      	lsls	r2, r3, #2
 80044fc:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <UART_SetConfig+0x538>)
 80044fe:	18d3      	adds	r3, r2, r3
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7ff fb06 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8004508:	0003      	movs	r3, r0
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800450c:	e021      	b.n	8004552 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800450e:	f7ff fb17 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8004512:	0003      	movs	r3, r0
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004516:	e01c      	b.n	8004552 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004518:	4b28      	ldr	r3, [pc, #160]	; (80045bc <UART_SetConfig+0x52c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2210      	movs	r2, #16
 800451e:	4013      	ands	r3, r2
 8004520:	d002      	beq.n	8004528 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004522:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <UART_SetConfig+0x530>)
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004526:	e014      	b.n	8004552 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004528:	4b26      	ldr	r3, [pc, #152]	; (80045c4 <UART_SetConfig+0x534>)
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800452c:	e011      	b.n	8004552 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800452e:	f7ff fa41 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8004532:	0003      	movs	r3, r0
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004536:	e00c      	b.n	8004552 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800453e:	e008      	b.n	8004552 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004544:	231a      	movs	r3, #26
 8004546:	2218      	movs	r2, #24
 8004548:	189b      	adds	r3, r3, r2
 800454a:	19db      	adds	r3, r3, r7
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]
        break;
 8004550:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d020      	beq.n	800459a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	085a      	lsrs	r2, r3, #1
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	18d2      	adds	r2, r2, r3
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	0019      	movs	r1, r3
 8004568:	0010      	movs	r0, r2
 800456a:	f7fb fddf 	bl	800012c <__udivsi3>
 800456e:	0003      	movs	r3, r0
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	2b0f      	cmp	r3, #15
 8004576:	d90a      	bls.n	800458e <UART_SetConfig+0x4fe>
 8004578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	025b      	lsls	r3, r3, #9
 800457e:	429a      	cmp	r2, r3
 8004580:	d205      	bcs.n	800458e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	b29a      	uxth	r2, r3
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	e005      	b.n	800459a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800458e:	231a      	movs	r3, #26
 8004590:	2218      	movs	r2, #24
 8004592:	189b      	adds	r3, r3, r2
 8004594:	19db      	adds	r3, r3, r7
 8004596:	2201      	movs	r2, #1
 8004598:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	2200      	movs	r2, #0
 800459e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	2200      	movs	r2, #0
 80045a4:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045a6:	231a      	movs	r3, #26
 80045a8:	2218      	movs	r2, #24
 80045aa:	189b      	adds	r3, r3, r2
 80045ac:	19db      	adds	r3, r3, r7
 80045ae:	781b      	ldrb	r3, [r3, #0]
}
 80045b0:	0018      	movs	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b00e      	add	sp, #56	; 0x38
 80045b6:	bdb0      	pop	{r4, r5, r7, pc}
 80045b8:	080053d0 	.word	0x080053d0
 80045bc:	40021000 	.word	0x40021000
 80045c0:	003d0900 	.word	0x003d0900
 80045c4:	00f42400 	.word	0x00f42400
 80045c8:	080053f4 	.word	0x080053f4

080045cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	2201      	movs	r2, #1
 80045da:	4013      	ands	r3, r2
 80045dc:	d00b      	beq.n	80045f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	4a4a      	ldr	r2, [pc, #296]	; (8004710 <UART_AdvFeatureConfig+0x144>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	0019      	movs	r1, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	2202      	movs	r2, #2
 80045fc:	4013      	ands	r3, r2
 80045fe:	d00b      	beq.n	8004618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4a43      	ldr	r2, [pc, #268]	; (8004714 <UART_AdvFeatureConfig+0x148>)
 8004608:	4013      	ands	r3, r2
 800460a:	0019      	movs	r1, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	2204      	movs	r2, #4
 800461e:	4013      	ands	r3, r2
 8004620:	d00b      	beq.n	800463a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	4a3b      	ldr	r2, [pc, #236]	; (8004718 <UART_AdvFeatureConfig+0x14c>)
 800462a:	4013      	ands	r3, r2
 800462c:	0019      	movs	r1, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2208      	movs	r2, #8
 8004640:	4013      	ands	r3, r2
 8004642:	d00b      	beq.n	800465c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4a34      	ldr	r2, [pc, #208]	; (800471c <UART_AdvFeatureConfig+0x150>)
 800464c:	4013      	ands	r3, r2
 800464e:	0019      	movs	r1, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	2210      	movs	r2, #16
 8004662:	4013      	ands	r3, r2
 8004664:	d00b      	beq.n	800467e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	4a2c      	ldr	r2, [pc, #176]	; (8004720 <UART_AdvFeatureConfig+0x154>)
 800466e:	4013      	ands	r3, r2
 8004670:	0019      	movs	r1, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	2220      	movs	r2, #32
 8004684:	4013      	ands	r3, r2
 8004686:	d00b      	beq.n	80046a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	4a25      	ldr	r2, [pc, #148]	; (8004724 <UART_AdvFeatureConfig+0x158>)
 8004690:	4013      	ands	r3, r2
 8004692:	0019      	movs	r1, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	2240      	movs	r2, #64	; 0x40
 80046a6:	4013      	ands	r3, r2
 80046a8:	d01d      	beq.n	80046e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <UART_AdvFeatureConfig+0x15c>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	0019      	movs	r1, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	035b      	lsls	r3, r3, #13
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d10b      	bne.n	80046e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	4a15      	ldr	r2, [pc, #84]	; (800472c <UART_AdvFeatureConfig+0x160>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	0019      	movs	r1, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	2280      	movs	r2, #128	; 0x80
 80046ec:	4013      	ands	r3, r2
 80046ee:	d00b      	beq.n	8004708 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4a0e      	ldr	r2, [pc, #56]	; (8004730 <UART_AdvFeatureConfig+0x164>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	0019      	movs	r1, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  }
}
 8004708:	46c0      	nop			; (mov r8, r8)
 800470a:	46bd      	mov	sp, r7
 800470c:	b002      	add	sp, #8
 800470e:	bd80      	pop	{r7, pc}
 8004710:	fffdffff 	.word	0xfffdffff
 8004714:	fffeffff 	.word	0xfffeffff
 8004718:	fffbffff 	.word	0xfffbffff
 800471c:	ffff7fff 	.word	0xffff7fff
 8004720:	ffffefff 	.word	0xffffefff
 8004724:	ffffdfff 	.word	0xffffdfff
 8004728:	ffefffff 	.word	0xffefffff
 800472c:	ff9fffff 	.word	0xff9fffff
 8004730:	fff7ffff 	.word	0xfff7ffff

08004734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b092      	sub	sp, #72	; 0x48
 8004738:	af02      	add	r7, sp, #8
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2284      	movs	r2, #132	; 0x84
 8004740:	2100      	movs	r1, #0
 8004742:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004744:	f7fc fdd8 	bl	80012f8 <HAL_GetTick>
 8004748:	0003      	movs	r3, r0
 800474a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2208      	movs	r2, #8
 8004754:	4013      	ands	r3, r2
 8004756:	2b08      	cmp	r3, #8
 8004758:	d12c      	bne.n	80047b4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800475a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475c:	2280      	movs	r2, #128	; 0x80
 800475e:	0391      	lsls	r1, r2, #14
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	4a46      	ldr	r2, [pc, #280]	; (800487c <UART_CheckIdleState+0x148>)
 8004764:	9200      	str	r2, [sp, #0]
 8004766:	2200      	movs	r2, #0
 8004768:	f000 f88c 	bl	8004884 <UART_WaitOnFlagUntilTimeout>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d021      	beq.n	80047b4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004770:	f3ef 8310 	mrs	r3, PRIMASK
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004778:	63bb      	str	r3, [r7, #56]	; 0x38
 800477a:	2301      	movs	r3, #1
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	f383 8810 	msr	PRIMASK, r3
}
 8004784:	46c0      	nop			; (mov r8, r8)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2180      	movs	r1, #128	; 0x80
 8004792:	438a      	bics	r2, r1
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	f383 8810 	msr	PRIMASK, r3
}
 80047a0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2278      	movs	r2, #120	; 0x78
 80047ac:	2100      	movs	r1, #0
 80047ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e05f      	b.n	8004874 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2204      	movs	r2, #4
 80047bc:	4013      	ands	r3, r2
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d146      	bne.n	8004850 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c4:	2280      	movs	r2, #128	; 0x80
 80047c6:	03d1      	lsls	r1, r2, #15
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	4a2c      	ldr	r2, [pc, #176]	; (800487c <UART_CheckIdleState+0x148>)
 80047cc:	9200      	str	r2, [sp, #0]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f000 f858 	bl	8004884 <UART_WaitOnFlagUntilTimeout>
 80047d4:	1e03      	subs	r3, r0, #0
 80047d6:	d03b      	beq.n	8004850 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d8:	f3ef 8310 	mrs	r3, PRIMASK
 80047dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80047de:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
 80047e2:	2301      	movs	r3, #1
 80047e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f383 8810 	msr	PRIMASK, r3
}
 80047ec:	46c0      	nop			; (mov r8, r8)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4921      	ldr	r1, [pc, #132]	; (8004880 <UART_CheckIdleState+0x14c>)
 80047fa:	400a      	ands	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004800:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f383 8810 	msr	PRIMASK, r3
}
 8004808:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480a:	f3ef 8310 	mrs	r3, PRIMASK
 800480e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004810:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004812:	633b      	str	r3, [r7, #48]	; 0x30
 8004814:	2301      	movs	r3, #1
 8004816:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f383 8810 	msr	PRIMASK, r3
}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2101      	movs	r1, #1
 800482c:	438a      	bics	r2, r1
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	f383 8810 	msr	PRIMASK, r3
}
 800483a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2280      	movs	r2, #128	; 0x80
 8004840:	2120      	movs	r1, #32
 8004842:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2278      	movs	r2, #120	; 0x78
 8004848:	2100      	movs	r1, #0
 800484a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e011      	b.n	8004874 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2280      	movs	r2, #128	; 0x80
 800485a:	2120      	movs	r1, #32
 800485c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2278      	movs	r2, #120	; 0x78
 800486e:	2100      	movs	r1, #0
 8004870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b010      	add	sp, #64	; 0x40
 800487a:	bd80      	pop	{r7, pc}
 800487c:	01ffffff 	.word	0x01ffffff
 8004880:	fffffedf 	.word	0xfffffedf

08004884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	1dfb      	adds	r3, r7, #7
 8004892:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004894:	e04b      	b.n	800492e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	3301      	adds	r3, #1
 800489a:	d048      	beq.n	800492e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489c:	f7fc fd2c 	bl	80012f8 <HAL_GetTick>
 80048a0:	0002      	movs	r2, r0
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d302      	bcc.n	80048b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e04b      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2204      	movs	r2, #4
 80048be:	4013      	ands	r3, r2
 80048c0:	d035      	beq.n	800492e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	2208      	movs	r2, #8
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d111      	bne.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2208      	movs	r2, #8
 80048d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	0018      	movs	r0, r3
 80048dc:	f000 f83c 	bl	8004958 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2284      	movs	r2, #132	; 0x84
 80048e4:	2108      	movs	r1, #8
 80048e6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2278      	movs	r2, #120	; 0x78
 80048ec:	2100      	movs	r1, #0
 80048ee:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e02c      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	2380      	movs	r3, #128	; 0x80
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	401a      	ands	r2, r3
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	429a      	cmp	r2, r3
 8004906:	d112      	bne.n	800492e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2280      	movs	r2, #128	; 0x80
 800490e:	0112      	lsls	r2, r2, #4
 8004910:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	0018      	movs	r0, r3
 8004916:	f000 f81f 	bl	8004958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2284      	movs	r2, #132	; 0x84
 800491e:	2120      	movs	r1, #32
 8004920:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2278      	movs	r2, #120	; 0x78
 8004926:	2100      	movs	r1, #0
 8004928:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e00f      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	4013      	ands	r3, r2
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	425a      	negs	r2, r3
 800493e:	4153      	adcs	r3, r2
 8004940:	b2db      	uxtb	r3, r3
 8004942:	001a      	movs	r2, r3
 8004944:	1dfb      	adds	r3, r7, #7
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d0a4      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b004      	add	sp, #16
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08e      	sub	sp, #56	; 0x38
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004960:	f3ef 8310 	mrs	r3, PRIMASK
 8004964:	617b      	str	r3, [r7, #20]
  return(result);
 8004966:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004968:	637b      	str	r3, [r7, #52]	; 0x34
 800496a:	2301      	movs	r3, #1
 800496c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	f383 8810 	msr	PRIMASK, r3
}
 8004974:	46c0      	nop			; (mov r8, r8)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4926      	ldr	r1, [pc, #152]	; (8004a1c <UART_EndRxTransfer+0xc4>)
 8004982:	400a      	ands	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f383 8810 	msr	PRIMASK, r3
}
 8004990:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004992:	f3ef 8310 	mrs	r3, PRIMASK
 8004996:	623b      	str	r3, [r7, #32]
  return(result);
 8004998:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499a:	633b      	str	r3, [r7, #48]	; 0x30
 800499c:	2301      	movs	r3, #1
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	f383 8810 	msr	PRIMASK, r3
}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2101      	movs	r1, #1
 80049b4:	438a      	bics	r2, r1
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d118      	bne.n	80049fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049cc:	f3ef 8310 	mrs	r3, PRIMASK
 80049d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80049d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d6:	2301      	movs	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f383 8810 	msr	PRIMASK, r3
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2110      	movs	r1, #16
 80049ee:	438a      	bics	r2, r1
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f383 8810 	msr	PRIMASK, r3
}
 80049fc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2280      	movs	r2, #128	; 0x80
 8004a02:	2120      	movs	r1, #32
 8004a04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b00e      	add	sp, #56	; 0x38
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	fffffedf 	.word	0xfffffedf

08004a20 <siprintf>:
 8004a20:	b40e      	push	{r1, r2, r3}
 8004a22:	b500      	push	{lr}
 8004a24:	490b      	ldr	r1, [pc, #44]	; (8004a54 <siprintf+0x34>)
 8004a26:	b09c      	sub	sp, #112	; 0x70
 8004a28:	ab1d      	add	r3, sp, #116	; 0x74
 8004a2a:	9002      	str	r0, [sp, #8]
 8004a2c:	9006      	str	r0, [sp, #24]
 8004a2e:	9107      	str	r1, [sp, #28]
 8004a30:	9104      	str	r1, [sp, #16]
 8004a32:	4809      	ldr	r0, [pc, #36]	; (8004a58 <siprintf+0x38>)
 8004a34:	4909      	ldr	r1, [pc, #36]	; (8004a5c <siprintf+0x3c>)
 8004a36:	cb04      	ldmia	r3!, {r2}
 8004a38:	9105      	str	r1, [sp, #20]
 8004a3a:	6800      	ldr	r0, [r0, #0]
 8004a3c:	a902      	add	r1, sp, #8
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	f000 f9a2 	bl	8004d88 <_svfiprintf_r>
 8004a44:	2200      	movs	r2, #0
 8004a46:	9b02      	ldr	r3, [sp, #8]
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	b01c      	add	sp, #112	; 0x70
 8004a4c:	bc08      	pop	{r3}
 8004a4e:	b003      	add	sp, #12
 8004a50:	4718      	bx	r3
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	7fffffff 	.word	0x7fffffff
 8004a58:	20000060 	.word	0x20000060
 8004a5c:	ffff0208 	.word	0xffff0208

08004a60 <memset>:
 8004a60:	0003      	movs	r3, r0
 8004a62:	1882      	adds	r2, r0, r2
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d100      	bne.n	8004a6a <memset+0xa>
 8004a68:	4770      	bx	lr
 8004a6a:	7019      	strb	r1, [r3, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	e7f9      	b.n	8004a64 <memset+0x4>

08004a70 <__errno>:
 8004a70:	4b01      	ldr	r3, [pc, #4]	; (8004a78 <__errno+0x8>)
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	4770      	bx	lr
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	20000060 	.word	0x20000060

08004a7c <__libc_init_array>:
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	2600      	movs	r6, #0
 8004a80:	4c0c      	ldr	r4, [pc, #48]	; (8004ab4 <__libc_init_array+0x38>)
 8004a82:	4d0d      	ldr	r5, [pc, #52]	; (8004ab8 <__libc_init_array+0x3c>)
 8004a84:	1b64      	subs	r4, r4, r5
 8004a86:	10a4      	asrs	r4, r4, #2
 8004a88:	42a6      	cmp	r6, r4
 8004a8a:	d109      	bne.n	8004aa0 <__libc_init_array+0x24>
 8004a8c:	2600      	movs	r6, #0
 8004a8e:	f000 fc6d 	bl	800536c <_init>
 8004a92:	4c0a      	ldr	r4, [pc, #40]	; (8004abc <__libc_init_array+0x40>)
 8004a94:	4d0a      	ldr	r5, [pc, #40]	; (8004ac0 <__libc_init_array+0x44>)
 8004a96:	1b64      	subs	r4, r4, r5
 8004a98:	10a4      	asrs	r4, r4, #2
 8004a9a:	42a6      	cmp	r6, r4
 8004a9c:	d105      	bne.n	8004aaa <__libc_init_array+0x2e>
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	00b3      	lsls	r3, r6, #2
 8004aa2:	58eb      	ldr	r3, [r5, r3]
 8004aa4:	4798      	blx	r3
 8004aa6:	3601      	adds	r6, #1
 8004aa8:	e7ee      	b.n	8004a88 <__libc_init_array+0xc>
 8004aaa:	00b3      	lsls	r3, r6, #2
 8004aac:	58eb      	ldr	r3, [r5, r3]
 8004aae:	4798      	blx	r3
 8004ab0:	3601      	adds	r6, #1
 8004ab2:	e7f2      	b.n	8004a9a <__libc_init_array+0x1e>
 8004ab4:	08005454 	.word	0x08005454
 8004ab8:	08005454 	.word	0x08005454
 8004abc:	08005458 	.word	0x08005458
 8004ac0:	08005454 	.word	0x08005454

08004ac4 <__retarget_lock_acquire_recursive>:
 8004ac4:	4770      	bx	lr

08004ac6 <__retarget_lock_release_recursive>:
 8004ac6:	4770      	bx	lr

08004ac8 <_free_r>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	0005      	movs	r5, r0
 8004acc:	2900      	cmp	r1, #0
 8004ace:	d010      	beq.n	8004af2 <_free_r+0x2a>
 8004ad0:	1f0c      	subs	r4, r1, #4
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	da00      	bge.n	8004ada <_free_r+0x12>
 8004ad8:	18e4      	adds	r4, r4, r3
 8004ada:	0028      	movs	r0, r5
 8004adc:	f000 f8e2 	bl	8004ca4 <__malloc_lock>
 8004ae0:	4a1d      	ldr	r2, [pc, #116]	; (8004b58 <_free_r+0x90>)
 8004ae2:	6813      	ldr	r3, [r2, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d105      	bne.n	8004af4 <_free_r+0x2c>
 8004ae8:	6063      	str	r3, [r4, #4]
 8004aea:	6014      	str	r4, [r2, #0]
 8004aec:	0028      	movs	r0, r5
 8004aee:	f000 f8e1 	bl	8004cb4 <__malloc_unlock>
 8004af2:	bd70      	pop	{r4, r5, r6, pc}
 8004af4:	42a3      	cmp	r3, r4
 8004af6:	d908      	bls.n	8004b0a <_free_r+0x42>
 8004af8:	6820      	ldr	r0, [r4, #0]
 8004afa:	1821      	adds	r1, r4, r0
 8004afc:	428b      	cmp	r3, r1
 8004afe:	d1f3      	bne.n	8004ae8 <_free_r+0x20>
 8004b00:	6819      	ldr	r1, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	1809      	adds	r1, r1, r0
 8004b06:	6021      	str	r1, [r4, #0]
 8004b08:	e7ee      	b.n	8004ae8 <_free_r+0x20>
 8004b0a:	001a      	movs	r2, r3
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <_free_r+0x4e>
 8004b12:	42a3      	cmp	r3, r4
 8004b14:	d9f9      	bls.n	8004b0a <_free_r+0x42>
 8004b16:	6811      	ldr	r1, [r2, #0]
 8004b18:	1850      	adds	r0, r2, r1
 8004b1a:	42a0      	cmp	r0, r4
 8004b1c:	d10b      	bne.n	8004b36 <_free_r+0x6e>
 8004b1e:	6820      	ldr	r0, [r4, #0]
 8004b20:	1809      	adds	r1, r1, r0
 8004b22:	1850      	adds	r0, r2, r1
 8004b24:	6011      	str	r1, [r2, #0]
 8004b26:	4283      	cmp	r3, r0
 8004b28:	d1e0      	bne.n	8004aec <_free_r+0x24>
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	1841      	adds	r1, r0, r1
 8004b30:	6011      	str	r1, [r2, #0]
 8004b32:	6053      	str	r3, [r2, #4]
 8004b34:	e7da      	b.n	8004aec <_free_r+0x24>
 8004b36:	42a0      	cmp	r0, r4
 8004b38:	d902      	bls.n	8004b40 <_free_r+0x78>
 8004b3a:	230c      	movs	r3, #12
 8004b3c:	602b      	str	r3, [r5, #0]
 8004b3e:	e7d5      	b.n	8004aec <_free_r+0x24>
 8004b40:	6820      	ldr	r0, [r4, #0]
 8004b42:	1821      	adds	r1, r4, r0
 8004b44:	428b      	cmp	r3, r1
 8004b46:	d103      	bne.n	8004b50 <_free_r+0x88>
 8004b48:	6819      	ldr	r1, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	1809      	adds	r1, r1, r0
 8004b4e:	6021      	str	r1, [r4, #0]
 8004b50:	6063      	str	r3, [r4, #4]
 8004b52:	6054      	str	r4, [r2, #4]
 8004b54:	e7ca      	b.n	8004aec <_free_r+0x24>
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	2000031c 	.word	0x2000031c

08004b5c <sbrk_aligned>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4e0f      	ldr	r6, [pc, #60]	; (8004b9c <sbrk_aligned+0x40>)
 8004b60:	000d      	movs	r5, r1
 8004b62:	6831      	ldr	r1, [r6, #0]
 8004b64:	0004      	movs	r4, r0
 8004b66:	2900      	cmp	r1, #0
 8004b68:	d102      	bne.n	8004b70 <sbrk_aligned+0x14>
 8004b6a:	f000 fba1 	bl	80052b0 <_sbrk_r>
 8004b6e:	6030      	str	r0, [r6, #0]
 8004b70:	0029      	movs	r1, r5
 8004b72:	0020      	movs	r0, r4
 8004b74:	f000 fb9c 	bl	80052b0 <_sbrk_r>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d00a      	beq.n	8004b92 <sbrk_aligned+0x36>
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	1cc5      	adds	r5, r0, #3
 8004b80:	439d      	bics	r5, r3
 8004b82:	42a8      	cmp	r0, r5
 8004b84:	d007      	beq.n	8004b96 <sbrk_aligned+0x3a>
 8004b86:	1a29      	subs	r1, r5, r0
 8004b88:	0020      	movs	r0, r4
 8004b8a:	f000 fb91 	bl	80052b0 <_sbrk_r>
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d101      	bne.n	8004b96 <sbrk_aligned+0x3a>
 8004b92:	2501      	movs	r5, #1
 8004b94:	426d      	negs	r5, r5
 8004b96:	0028      	movs	r0, r5
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	20000320 	.word	0x20000320

08004ba0 <_malloc_r>:
 8004ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ba2:	2203      	movs	r2, #3
 8004ba4:	1ccb      	adds	r3, r1, #3
 8004ba6:	4393      	bics	r3, r2
 8004ba8:	3308      	adds	r3, #8
 8004baa:	0006      	movs	r6, r0
 8004bac:	001f      	movs	r7, r3
 8004bae:	2b0c      	cmp	r3, #12
 8004bb0:	d238      	bcs.n	8004c24 <_malloc_r+0x84>
 8004bb2:	270c      	movs	r7, #12
 8004bb4:	42b9      	cmp	r1, r7
 8004bb6:	d837      	bhi.n	8004c28 <_malloc_r+0x88>
 8004bb8:	0030      	movs	r0, r6
 8004bba:	f000 f873 	bl	8004ca4 <__malloc_lock>
 8004bbe:	4b38      	ldr	r3, [pc, #224]	; (8004ca0 <_malloc_r+0x100>)
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	001c      	movs	r4, r3
 8004bc6:	2c00      	cmp	r4, #0
 8004bc8:	d133      	bne.n	8004c32 <_malloc_r+0x92>
 8004bca:	0039      	movs	r1, r7
 8004bcc:	0030      	movs	r0, r6
 8004bce:	f7ff ffc5 	bl	8004b5c <sbrk_aligned>
 8004bd2:	0004      	movs	r4, r0
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d15e      	bne.n	8004c96 <_malloc_r+0xf6>
 8004bd8:	9b00      	ldr	r3, [sp, #0]
 8004bda:	681c      	ldr	r4, [r3, #0]
 8004bdc:	0025      	movs	r5, r4
 8004bde:	2d00      	cmp	r5, #0
 8004be0:	d14e      	bne.n	8004c80 <_malloc_r+0xe0>
 8004be2:	2c00      	cmp	r4, #0
 8004be4:	d051      	beq.n	8004c8a <_malloc_r+0xea>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	0029      	movs	r1, r5
 8004bea:	18e3      	adds	r3, r4, r3
 8004bec:	0030      	movs	r0, r6
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	f000 fb5e 	bl	80052b0 <_sbrk_r>
 8004bf4:	9b01      	ldr	r3, [sp, #4]
 8004bf6:	4283      	cmp	r3, r0
 8004bf8:	d147      	bne.n	8004c8a <_malloc_r+0xea>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	0030      	movs	r0, r6
 8004bfe:	1aff      	subs	r7, r7, r3
 8004c00:	0039      	movs	r1, r7
 8004c02:	f7ff ffab 	bl	8004b5c <sbrk_aligned>
 8004c06:	3001      	adds	r0, #1
 8004c08:	d03f      	beq.n	8004c8a <_malloc_r+0xea>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	19db      	adds	r3, r3, r7
 8004c0e:	6023      	str	r3, [r4, #0]
 8004c10:	9b00      	ldr	r3, [sp, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d040      	beq.n	8004c9a <_malloc_r+0xfa>
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	42a2      	cmp	r2, r4
 8004c1c:	d133      	bne.n	8004c86 <_malloc_r+0xe6>
 8004c1e:	2200      	movs	r2, #0
 8004c20:	605a      	str	r2, [r3, #4]
 8004c22:	e014      	b.n	8004c4e <_malloc_r+0xae>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	dac5      	bge.n	8004bb4 <_malloc_r+0x14>
 8004c28:	230c      	movs	r3, #12
 8004c2a:	2500      	movs	r5, #0
 8004c2c:	6033      	str	r3, [r6, #0]
 8004c2e:	0028      	movs	r0, r5
 8004c30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c32:	6821      	ldr	r1, [r4, #0]
 8004c34:	1bc9      	subs	r1, r1, r7
 8004c36:	d420      	bmi.n	8004c7a <_malloc_r+0xda>
 8004c38:	290b      	cmp	r1, #11
 8004c3a:	d918      	bls.n	8004c6e <_malloc_r+0xce>
 8004c3c:	19e2      	adds	r2, r4, r7
 8004c3e:	6027      	str	r7, [r4, #0]
 8004c40:	42a3      	cmp	r3, r4
 8004c42:	d112      	bne.n	8004c6a <_malloc_r+0xca>
 8004c44:	9b00      	ldr	r3, [sp, #0]
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	6863      	ldr	r3, [r4, #4]
 8004c4a:	6011      	str	r1, [r2, #0]
 8004c4c:	6053      	str	r3, [r2, #4]
 8004c4e:	0030      	movs	r0, r6
 8004c50:	0025      	movs	r5, r4
 8004c52:	f000 f82f 	bl	8004cb4 <__malloc_unlock>
 8004c56:	2207      	movs	r2, #7
 8004c58:	350b      	adds	r5, #11
 8004c5a:	1d23      	adds	r3, r4, #4
 8004c5c:	4395      	bics	r5, r2
 8004c5e:	1aea      	subs	r2, r5, r3
 8004c60:	429d      	cmp	r5, r3
 8004c62:	d0e4      	beq.n	8004c2e <_malloc_r+0x8e>
 8004c64:	1b5b      	subs	r3, r3, r5
 8004c66:	50a3      	str	r3, [r4, r2]
 8004c68:	e7e1      	b.n	8004c2e <_malloc_r+0x8e>
 8004c6a:	605a      	str	r2, [r3, #4]
 8004c6c:	e7ec      	b.n	8004c48 <_malloc_r+0xa8>
 8004c6e:	6862      	ldr	r2, [r4, #4]
 8004c70:	42a3      	cmp	r3, r4
 8004c72:	d1d5      	bne.n	8004c20 <_malloc_r+0x80>
 8004c74:	9b00      	ldr	r3, [sp, #0]
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e7e9      	b.n	8004c4e <_malloc_r+0xae>
 8004c7a:	0023      	movs	r3, r4
 8004c7c:	6864      	ldr	r4, [r4, #4]
 8004c7e:	e7a2      	b.n	8004bc6 <_malloc_r+0x26>
 8004c80:	002c      	movs	r4, r5
 8004c82:	686d      	ldr	r5, [r5, #4]
 8004c84:	e7ab      	b.n	8004bde <_malloc_r+0x3e>
 8004c86:	0013      	movs	r3, r2
 8004c88:	e7c4      	b.n	8004c14 <_malloc_r+0x74>
 8004c8a:	230c      	movs	r3, #12
 8004c8c:	0030      	movs	r0, r6
 8004c8e:	6033      	str	r3, [r6, #0]
 8004c90:	f000 f810 	bl	8004cb4 <__malloc_unlock>
 8004c94:	e7cb      	b.n	8004c2e <_malloc_r+0x8e>
 8004c96:	6027      	str	r7, [r4, #0]
 8004c98:	e7d9      	b.n	8004c4e <_malloc_r+0xae>
 8004c9a:	605b      	str	r3, [r3, #4]
 8004c9c:	deff      	udf	#255	; 0xff
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	2000031c 	.word	0x2000031c

08004ca4 <__malloc_lock>:
 8004ca4:	b510      	push	{r4, lr}
 8004ca6:	4802      	ldr	r0, [pc, #8]	; (8004cb0 <__malloc_lock+0xc>)
 8004ca8:	f7ff ff0c 	bl	8004ac4 <__retarget_lock_acquire_recursive>
 8004cac:	bd10      	pop	{r4, pc}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	20000318 	.word	0x20000318

08004cb4 <__malloc_unlock>:
 8004cb4:	b510      	push	{r4, lr}
 8004cb6:	4802      	ldr	r0, [pc, #8]	; (8004cc0 <__malloc_unlock+0xc>)
 8004cb8:	f7ff ff05 	bl	8004ac6 <__retarget_lock_release_recursive>
 8004cbc:	bd10      	pop	{r4, pc}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	20000318 	.word	0x20000318

08004cc4 <__ssputs_r>:
 8004cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	9301      	str	r3, [sp, #4]
 8004cca:	9203      	str	r2, [sp, #12]
 8004ccc:	688e      	ldr	r6, [r1, #8]
 8004cce:	9a01      	ldr	r2, [sp, #4]
 8004cd0:	0007      	movs	r7, r0
 8004cd2:	000c      	movs	r4, r1
 8004cd4:	680b      	ldr	r3, [r1, #0]
 8004cd6:	4296      	cmp	r6, r2
 8004cd8:	d831      	bhi.n	8004d3e <__ssputs_r+0x7a>
 8004cda:	898a      	ldrh	r2, [r1, #12]
 8004cdc:	2190      	movs	r1, #144	; 0x90
 8004cde:	00c9      	lsls	r1, r1, #3
 8004ce0:	420a      	tst	r2, r1
 8004ce2:	d029      	beq.n	8004d38 <__ssputs_r+0x74>
 8004ce4:	2003      	movs	r0, #3
 8004ce6:	6921      	ldr	r1, [r4, #16]
 8004ce8:	1a5b      	subs	r3, r3, r1
 8004cea:	9302      	str	r3, [sp, #8]
 8004cec:	6963      	ldr	r3, [r4, #20]
 8004cee:	4343      	muls	r3, r0
 8004cf0:	0fdd      	lsrs	r5, r3, #31
 8004cf2:	18ed      	adds	r5, r5, r3
 8004cf4:	9b01      	ldr	r3, [sp, #4]
 8004cf6:	9802      	ldr	r0, [sp, #8]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	181b      	adds	r3, r3, r0
 8004cfc:	106d      	asrs	r5, r5, #1
 8004cfe:	42ab      	cmp	r3, r5
 8004d00:	d900      	bls.n	8004d04 <__ssputs_r+0x40>
 8004d02:	001d      	movs	r5, r3
 8004d04:	0552      	lsls	r2, r2, #21
 8004d06:	d529      	bpl.n	8004d5c <__ssputs_r+0x98>
 8004d08:	0029      	movs	r1, r5
 8004d0a:	0038      	movs	r0, r7
 8004d0c:	f7ff ff48 	bl	8004ba0 <_malloc_r>
 8004d10:	1e06      	subs	r6, r0, #0
 8004d12:	d02d      	beq.n	8004d70 <__ssputs_r+0xac>
 8004d14:	9a02      	ldr	r2, [sp, #8]
 8004d16:	6921      	ldr	r1, [r4, #16]
 8004d18:	f000 fae7 	bl	80052ea <memcpy>
 8004d1c:	89a2      	ldrh	r2, [r4, #12]
 8004d1e:	4b19      	ldr	r3, [pc, #100]	; (8004d84 <__ssputs_r+0xc0>)
 8004d20:	401a      	ands	r2, r3
 8004d22:	2380      	movs	r3, #128	; 0x80
 8004d24:	4313      	orrs	r3, r2
 8004d26:	81a3      	strh	r3, [r4, #12]
 8004d28:	9b02      	ldr	r3, [sp, #8]
 8004d2a:	6126      	str	r6, [r4, #16]
 8004d2c:	18f6      	adds	r6, r6, r3
 8004d2e:	6026      	str	r6, [r4, #0]
 8004d30:	6165      	str	r5, [r4, #20]
 8004d32:	9e01      	ldr	r6, [sp, #4]
 8004d34:	1aed      	subs	r5, r5, r3
 8004d36:	60a5      	str	r5, [r4, #8]
 8004d38:	9b01      	ldr	r3, [sp, #4]
 8004d3a:	429e      	cmp	r6, r3
 8004d3c:	d900      	bls.n	8004d40 <__ssputs_r+0x7c>
 8004d3e:	9e01      	ldr	r6, [sp, #4]
 8004d40:	0032      	movs	r2, r6
 8004d42:	9903      	ldr	r1, [sp, #12]
 8004d44:	6820      	ldr	r0, [r4, #0]
 8004d46:	f000 fa9f 	bl	8005288 <memmove>
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	68a3      	ldr	r3, [r4, #8]
 8004d4e:	1b9b      	subs	r3, r3, r6
 8004d50:	60a3      	str	r3, [r4, #8]
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	199b      	adds	r3, r3, r6
 8004d56:	6023      	str	r3, [r4, #0]
 8004d58:	b005      	add	sp, #20
 8004d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d5c:	002a      	movs	r2, r5
 8004d5e:	0038      	movs	r0, r7
 8004d60:	f000 facc 	bl	80052fc <_realloc_r>
 8004d64:	1e06      	subs	r6, r0, #0
 8004d66:	d1df      	bne.n	8004d28 <__ssputs_r+0x64>
 8004d68:	0038      	movs	r0, r7
 8004d6a:	6921      	ldr	r1, [r4, #16]
 8004d6c:	f7ff feac 	bl	8004ac8 <_free_r>
 8004d70:	230c      	movs	r3, #12
 8004d72:	2001      	movs	r0, #1
 8004d74:	603b      	str	r3, [r7, #0]
 8004d76:	89a2      	ldrh	r2, [r4, #12]
 8004d78:	3334      	adds	r3, #52	; 0x34
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	4240      	negs	r0, r0
 8004d80:	e7ea      	b.n	8004d58 <__ssputs_r+0x94>
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	fffffb7f 	.word	0xfffffb7f

08004d88 <_svfiprintf_r>:
 8004d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d8a:	b0a1      	sub	sp, #132	; 0x84
 8004d8c:	9003      	str	r0, [sp, #12]
 8004d8e:	001d      	movs	r5, r3
 8004d90:	898b      	ldrh	r3, [r1, #12]
 8004d92:	000f      	movs	r7, r1
 8004d94:	0016      	movs	r6, r2
 8004d96:	061b      	lsls	r3, r3, #24
 8004d98:	d511      	bpl.n	8004dbe <_svfiprintf_r+0x36>
 8004d9a:	690b      	ldr	r3, [r1, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10e      	bne.n	8004dbe <_svfiprintf_r+0x36>
 8004da0:	2140      	movs	r1, #64	; 0x40
 8004da2:	f7ff fefd 	bl	8004ba0 <_malloc_r>
 8004da6:	6038      	str	r0, [r7, #0]
 8004da8:	6138      	str	r0, [r7, #16]
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d105      	bne.n	8004dba <_svfiprintf_r+0x32>
 8004dae:	230c      	movs	r3, #12
 8004db0:	9a03      	ldr	r2, [sp, #12]
 8004db2:	3801      	subs	r0, #1
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	b021      	add	sp, #132	; 0x84
 8004db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dba:	2340      	movs	r3, #64	; 0x40
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	ac08      	add	r4, sp, #32
 8004dc2:	6163      	str	r3, [r4, #20]
 8004dc4:	3320      	adds	r3, #32
 8004dc6:	7663      	strb	r3, [r4, #25]
 8004dc8:	3310      	adds	r3, #16
 8004dca:	76a3      	strb	r3, [r4, #26]
 8004dcc:	9507      	str	r5, [sp, #28]
 8004dce:	0035      	movs	r5, r6
 8004dd0:	782b      	ldrb	r3, [r5, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <_svfiprintf_r+0x52>
 8004dd6:	2b25      	cmp	r3, #37	; 0x25
 8004dd8:	d148      	bne.n	8004e6c <_svfiprintf_r+0xe4>
 8004dda:	1bab      	subs	r3, r5, r6
 8004ddc:	9305      	str	r3, [sp, #20]
 8004dde:	42b5      	cmp	r5, r6
 8004de0:	d00b      	beq.n	8004dfa <_svfiprintf_r+0x72>
 8004de2:	0032      	movs	r2, r6
 8004de4:	0039      	movs	r1, r7
 8004de6:	9803      	ldr	r0, [sp, #12]
 8004de8:	f7ff ff6c 	bl	8004cc4 <__ssputs_r>
 8004dec:	3001      	adds	r0, #1
 8004dee:	d100      	bne.n	8004df2 <_svfiprintf_r+0x6a>
 8004df0:	e0af      	b.n	8004f52 <_svfiprintf_r+0x1ca>
 8004df2:	6963      	ldr	r3, [r4, #20]
 8004df4:	9a05      	ldr	r2, [sp, #20]
 8004df6:	189b      	adds	r3, r3, r2
 8004df8:	6163      	str	r3, [r4, #20]
 8004dfa:	782b      	ldrb	r3, [r5, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d100      	bne.n	8004e02 <_svfiprintf_r+0x7a>
 8004e00:	e0a7      	b.n	8004f52 <_svfiprintf_r+0x1ca>
 8004e02:	2201      	movs	r2, #1
 8004e04:	2300      	movs	r3, #0
 8004e06:	4252      	negs	r2, r2
 8004e08:	6062      	str	r2, [r4, #4]
 8004e0a:	a904      	add	r1, sp, #16
 8004e0c:	3254      	adds	r2, #84	; 0x54
 8004e0e:	1852      	adds	r2, r2, r1
 8004e10:	1c6e      	adds	r6, r5, #1
 8004e12:	6023      	str	r3, [r4, #0]
 8004e14:	60e3      	str	r3, [r4, #12]
 8004e16:	60a3      	str	r3, [r4, #8]
 8004e18:	7013      	strb	r3, [r2, #0]
 8004e1a:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e1c:	4b55      	ldr	r3, [pc, #340]	; (8004f74 <_svfiprintf_r+0x1ec>)
 8004e1e:	2205      	movs	r2, #5
 8004e20:	0018      	movs	r0, r3
 8004e22:	7831      	ldrb	r1, [r6, #0]
 8004e24:	9305      	str	r3, [sp, #20]
 8004e26:	f000 fa55 	bl	80052d4 <memchr>
 8004e2a:	1c75      	adds	r5, r6, #1
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d11f      	bne.n	8004e70 <_svfiprintf_r+0xe8>
 8004e30:	6822      	ldr	r2, [r4, #0]
 8004e32:	06d3      	lsls	r3, r2, #27
 8004e34:	d504      	bpl.n	8004e40 <_svfiprintf_r+0xb8>
 8004e36:	2353      	movs	r3, #83	; 0x53
 8004e38:	a904      	add	r1, sp, #16
 8004e3a:	185b      	adds	r3, r3, r1
 8004e3c:	2120      	movs	r1, #32
 8004e3e:	7019      	strb	r1, [r3, #0]
 8004e40:	0713      	lsls	r3, r2, #28
 8004e42:	d504      	bpl.n	8004e4e <_svfiprintf_r+0xc6>
 8004e44:	2353      	movs	r3, #83	; 0x53
 8004e46:	a904      	add	r1, sp, #16
 8004e48:	185b      	adds	r3, r3, r1
 8004e4a:	212b      	movs	r1, #43	; 0x2b
 8004e4c:	7019      	strb	r1, [r3, #0]
 8004e4e:	7833      	ldrb	r3, [r6, #0]
 8004e50:	2b2a      	cmp	r3, #42	; 0x2a
 8004e52:	d016      	beq.n	8004e82 <_svfiprintf_r+0xfa>
 8004e54:	0035      	movs	r5, r6
 8004e56:	2100      	movs	r1, #0
 8004e58:	200a      	movs	r0, #10
 8004e5a:	68e3      	ldr	r3, [r4, #12]
 8004e5c:	782a      	ldrb	r2, [r5, #0]
 8004e5e:	1c6e      	adds	r6, r5, #1
 8004e60:	3a30      	subs	r2, #48	; 0x30
 8004e62:	2a09      	cmp	r2, #9
 8004e64:	d94e      	bls.n	8004f04 <_svfiprintf_r+0x17c>
 8004e66:	2900      	cmp	r1, #0
 8004e68:	d111      	bne.n	8004e8e <_svfiprintf_r+0x106>
 8004e6a:	e017      	b.n	8004e9c <_svfiprintf_r+0x114>
 8004e6c:	3501      	adds	r5, #1
 8004e6e:	e7af      	b.n	8004dd0 <_svfiprintf_r+0x48>
 8004e70:	9b05      	ldr	r3, [sp, #20]
 8004e72:	6822      	ldr	r2, [r4, #0]
 8004e74:	1ac0      	subs	r0, r0, r3
 8004e76:	2301      	movs	r3, #1
 8004e78:	4083      	lsls	r3, r0
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	002e      	movs	r6, r5
 8004e7e:	6023      	str	r3, [r4, #0]
 8004e80:	e7cc      	b.n	8004e1c <_svfiprintf_r+0x94>
 8004e82:	9b07      	ldr	r3, [sp, #28]
 8004e84:	1d19      	adds	r1, r3, #4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	9107      	str	r1, [sp, #28]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	db01      	blt.n	8004e92 <_svfiprintf_r+0x10a>
 8004e8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e90:	e004      	b.n	8004e9c <_svfiprintf_r+0x114>
 8004e92:	425b      	negs	r3, r3
 8004e94:	60e3      	str	r3, [r4, #12]
 8004e96:	2302      	movs	r3, #2
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	6023      	str	r3, [r4, #0]
 8004e9c:	782b      	ldrb	r3, [r5, #0]
 8004e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8004ea0:	d10a      	bne.n	8004eb8 <_svfiprintf_r+0x130>
 8004ea2:	786b      	ldrb	r3, [r5, #1]
 8004ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ea6:	d135      	bne.n	8004f14 <_svfiprintf_r+0x18c>
 8004ea8:	9b07      	ldr	r3, [sp, #28]
 8004eaa:	3502      	adds	r5, #2
 8004eac:	1d1a      	adds	r2, r3, #4
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	9207      	str	r2, [sp, #28]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	db2b      	blt.n	8004f0e <_svfiprintf_r+0x186>
 8004eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb8:	4e2f      	ldr	r6, [pc, #188]	; (8004f78 <_svfiprintf_r+0x1f0>)
 8004eba:	2203      	movs	r2, #3
 8004ebc:	0030      	movs	r0, r6
 8004ebe:	7829      	ldrb	r1, [r5, #0]
 8004ec0:	f000 fa08 	bl	80052d4 <memchr>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d006      	beq.n	8004ed6 <_svfiprintf_r+0x14e>
 8004ec8:	2340      	movs	r3, #64	; 0x40
 8004eca:	1b80      	subs	r0, r0, r6
 8004ecc:	4083      	lsls	r3, r0
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	3501      	adds	r5, #1
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	7829      	ldrb	r1, [r5, #0]
 8004ed8:	2206      	movs	r2, #6
 8004eda:	4828      	ldr	r0, [pc, #160]	; (8004f7c <_svfiprintf_r+0x1f4>)
 8004edc:	1c6e      	adds	r6, r5, #1
 8004ede:	7621      	strb	r1, [r4, #24]
 8004ee0:	f000 f9f8 	bl	80052d4 <memchr>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d03c      	beq.n	8004f62 <_svfiprintf_r+0x1da>
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <_svfiprintf_r+0x1f8>)
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d125      	bne.n	8004f3a <_svfiprintf_r+0x1b2>
 8004eee:	2207      	movs	r2, #7
 8004ef0:	9b07      	ldr	r3, [sp, #28]
 8004ef2:	3307      	adds	r3, #7
 8004ef4:	4393      	bics	r3, r2
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	9307      	str	r3, [sp, #28]
 8004efa:	6963      	ldr	r3, [r4, #20]
 8004efc:	9a04      	ldr	r2, [sp, #16]
 8004efe:	189b      	adds	r3, r3, r2
 8004f00:	6163      	str	r3, [r4, #20]
 8004f02:	e764      	b.n	8004dce <_svfiprintf_r+0x46>
 8004f04:	4343      	muls	r3, r0
 8004f06:	0035      	movs	r5, r6
 8004f08:	2101      	movs	r1, #1
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	e7a6      	b.n	8004e5c <_svfiprintf_r+0xd4>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	425b      	negs	r3, r3
 8004f12:	e7d0      	b.n	8004eb6 <_svfiprintf_r+0x12e>
 8004f14:	2300      	movs	r3, #0
 8004f16:	200a      	movs	r0, #10
 8004f18:	001a      	movs	r2, r3
 8004f1a:	3501      	adds	r5, #1
 8004f1c:	6063      	str	r3, [r4, #4]
 8004f1e:	7829      	ldrb	r1, [r5, #0]
 8004f20:	1c6e      	adds	r6, r5, #1
 8004f22:	3930      	subs	r1, #48	; 0x30
 8004f24:	2909      	cmp	r1, #9
 8004f26:	d903      	bls.n	8004f30 <_svfiprintf_r+0x1a8>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0c5      	beq.n	8004eb8 <_svfiprintf_r+0x130>
 8004f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f2e:	e7c3      	b.n	8004eb8 <_svfiprintf_r+0x130>
 8004f30:	4342      	muls	r2, r0
 8004f32:	0035      	movs	r5, r6
 8004f34:	2301      	movs	r3, #1
 8004f36:	1852      	adds	r2, r2, r1
 8004f38:	e7f1      	b.n	8004f1e <_svfiprintf_r+0x196>
 8004f3a:	aa07      	add	r2, sp, #28
 8004f3c:	9200      	str	r2, [sp, #0]
 8004f3e:	0021      	movs	r1, r4
 8004f40:	003a      	movs	r2, r7
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <_svfiprintf_r+0x1fc>)
 8004f44:	9803      	ldr	r0, [sp, #12]
 8004f46:	e000      	b.n	8004f4a <_svfiprintf_r+0x1c2>
 8004f48:	bf00      	nop
 8004f4a:	9004      	str	r0, [sp, #16]
 8004f4c:	9b04      	ldr	r3, [sp, #16]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	d1d3      	bne.n	8004efa <_svfiprintf_r+0x172>
 8004f52:	89bb      	ldrh	r3, [r7, #12]
 8004f54:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004f56:	065b      	lsls	r3, r3, #25
 8004f58:	d400      	bmi.n	8004f5c <_svfiprintf_r+0x1d4>
 8004f5a:	e72c      	b.n	8004db6 <_svfiprintf_r+0x2e>
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	4240      	negs	r0, r0
 8004f60:	e729      	b.n	8004db6 <_svfiprintf_r+0x2e>
 8004f62:	aa07      	add	r2, sp, #28
 8004f64:	9200      	str	r2, [sp, #0]
 8004f66:	0021      	movs	r1, r4
 8004f68:	003a      	movs	r2, r7
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <_svfiprintf_r+0x1fc>)
 8004f6c:	9803      	ldr	r0, [sp, #12]
 8004f6e:	f000 f87b 	bl	8005068 <_printf_i>
 8004f72:	e7ea      	b.n	8004f4a <_svfiprintf_r+0x1c2>
 8004f74:	08005418 	.word	0x08005418
 8004f78:	0800541e 	.word	0x0800541e
 8004f7c:	08005422 	.word	0x08005422
 8004f80:	00000000 	.word	0x00000000
 8004f84:	08004cc5 	.word	0x08004cc5

08004f88 <_printf_common>:
 8004f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f8a:	0016      	movs	r6, r2
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	688a      	ldr	r2, [r1, #8]
 8004f90:	690b      	ldr	r3, [r1, #16]
 8004f92:	000c      	movs	r4, r1
 8004f94:	9000      	str	r0, [sp, #0]
 8004f96:	4293      	cmp	r3, r2
 8004f98:	da00      	bge.n	8004f9c <_printf_common+0x14>
 8004f9a:	0013      	movs	r3, r2
 8004f9c:	0022      	movs	r2, r4
 8004f9e:	6033      	str	r3, [r6, #0]
 8004fa0:	3243      	adds	r2, #67	; 0x43
 8004fa2:	7812      	ldrb	r2, [r2, #0]
 8004fa4:	2a00      	cmp	r2, #0
 8004fa6:	d001      	beq.n	8004fac <_printf_common+0x24>
 8004fa8:	3301      	adds	r3, #1
 8004faa:	6033      	str	r3, [r6, #0]
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	069b      	lsls	r3, r3, #26
 8004fb0:	d502      	bpl.n	8004fb8 <_printf_common+0x30>
 8004fb2:	6833      	ldr	r3, [r6, #0]
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	6033      	str	r3, [r6, #0]
 8004fb8:	6822      	ldr	r2, [r4, #0]
 8004fba:	2306      	movs	r3, #6
 8004fbc:	0015      	movs	r5, r2
 8004fbe:	401d      	ands	r5, r3
 8004fc0:	421a      	tst	r2, r3
 8004fc2:	d027      	beq.n	8005014 <_printf_common+0x8c>
 8004fc4:	0023      	movs	r3, r4
 8004fc6:	3343      	adds	r3, #67	; 0x43
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	1e5a      	subs	r2, r3, #1
 8004fcc:	4193      	sbcs	r3, r2
 8004fce:	6822      	ldr	r2, [r4, #0]
 8004fd0:	0692      	lsls	r2, r2, #26
 8004fd2:	d430      	bmi.n	8005036 <_printf_common+0xae>
 8004fd4:	0022      	movs	r2, r4
 8004fd6:	9901      	ldr	r1, [sp, #4]
 8004fd8:	9800      	ldr	r0, [sp, #0]
 8004fda:	9d08      	ldr	r5, [sp, #32]
 8004fdc:	3243      	adds	r2, #67	; 0x43
 8004fde:	47a8      	blx	r5
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d025      	beq.n	8005030 <_printf_common+0xa8>
 8004fe4:	2206      	movs	r2, #6
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	2500      	movs	r5, #0
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d105      	bne.n	8004ffc <_printf_common+0x74>
 8004ff0:	6833      	ldr	r3, [r6, #0]
 8004ff2:	68e5      	ldr	r5, [r4, #12]
 8004ff4:	1aed      	subs	r5, r5, r3
 8004ff6:	43eb      	mvns	r3, r5
 8004ff8:	17db      	asrs	r3, r3, #31
 8004ffa:	401d      	ands	r5, r3
 8004ffc:	68a3      	ldr	r3, [r4, #8]
 8004ffe:	6922      	ldr	r2, [r4, #16]
 8005000:	4293      	cmp	r3, r2
 8005002:	dd01      	ble.n	8005008 <_printf_common+0x80>
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	18ed      	adds	r5, r5, r3
 8005008:	2600      	movs	r6, #0
 800500a:	42b5      	cmp	r5, r6
 800500c:	d120      	bne.n	8005050 <_printf_common+0xc8>
 800500e:	2000      	movs	r0, #0
 8005010:	e010      	b.n	8005034 <_printf_common+0xac>
 8005012:	3501      	adds	r5, #1
 8005014:	68e3      	ldr	r3, [r4, #12]
 8005016:	6832      	ldr	r2, [r6, #0]
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	42ab      	cmp	r3, r5
 800501c:	ddd2      	ble.n	8004fc4 <_printf_common+0x3c>
 800501e:	0022      	movs	r2, r4
 8005020:	2301      	movs	r3, #1
 8005022:	9901      	ldr	r1, [sp, #4]
 8005024:	9800      	ldr	r0, [sp, #0]
 8005026:	9f08      	ldr	r7, [sp, #32]
 8005028:	3219      	adds	r2, #25
 800502a:	47b8      	blx	r7
 800502c:	3001      	adds	r0, #1
 800502e:	d1f0      	bne.n	8005012 <_printf_common+0x8a>
 8005030:	2001      	movs	r0, #1
 8005032:	4240      	negs	r0, r0
 8005034:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005036:	2030      	movs	r0, #48	; 0x30
 8005038:	18e1      	adds	r1, r4, r3
 800503a:	3143      	adds	r1, #67	; 0x43
 800503c:	7008      	strb	r0, [r1, #0]
 800503e:	0021      	movs	r1, r4
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	3145      	adds	r1, #69	; 0x45
 8005044:	7809      	ldrb	r1, [r1, #0]
 8005046:	18a2      	adds	r2, r4, r2
 8005048:	3243      	adds	r2, #67	; 0x43
 800504a:	3302      	adds	r3, #2
 800504c:	7011      	strb	r1, [r2, #0]
 800504e:	e7c1      	b.n	8004fd4 <_printf_common+0x4c>
 8005050:	0022      	movs	r2, r4
 8005052:	2301      	movs	r3, #1
 8005054:	9901      	ldr	r1, [sp, #4]
 8005056:	9800      	ldr	r0, [sp, #0]
 8005058:	9f08      	ldr	r7, [sp, #32]
 800505a:	321a      	adds	r2, #26
 800505c:	47b8      	blx	r7
 800505e:	3001      	adds	r0, #1
 8005060:	d0e6      	beq.n	8005030 <_printf_common+0xa8>
 8005062:	3601      	adds	r6, #1
 8005064:	e7d1      	b.n	800500a <_printf_common+0x82>
	...

08005068 <_printf_i>:
 8005068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800506a:	b08b      	sub	sp, #44	; 0x2c
 800506c:	9206      	str	r2, [sp, #24]
 800506e:	000a      	movs	r2, r1
 8005070:	3243      	adds	r2, #67	; 0x43
 8005072:	9307      	str	r3, [sp, #28]
 8005074:	9005      	str	r0, [sp, #20]
 8005076:	9204      	str	r2, [sp, #16]
 8005078:	7e0a      	ldrb	r2, [r1, #24]
 800507a:	000c      	movs	r4, r1
 800507c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800507e:	2a78      	cmp	r2, #120	; 0x78
 8005080:	d809      	bhi.n	8005096 <_printf_i+0x2e>
 8005082:	2a62      	cmp	r2, #98	; 0x62
 8005084:	d80b      	bhi.n	800509e <_printf_i+0x36>
 8005086:	2a00      	cmp	r2, #0
 8005088:	d100      	bne.n	800508c <_printf_i+0x24>
 800508a:	e0be      	b.n	800520a <_printf_i+0x1a2>
 800508c:	497c      	ldr	r1, [pc, #496]	; (8005280 <_printf_i+0x218>)
 800508e:	9103      	str	r1, [sp, #12]
 8005090:	2a58      	cmp	r2, #88	; 0x58
 8005092:	d100      	bne.n	8005096 <_printf_i+0x2e>
 8005094:	e093      	b.n	80051be <_printf_i+0x156>
 8005096:	0026      	movs	r6, r4
 8005098:	3642      	adds	r6, #66	; 0x42
 800509a:	7032      	strb	r2, [r6, #0]
 800509c:	e022      	b.n	80050e4 <_printf_i+0x7c>
 800509e:	0010      	movs	r0, r2
 80050a0:	3863      	subs	r0, #99	; 0x63
 80050a2:	2815      	cmp	r0, #21
 80050a4:	d8f7      	bhi.n	8005096 <_printf_i+0x2e>
 80050a6:	f7fb f837 	bl	8000118 <__gnu_thumb1_case_shi>
 80050aa:	0016      	.short	0x0016
 80050ac:	fff6001f 	.word	0xfff6001f
 80050b0:	fff6fff6 	.word	0xfff6fff6
 80050b4:	001ffff6 	.word	0x001ffff6
 80050b8:	fff6fff6 	.word	0xfff6fff6
 80050bc:	fff6fff6 	.word	0xfff6fff6
 80050c0:	003600a3 	.word	0x003600a3
 80050c4:	fff60083 	.word	0xfff60083
 80050c8:	00b4fff6 	.word	0x00b4fff6
 80050cc:	0036fff6 	.word	0x0036fff6
 80050d0:	fff6fff6 	.word	0xfff6fff6
 80050d4:	0087      	.short	0x0087
 80050d6:	0026      	movs	r6, r4
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	3642      	adds	r6, #66	; 0x42
 80050dc:	1d11      	adds	r1, r2, #4
 80050de:	6019      	str	r1, [r3, #0]
 80050e0:	6813      	ldr	r3, [r2, #0]
 80050e2:	7033      	strb	r3, [r6, #0]
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0a2      	b.n	800522e <_printf_i+0x1c6>
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	6809      	ldr	r1, [r1, #0]
 80050ec:	1d02      	adds	r2, r0, #4
 80050ee:	060d      	lsls	r5, r1, #24
 80050f0:	d50b      	bpl.n	800510a <_printf_i+0xa2>
 80050f2:	6805      	ldr	r5, [r0, #0]
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	2d00      	cmp	r5, #0
 80050f8:	da03      	bge.n	8005102 <_printf_i+0x9a>
 80050fa:	232d      	movs	r3, #45	; 0x2d
 80050fc:	9a04      	ldr	r2, [sp, #16]
 80050fe:	426d      	negs	r5, r5
 8005100:	7013      	strb	r3, [r2, #0]
 8005102:	4b5f      	ldr	r3, [pc, #380]	; (8005280 <_printf_i+0x218>)
 8005104:	270a      	movs	r7, #10
 8005106:	9303      	str	r3, [sp, #12]
 8005108:	e01b      	b.n	8005142 <_printf_i+0xda>
 800510a:	6805      	ldr	r5, [r0, #0]
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	0649      	lsls	r1, r1, #25
 8005110:	d5f1      	bpl.n	80050f6 <_printf_i+0x8e>
 8005112:	b22d      	sxth	r5, r5
 8005114:	e7ef      	b.n	80050f6 <_printf_i+0x8e>
 8005116:	680d      	ldr	r5, [r1, #0]
 8005118:	6819      	ldr	r1, [r3, #0]
 800511a:	1d08      	adds	r0, r1, #4
 800511c:	6018      	str	r0, [r3, #0]
 800511e:	062e      	lsls	r6, r5, #24
 8005120:	d501      	bpl.n	8005126 <_printf_i+0xbe>
 8005122:	680d      	ldr	r5, [r1, #0]
 8005124:	e003      	b.n	800512e <_printf_i+0xc6>
 8005126:	066d      	lsls	r5, r5, #25
 8005128:	d5fb      	bpl.n	8005122 <_printf_i+0xba>
 800512a:	680d      	ldr	r5, [r1, #0]
 800512c:	b2ad      	uxth	r5, r5
 800512e:	4b54      	ldr	r3, [pc, #336]	; (8005280 <_printf_i+0x218>)
 8005130:	2708      	movs	r7, #8
 8005132:	9303      	str	r3, [sp, #12]
 8005134:	2a6f      	cmp	r2, #111	; 0x6f
 8005136:	d000      	beq.n	800513a <_printf_i+0xd2>
 8005138:	3702      	adds	r7, #2
 800513a:	0023      	movs	r3, r4
 800513c:	2200      	movs	r2, #0
 800513e:	3343      	adds	r3, #67	; 0x43
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	6863      	ldr	r3, [r4, #4]
 8005144:	60a3      	str	r3, [r4, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	db03      	blt.n	8005152 <_printf_i+0xea>
 800514a:	2104      	movs	r1, #4
 800514c:	6822      	ldr	r2, [r4, #0]
 800514e:	438a      	bics	r2, r1
 8005150:	6022      	str	r2, [r4, #0]
 8005152:	2d00      	cmp	r5, #0
 8005154:	d102      	bne.n	800515c <_printf_i+0xf4>
 8005156:	9e04      	ldr	r6, [sp, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00c      	beq.n	8005176 <_printf_i+0x10e>
 800515c:	9e04      	ldr	r6, [sp, #16]
 800515e:	0028      	movs	r0, r5
 8005160:	0039      	movs	r1, r7
 8005162:	f7fb f869 	bl	8000238 <__aeabi_uidivmod>
 8005166:	9b03      	ldr	r3, [sp, #12]
 8005168:	3e01      	subs	r6, #1
 800516a:	5c5b      	ldrb	r3, [r3, r1]
 800516c:	7033      	strb	r3, [r6, #0]
 800516e:	002b      	movs	r3, r5
 8005170:	0005      	movs	r5, r0
 8005172:	429f      	cmp	r7, r3
 8005174:	d9f3      	bls.n	800515e <_printf_i+0xf6>
 8005176:	2f08      	cmp	r7, #8
 8005178:	d109      	bne.n	800518e <_printf_i+0x126>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	07db      	lsls	r3, r3, #31
 800517e:	d506      	bpl.n	800518e <_printf_i+0x126>
 8005180:	6862      	ldr	r2, [r4, #4]
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	429a      	cmp	r2, r3
 8005186:	dc02      	bgt.n	800518e <_printf_i+0x126>
 8005188:	2330      	movs	r3, #48	; 0x30
 800518a:	3e01      	subs	r6, #1
 800518c:	7033      	strb	r3, [r6, #0]
 800518e:	9b04      	ldr	r3, [sp, #16]
 8005190:	1b9b      	subs	r3, r3, r6
 8005192:	6123      	str	r3, [r4, #16]
 8005194:	9b07      	ldr	r3, [sp, #28]
 8005196:	0021      	movs	r1, r4
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	9805      	ldr	r0, [sp, #20]
 800519c:	9b06      	ldr	r3, [sp, #24]
 800519e:	aa09      	add	r2, sp, #36	; 0x24
 80051a0:	f7ff fef2 	bl	8004f88 <_printf_common>
 80051a4:	3001      	adds	r0, #1
 80051a6:	d147      	bne.n	8005238 <_printf_i+0x1d0>
 80051a8:	2001      	movs	r0, #1
 80051aa:	4240      	negs	r0, r0
 80051ac:	b00b      	add	sp, #44	; 0x2c
 80051ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051b0:	2220      	movs	r2, #32
 80051b2:	6809      	ldr	r1, [r1, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	6022      	str	r2, [r4, #0]
 80051b8:	2278      	movs	r2, #120	; 0x78
 80051ba:	4932      	ldr	r1, [pc, #200]	; (8005284 <_printf_i+0x21c>)
 80051bc:	9103      	str	r1, [sp, #12]
 80051be:	0021      	movs	r1, r4
 80051c0:	3145      	adds	r1, #69	; 0x45
 80051c2:	700a      	strb	r2, [r1, #0]
 80051c4:	6819      	ldr	r1, [r3, #0]
 80051c6:	6822      	ldr	r2, [r4, #0]
 80051c8:	c920      	ldmia	r1!, {r5}
 80051ca:	0610      	lsls	r0, r2, #24
 80051cc:	d402      	bmi.n	80051d4 <_printf_i+0x16c>
 80051ce:	0650      	lsls	r0, r2, #25
 80051d0:	d500      	bpl.n	80051d4 <_printf_i+0x16c>
 80051d2:	b2ad      	uxth	r5, r5
 80051d4:	6019      	str	r1, [r3, #0]
 80051d6:	07d3      	lsls	r3, r2, #31
 80051d8:	d502      	bpl.n	80051e0 <_printf_i+0x178>
 80051da:	2320      	movs	r3, #32
 80051dc:	4313      	orrs	r3, r2
 80051de:	6023      	str	r3, [r4, #0]
 80051e0:	2710      	movs	r7, #16
 80051e2:	2d00      	cmp	r5, #0
 80051e4:	d1a9      	bne.n	800513a <_printf_i+0xd2>
 80051e6:	2220      	movs	r2, #32
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	4393      	bics	r3, r2
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	e7a4      	b.n	800513a <_printf_i+0xd2>
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	680d      	ldr	r5, [r1, #0]
 80051f4:	1d10      	adds	r0, r2, #4
 80051f6:	6949      	ldr	r1, [r1, #20]
 80051f8:	6018      	str	r0, [r3, #0]
 80051fa:	6813      	ldr	r3, [r2, #0]
 80051fc:	062e      	lsls	r6, r5, #24
 80051fe:	d501      	bpl.n	8005204 <_printf_i+0x19c>
 8005200:	6019      	str	r1, [r3, #0]
 8005202:	e002      	b.n	800520a <_printf_i+0x1a2>
 8005204:	066d      	lsls	r5, r5, #25
 8005206:	d5fb      	bpl.n	8005200 <_printf_i+0x198>
 8005208:	8019      	strh	r1, [r3, #0]
 800520a:	2300      	movs	r3, #0
 800520c:	9e04      	ldr	r6, [sp, #16]
 800520e:	6123      	str	r3, [r4, #16]
 8005210:	e7c0      	b.n	8005194 <_printf_i+0x12c>
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	1d11      	adds	r1, r2, #4
 8005216:	6019      	str	r1, [r3, #0]
 8005218:	6816      	ldr	r6, [r2, #0]
 800521a:	2100      	movs	r1, #0
 800521c:	0030      	movs	r0, r6
 800521e:	6862      	ldr	r2, [r4, #4]
 8005220:	f000 f858 	bl	80052d4 <memchr>
 8005224:	2800      	cmp	r0, #0
 8005226:	d001      	beq.n	800522c <_printf_i+0x1c4>
 8005228:	1b80      	subs	r0, r0, r6
 800522a:	6060      	str	r0, [r4, #4]
 800522c:	6863      	ldr	r3, [r4, #4]
 800522e:	6123      	str	r3, [r4, #16]
 8005230:	2300      	movs	r3, #0
 8005232:	9a04      	ldr	r2, [sp, #16]
 8005234:	7013      	strb	r3, [r2, #0]
 8005236:	e7ad      	b.n	8005194 <_printf_i+0x12c>
 8005238:	0032      	movs	r2, r6
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	9906      	ldr	r1, [sp, #24]
 800523e:	9805      	ldr	r0, [sp, #20]
 8005240:	9d07      	ldr	r5, [sp, #28]
 8005242:	47a8      	blx	r5
 8005244:	3001      	adds	r0, #1
 8005246:	d0af      	beq.n	80051a8 <_printf_i+0x140>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	079b      	lsls	r3, r3, #30
 800524c:	d415      	bmi.n	800527a <_printf_i+0x212>
 800524e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005250:	68e0      	ldr	r0, [r4, #12]
 8005252:	4298      	cmp	r0, r3
 8005254:	daaa      	bge.n	80051ac <_printf_i+0x144>
 8005256:	0018      	movs	r0, r3
 8005258:	e7a8      	b.n	80051ac <_printf_i+0x144>
 800525a:	0022      	movs	r2, r4
 800525c:	2301      	movs	r3, #1
 800525e:	9906      	ldr	r1, [sp, #24]
 8005260:	9805      	ldr	r0, [sp, #20]
 8005262:	9e07      	ldr	r6, [sp, #28]
 8005264:	3219      	adds	r2, #25
 8005266:	47b0      	blx	r6
 8005268:	3001      	adds	r0, #1
 800526a:	d09d      	beq.n	80051a8 <_printf_i+0x140>
 800526c:	3501      	adds	r5, #1
 800526e:	68e3      	ldr	r3, [r4, #12]
 8005270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	42ab      	cmp	r3, r5
 8005276:	dcf0      	bgt.n	800525a <_printf_i+0x1f2>
 8005278:	e7e9      	b.n	800524e <_printf_i+0x1e6>
 800527a:	2500      	movs	r5, #0
 800527c:	e7f7      	b.n	800526e <_printf_i+0x206>
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	08005429 	.word	0x08005429
 8005284:	0800543a 	.word	0x0800543a

08005288 <memmove>:
 8005288:	b510      	push	{r4, lr}
 800528a:	4288      	cmp	r0, r1
 800528c:	d902      	bls.n	8005294 <memmove+0xc>
 800528e:	188b      	adds	r3, r1, r2
 8005290:	4298      	cmp	r0, r3
 8005292:	d303      	bcc.n	800529c <memmove+0x14>
 8005294:	2300      	movs	r3, #0
 8005296:	e007      	b.n	80052a8 <memmove+0x20>
 8005298:	5c8b      	ldrb	r3, [r1, r2]
 800529a:	5483      	strb	r3, [r0, r2]
 800529c:	3a01      	subs	r2, #1
 800529e:	d2fb      	bcs.n	8005298 <memmove+0x10>
 80052a0:	bd10      	pop	{r4, pc}
 80052a2:	5ccc      	ldrb	r4, [r1, r3]
 80052a4:	54c4      	strb	r4, [r0, r3]
 80052a6:	3301      	adds	r3, #1
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d1fa      	bne.n	80052a2 <memmove+0x1a>
 80052ac:	e7f8      	b.n	80052a0 <memmove+0x18>
	...

080052b0 <_sbrk_r>:
 80052b0:	2300      	movs	r3, #0
 80052b2:	b570      	push	{r4, r5, r6, lr}
 80052b4:	4d06      	ldr	r5, [pc, #24]	; (80052d0 <_sbrk_r+0x20>)
 80052b6:	0004      	movs	r4, r0
 80052b8:	0008      	movs	r0, r1
 80052ba:	602b      	str	r3, [r5, #0]
 80052bc:	f7fb ff50 	bl	8001160 <_sbrk>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d103      	bne.n	80052cc <_sbrk_r+0x1c>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d000      	beq.n	80052cc <_sbrk_r+0x1c>
 80052ca:	6023      	str	r3, [r4, #0]
 80052cc:	bd70      	pop	{r4, r5, r6, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	20000314 	.word	0x20000314

080052d4 <memchr>:
 80052d4:	b2c9      	uxtb	r1, r1
 80052d6:	1882      	adds	r2, r0, r2
 80052d8:	4290      	cmp	r0, r2
 80052da:	d101      	bne.n	80052e0 <memchr+0xc>
 80052dc:	2000      	movs	r0, #0
 80052de:	4770      	bx	lr
 80052e0:	7803      	ldrb	r3, [r0, #0]
 80052e2:	428b      	cmp	r3, r1
 80052e4:	d0fb      	beq.n	80052de <memchr+0xa>
 80052e6:	3001      	adds	r0, #1
 80052e8:	e7f6      	b.n	80052d8 <memchr+0x4>

080052ea <memcpy>:
 80052ea:	2300      	movs	r3, #0
 80052ec:	b510      	push	{r4, lr}
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d100      	bne.n	80052f4 <memcpy+0xa>
 80052f2:	bd10      	pop	{r4, pc}
 80052f4:	5ccc      	ldrb	r4, [r1, r3]
 80052f6:	54c4      	strb	r4, [r0, r3]
 80052f8:	3301      	adds	r3, #1
 80052fa:	e7f8      	b.n	80052ee <memcpy+0x4>

080052fc <_realloc_r>:
 80052fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052fe:	0007      	movs	r7, r0
 8005300:	000e      	movs	r6, r1
 8005302:	0014      	movs	r4, r2
 8005304:	2900      	cmp	r1, #0
 8005306:	d105      	bne.n	8005314 <_realloc_r+0x18>
 8005308:	0011      	movs	r1, r2
 800530a:	f7ff fc49 	bl	8004ba0 <_malloc_r>
 800530e:	0005      	movs	r5, r0
 8005310:	0028      	movs	r0, r5
 8005312:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005314:	2a00      	cmp	r2, #0
 8005316:	d103      	bne.n	8005320 <_realloc_r+0x24>
 8005318:	f7ff fbd6 	bl	8004ac8 <_free_r>
 800531c:	0025      	movs	r5, r4
 800531e:	e7f7      	b.n	8005310 <_realloc_r+0x14>
 8005320:	f000 f81b 	bl	800535a <_malloc_usable_size_r>
 8005324:	9001      	str	r0, [sp, #4]
 8005326:	4284      	cmp	r4, r0
 8005328:	d803      	bhi.n	8005332 <_realloc_r+0x36>
 800532a:	0035      	movs	r5, r6
 800532c:	0843      	lsrs	r3, r0, #1
 800532e:	42a3      	cmp	r3, r4
 8005330:	d3ee      	bcc.n	8005310 <_realloc_r+0x14>
 8005332:	0021      	movs	r1, r4
 8005334:	0038      	movs	r0, r7
 8005336:	f7ff fc33 	bl	8004ba0 <_malloc_r>
 800533a:	1e05      	subs	r5, r0, #0
 800533c:	d0e8      	beq.n	8005310 <_realloc_r+0x14>
 800533e:	9b01      	ldr	r3, [sp, #4]
 8005340:	0022      	movs	r2, r4
 8005342:	429c      	cmp	r4, r3
 8005344:	d900      	bls.n	8005348 <_realloc_r+0x4c>
 8005346:	001a      	movs	r2, r3
 8005348:	0031      	movs	r1, r6
 800534a:	0028      	movs	r0, r5
 800534c:	f7ff ffcd 	bl	80052ea <memcpy>
 8005350:	0031      	movs	r1, r6
 8005352:	0038      	movs	r0, r7
 8005354:	f7ff fbb8 	bl	8004ac8 <_free_r>
 8005358:	e7da      	b.n	8005310 <_realloc_r+0x14>

0800535a <_malloc_usable_size_r>:
 800535a:	1f0b      	subs	r3, r1, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	1f18      	subs	r0, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	da01      	bge.n	8005368 <_malloc_usable_size_r+0xe>
 8005364:	580b      	ldr	r3, [r1, r0]
 8005366:	18c0      	adds	r0, r0, r3
 8005368:	4770      	bx	lr
	...

0800536c <_init>:
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005372:	bc08      	pop	{r3}
 8005374:	469e      	mov	lr, r3
 8005376:	4770      	bx	lr

08005378 <_fini>:
 8005378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537e:	bc08      	pop	{r3}
 8005380:	469e      	mov	lr, r3
 8005382:	4770      	bx	lr
