
Team_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005208  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800537c  0800537c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005384  08005384  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005384  08005384  00015384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800538c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000060  080053ec  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080053ec  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd44  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df8  00000000  00000000  0002ce0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  0002ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091f  00000000  00000000  0002f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001525c  00000000  00000000  000300d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f594  00000000  00000000  00045333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082664  00000000  00000000  000548c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e80  00000000  00000000  000d6f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d9dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080052b0 	.word	0x080052b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	080052b0 	.word	0x080052b0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <RV3028C7_RTC>:
} Mode;



void RV3028C7_RTC(uint8_t timer_val)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b089      	sub	sp, #36	; 0x24
 80004d0:	af04      	add	r7, sp, #16
 80004d2:	0002      	movs	r2, r0
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	701a      	strb	r2, [r3, #0]
	/*******************Test um zu sehen ob I2C Verbindung vorhanden ist********************/
	  if(HAL_I2C_IsDeviceReady(&hi2c1, RV3028C7_Address << 1, 2, 100) == HAL_OK)
 80004d8:	48a6      	ldr	r0, [pc, #664]	; (8000774 <RV3028C7_RTC+0x2a8>)
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	2202      	movs	r2, #2
 80004de:	21a4      	movs	r1, #164	; 0xa4
 80004e0:	f002 f80a 	bl	80024f8 <HAL_I2C_IsDeviceReady>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d117      	bne.n	8000518 <RV3028C7_RTC+0x4c>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80004e8:	23a0      	movs	r3, #160	; 0xa0
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	2201      	movs	r2, #1
 80004ee:	2120      	movs	r1, #32
 80004f0:	0018      	movs	r0, r3
 80004f2:	f001 fcec 	bl	8001ece <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80004f6:	23fa      	movs	r3, #250	; 0xfa
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fedc 	bl	80012b8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000500:	23a0      	movs	r3, #160	; 0xa0
 8000502:	05db      	lsls	r3, r3, #23
 8000504:	2200      	movs	r2, #0
 8000506:	2120      	movs	r1, #32
 8000508:	0018      	movs	r0, r3
 800050a:	f001 fce0 	bl	8001ece <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 800050e:	23fa      	movs	r3, #250	; 0xfa
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	0018      	movs	r0, r3
 8000514:	f000 fed0 	bl	80012b8 <HAL_Delay>
		  //wenn nicht Verbunden dann Fehler
	  }

	/*********************************RESET******************************************/
	uint8_t TE;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1, &TE, 1, 1000); // lesen von register
 8000518:	4896      	ldr	r0, [pc, #600]	; (8000774 <RV3028C7_RTC+0x2a8>)
 800051a:	23fa      	movs	r3, #250	; 0xfa
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	9302      	str	r3, [sp, #8]
 8000520:	2301      	movs	r3, #1
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	240f      	movs	r4, #15
 8000526:	193b      	adds	r3, r7, r4
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2301      	movs	r3, #1
 800052c:	220f      	movs	r2, #15
 800052e:	21a4      	movs	r1, #164	; 0xa4
 8000530:	f001 feae 	bl	8002290 <HAL_I2C_Mem_Read>
	TE &= ~(1 << 2);
 8000534:	0021      	movs	r1, r4
 8000536:	187b      	adds	r3, r7, r1
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2204      	movs	r2, #4
 800053c:	4393      	bics	r3, r2
 800053e:	b2da      	uxtb	r2, r3
 8000540:	187b      	adds	r3, r7, r1
 8000542:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1,  &TE, 1, 1000);
 8000544:	488b      	ldr	r0, [pc, #556]	; (8000774 <RV3028C7_RTC+0x2a8>)
 8000546:	23fa      	movs	r3, #250	; 0xfa
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	9302      	str	r3, [sp, #8]
 800054c:	2301      	movs	r3, #1
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	187b      	adds	r3, r7, r1
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	2301      	movs	r3, #1
 8000556:	220f      	movs	r2, #15
 8000558:	21a4      	movs	r1, #164	; 0xa4
 800055a:	f001 fd6b 	bl	8002034 <HAL_I2C_Mem_Write>

	uint8_t TIE;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_2, 1, &TIE, 1, 1000); // lesen von register
 800055e:	4885      	ldr	r0, [pc, #532]	; (8000774 <RV3028C7_RTC+0x2a8>)
 8000560:	23fa      	movs	r3, #250	; 0xfa
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	9302      	str	r3, [sp, #8]
 8000566:	2301      	movs	r3, #1
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	240e      	movs	r4, #14
 800056c:	193b      	adds	r3, r7, r4
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2301      	movs	r3, #1
 8000572:	2210      	movs	r2, #16
 8000574:	21a4      	movs	r1, #164	; 0xa4
 8000576:	f001 fe8b 	bl	8002290 <HAL_I2C_Mem_Read>
	TIE &= ~(1 << 4);
 800057a:	0021      	movs	r1, r4
 800057c:	187b      	adds	r3, r7, r1
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2210      	movs	r2, #16
 8000582:	4393      	bics	r3, r2
 8000584:	b2da      	uxtb	r2, r3
 8000586:	187b      	adds	r3, r7, r1
 8000588:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_2, 1,  &TIE, 1, 1000);
 800058a:	487a      	ldr	r0, [pc, #488]	; (8000774 <RV3028C7_RTC+0x2a8>)
 800058c:	23fa      	movs	r3, #250	; 0xfa
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	9302      	str	r3, [sp, #8]
 8000592:	2301      	movs	r3, #1
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	187b      	adds	r3, r7, r1
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2301      	movs	r3, #1
 800059c:	2210      	movs	r2, #16
 800059e:	21a4      	movs	r1, #164	; 0xa4
 80005a0:	f001 fd48 	bl	8002034 <HAL_I2C_Mem_Write>

	uint8_t TF;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Status, 1, &TF, 1, 1000); // lesen von register
 80005a4:	4873      	ldr	r0, [pc, #460]	; (8000774 <RV3028C7_RTC+0x2a8>)
 80005a6:	23fa      	movs	r3, #250	; 0xfa
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	9302      	str	r3, [sp, #8]
 80005ac:	2301      	movs	r3, #1
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	240d      	movs	r4, #13
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	220e      	movs	r2, #14
 80005ba:	21a4      	movs	r1, #164	; 0xa4
 80005bc:	f001 fe68 	bl	8002290 <HAL_I2C_Mem_Read>
	TF &= ~(1 << 3);
 80005c0:	0021      	movs	r1, r4
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2208      	movs	r2, #8
 80005c8:	4393      	bics	r3, r2
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Status, 1,  &TF, 1, 1000);
 80005d0:	4868      	ldr	r0, [pc, #416]	; (8000774 <RV3028C7_RTC+0x2a8>)
 80005d2:	23fa      	movs	r3, #250	; 0xfa
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	9302      	str	r3, [sp, #8]
 80005d8:	2301      	movs	r3, #1
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2301      	movs	r3, #1
 80005e2:	220e      	movs	r2, #14
 80005e4:	21a4      	movs	r1, #164	; 0xa4
 80005e6:	f001 fd25 	bl	8002034 <HAL_I2C_Mem_Write>

	/*********************************INIT******************************************/
	uint8_t TRPT;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1, &TRPT, 1, 1000); // lesen von register
 80005ea:	4862      	ldr	r0, [pc, #392]	; (8000774 <RV3028C7_RTC+0x2a8>)
 80005ec:	23fa      	movs	r3, #250	; 0xfa
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	9302      	str	r3, [sp, #8]
 80005f2:	2301      	movs	r3, #1
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	240c      	movs	r4, #12
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2301      	movs	r3, #1
 80005fe:	220f      	movs	r2, #15
 8000600:	21a4      	movs	r1, #164	; 0xa4
 8000602:	f001 fe45 	bl	8002290 <HAL_I2C_Mem_Read>
	TRPT |= (1 << 7);
 8000606:	0021      	movs	r1, r4
 8000608:	187b      	adds	r3, r7, r1
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	4252      	negs	r2, r2
 8000610:	4313      	orrs	r3, r2
 8000612:	b2da      	uxtb	r2, r3
 8000614:	187b      	adds	r3, r7, r1
 8000616:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1,  &TRPT, 1, 1000);
 8000618:	4856      	ldr	r0, [pc, #344]	; (8000774 <RV3028C7_RTC+0x2a8>)
 800061a:	23fa      	movs	r3, #250	; 0xfa
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	9302      	str	r3, [sp, #8]
 8000620:	2301      	movs	r3, #1
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	187b      	adds	r3, r7, r1
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2301      	movs	r3, #1
 800062a:	220f      	movs	r2, #15
 800062c:	21a4      	movs	r1, #164	; 0xa4
 800062e:	f001 fd01 	bl	8002034 <HAL_I2C_Mem_Write>

	uint8_t TD;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1, &TD, 1, 1000); // lesen von register
 8000632:	4850      	ldr	r0, [pc, #320]	; (8000774 <RV3028C7_RTC+0x2a8>)
 8000634:	23fa      	movs	r3, #250	; 0xfa
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	2301      	movs	r3, #1
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	240b      	movs	r4, #11
 8000640:	193b      	adds	r3, r7, r4
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2301      	movs	r3, #1
 8000646:	220f      	movs	r2, #15
 8000648:	21a4      	movs	r1, #164	; 0xa4
 800064a:	f001 fe21 	bl	8002290 <HAL_I2C_Mem_Read>
	TD |= 0x02;
 800064e:	0021      	movs	r1, r4
 8000650:	187b      	adds	r3, r7, r1
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2202      	movs	r2, #2
 8000656:	4313      	orrs	r3, r2
 8000658:	b2da      	uxtb	r2, r3
 800065a:	187b      	adds	r3, r7, r1
 800065c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1,  &TD, 1, 1000);
 800065e:	4845      	ldr	r0, [pc, #276]	; (8000774 <RV3028C7_RTC+0x2a8>)
 8000660:	23fa      	movs	r3, #250	; 0xfa
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	9302      	str	r3, [sp, #8]
 8000666:	2301      	movs	r3, #1
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	187b      	adds	r3, r7, r1
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2301      	movs	r3, #1
 8000670:	220f      	movs	r2, #15
 8000672:	21a4      	movs	r1, #164	; 0xa4
 8000674:	f001 fcde 	bl	8002034 <HAL_I2C_Mem_Write>


	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Timer_Val_0, 1,  &timer_val, 1, 1000);
 8000678:	483e      	ldr	r0, [pc, #248]	; (8000774 <RV3028C7_RTC+0x2a8>)
 800067a:	23fa      	movs	r3, #250	; 0xfa
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	9302      	str	r3, [sp, #8]
 8000680:	2301      	movs	r3, #1
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2301      	movs	r3, #1
 800068a:	220a      	movs	r2, #10
 800068c:	21a4      	movs	r1, #164	; 0xa4
 800068e:	f001 fcd1 	bl	8002034 <HAL_I2C_Mem_Write>


	uint8_t TIEM;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_2, 1, &TIEM, 1, 1000); // lesen von register
 8000692:	4838      	ldr	r0, [pc, #224]	; (8000774 <RV3028C7_RTC+0x2a8>)
 8000694:	23fa      	movs	r3, #250	; 0xfa
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	240a      	movs	r4, #10
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2301      	movs	r3, #1
 80006a6:	2210      	movs	r2, #16
 80006a8:	21a4      	movs	r1, #164	; 0xa4
 80006aa:	f001 fdf1 	bl	8002290 <HAL_I2C_Mem_Read>
	TIEM |= (1 << 4);
 80006ae:	0021      	movs	r1, r4
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2210      	movs	r2, #16
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_2, 1,  &TIEM, 1, 1000);
 80006be:	482d      	ldr	r0, [pc, #180]	; (8000774 <RV3028C7_RTC+0x2a8>)
 80006c0:	23fa      	movs	r3, #250	; 0xfa
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	2301      	movs	r3, #1
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	2210      	movs	r2, #16
 80006d2:	21a4      	movs	r1, #164	; 0xa4
 80006d4:	f001 fcae 	bl	8002034 <HAL_I2C_Mem_Write>

	uint8_t TEM;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1, &TEM, 1, 1000); // lesen von register
 80006d8:	4826      	ldr	r0, [pc, #152]	; (8000774 <RV3028C7_RTC+0x2a8>)
 80006da:	23fa      	movs	r3, #250	; 0xfa
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	9302      	str	r3, [sp, #8]
 80006e0:	2301      	movs	r3, #1
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	2409      	movs	r4, #9
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	220f      	movs	r2, #15
 80006ee:	21a4      	movs	r1, #164	; 0xa4
 80006f0:	f001 fdce 	bl	8002290 <HAL_I2C_Mem_Read>
	TEM |= (1 << 2);
 80006f4:	0021      	movs	r1, r4
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2204      	movs	r2, #4
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	187b      	adds	r3, r7, r1
 8000702:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1,  &TEM, 1, 1000);
 8000704:	481b      	ldr	r0, [pc, #108]	; (8000774 <RV3028C7_RTC+0x2a8>)
 8000706:	23fa      	movs	r3, #250	; 0xfa
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	9302      	str	r3, [sp, #8]
 800070c:	2301      	movs	r3, #1
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	187b      	adds	r3, r7, r1
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	220f      	movs	r2, #15
 8000718:	21a4      	movs	r1, #164	; 0xa4
 800071a:	f001 fc8b 	bl	8002034 <HAL_I2C_Mem_Write>
	/*********************************BACKUP******************************************/
	uint8_t backup = 0x00;
 800071e:	2108      	movs	r1, #8
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_EEPROM_Backup, 1,  &backup, 1, 1000); //reset
 8000726:	4813      	ldr	r0, [pc, #76]	; (8000774 <RV3028C7_RTC+0x2a8>)
 8000728:	23fa      	movs	r3, #250	; 0xfa
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	000c      	movs	r4, r1
 8000734:	187b      	adds	r3, r7, r1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2301      	movs	r3, #1
 800073a:	2237      	movs	r2, #55	; 0x37
 800073c:	21a4      	movs	r1, #164	; 0xa4
 800073e:	f001 fc79 	bl	8002034 <HAL_I2C_Mem_Write>

	backup |= (1 << 2);
 8000742:	0021      	movs	r1, r4
 8000744:	187b      	adds	r3, r7, r1
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2204      	movs	r2, #4
 800074a:	4313      	orrs	r3, r2
 800074c:	b2da      	uxtb	r2, r3
 800074e:	187b      	adds	r3, r7, r1
 8000750:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_EEPROM_Backup, 1,  &backup, 1, 1000);
 8000752:	4808      	ldr	r0, [pc, #32]	; (8000774 <RV3028C7_RTC+0x2a8>)
 8000754:	23fa      	movs	r3, #250	; 0xfa
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	9302      	str	r3, [sp, #8]
 800075a:	2301      	movs	r3, #1
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	187b      	adds	r3, r7, r1
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2301      	movs	r3, #1
 8000764:	2237      	movs	r2, #55	; 0x37
 8000766:	21a4      	movs	r1, #164	; 0xa4
 8000768:	f001 fc64 	bl	8002034 <HAL_I2C_Mem_Write>

}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b005      	add	sp, #20
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	200000d8 	.word	0x200000d8

08000778 <PCF_RTC>:


void PCF_RTC(uint8_t val, uint8_t freq)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af04      	add	r7, sp, #16
 800077e:	0002      	movs	r2, r0
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	1dbb      	adds	r3, r7, #6
 8000786:	1c0a      	adds	r2, r1, #0
 8000788:	701a      	strb	r2, [r3, #0]
	/*******************Test um zu sehen ob I2C Verbindung vorhanden ist********************/
	  if(HAL_I2C_IsDeviceReady(&hi2c1, PCF8523_Address << 1, 2, 100) == HAL_OK)
 800078a:	4863      	ldr	r0, [pc, #396]	; (8000918 <PCF_RTC+0x1a0>)
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2202      	movs	r2, #2
 8000790:	21d0      	movs	r1, #208	; 0xd0
 8000792:	f001 feb1 	bl	80024f8 <HAL_I2C_IsDeviceReady>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d117      	bne.n	80007ca <PCF_RTC+0x52>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800079a:	23a0      	movs	r3, #160	; 0xa0
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2201      	movs	r2, #1
 80007a0:	2120      	movs	r1, #32
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 fb93 	bl	8001ece <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80007a8:	23fa      	movs	r3, #250	; 0xfa
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 fd83 	bl	80012b8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007b2:	23a0      	movs	r3, #160	; 0xa0
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 fb87 	bl	8001ece <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80007c0:	23fa      	movs	r3, #250	; 0xfa
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 fd77 	bl	80012b8 <HAL_Delay>

		  //wenn nicht Verbunden dann Fehler
	  }

	/*********************************RESET******************************************/
	HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Control_1, 1, &pcf_reset, 1, 1000);
 80007ca:	4853      	ldr	r0, [pc, #332]	; (8000918 <PCF_RTC+0x1a0>)
 80007cc:	23fa      	movs	r3, #250	; 0xfa
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	9302      	str	r3, [sp, #8]
 80007d2:	2301      	movs	r3, #1
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	4b51      	ldr	r3, [pc, #324]	; (800091c <PCF_RTC+0x1a4>)
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2301      	movs	r3, #1
 80007dc:	2200      	movs	r2, #0
 80007de:	21d0      	movs	r1, #208	; 0xd0
 80007e0:	f001 fc28 	bl	8002034 <HAL_I2C_Mem_Write>
	/*********************************Interrupt Enable******************************************/
	uint8_t EnIn;

	HAL_I2C_Mem_Read(&hi2c1, PCF8523_Address << 1, Control_2, 1, &EnIn, 1, 1000); // lesen von register
 80007e4:	484c      	ldr	r0, [pc, #304]	; (8000918 <PCF_RTC+0x1a0>)
 80007e6:	23fa      	movs	r3, #250	; 0xfa
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	240f      	movs	r4, #15
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2301      	movs	r3, #1
 80007f8:	2201      	movs	r2, #1
 80007fa:	21d0      	movs	r1, #208	; 0xd0
 80007fc:	f001 fd48 	bl	8002290 <HAL_I2C_Mem_Read>

	EnIn |= 0x02; // setzen von interrupt enable bit
 8000800:	0021      	movs	r1, r4
 8000802:	187b      	adds	r3, r7, r1
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2202      	movs	r2, #2
 8000808:	4313      	orrs	r3, r2
 800080a:	b2da      	uxtb	r2, r3
 800080c:	187b      	adds	r3, r7, r1
 800080e:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Control_2, 1,  &EnIn, 1, 1000); // schreiben des registers mit gesetztem bit
 8000810:	4841      	ldr	r0, [pc, #260]	; (8000918 <PCF_RTC+0x1a0>)
 8000812:	23fa      	movs	r3, #250	; 0xfa
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	2301      	movs	r3, #1
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	187b      	adds	r3, r7, r1
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2301      	movs	r3, #1
 8000822:	2201      	movs	r2, #1
 8000824:	21d0      	movs	r1, #208	; 0xd0
 8000826:	f001 fc05 	bl	8002034 <HAL_I2C_Mem_Write>
	/*********************************RESET******************************************/

	HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Tmr_CLKOUT_ctrl, 1,  &reset, 1, 1000); //reset
 800082a:	483b      	ldr	r0, [pc, #236]	; (8000918 <PCF_RTC+0x1a0>)
 800082c:	23fa      	movs	r3, #250	; 0xfa
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	9302      	str	r3, [sp, #8]
 8000832:	2301      	movs	r3, #1
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	4b3a      	ldr	r3, [pc, #232]	; (8000920 <PCF_RTC+0x1a8>)
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2301      	movs	r3, #1
 800083c:	220f      	movs	r2, #15
 800083e:	21d0      	movs	r1, #208	; 0xd0
 8000840:	f001 fbf8 	bl	8002034 <HAL_I2C_Mem_Write>


	uint8_t control;
	HAL_I2C_Mem_Read(&hi2c1, PCF8523_Address << 1, Tmr_CLKOUT_ctrl, 1, &control, 1, 1000); // lesen von clock out register
 8000844:	4834      	ldr	r0, [pc, #208]	; (8000918 <PCF_RTC+0x1a0>)
 8000846:	23fa      	movs	r3, #250	; 0xfa
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	9302      	str	r3, [sp, #8]
 800084c:	2301      	movs	r3, #1
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	240e      	movs	r4, #14
 8000852:	193b      	adds	r3, r7, r4
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2301      	movs	r3, #1
 8000858:	220f      	movs	r2, #15
 800085a:	21d0      	movs	r1, #208	; 0xd0
 800085c:	f001 fd18 	bl	8002290 <HAL_I2C_Mem_Read>

	control |= 0xBA;// clkout deaktiviert, pulsed interrupt für timerA, timerA als countdown timer
 8000860:	0021      	movs	r1, r4
 8000862:	187b      	adds	r3, r7, r1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2246      	movs	r2, #70	; 0x46
 8000868:	4252      	negs	r2, r2
 800086a:	4313      	orrs	r3, r2
 800086c:	b2da      	uxtb	r2, r3
 800086e:	187b      	adds	r3, r7, r1
 8000870:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Tmr_CLKOUT_ctrl, 1,  &control, 1, 1000);
 8000872:	4829      	ldr	r0, [pc, #164]	; (8000918 <PCF_RTC+0x1a0>)
 8000874:	23fa      	movs	r3, #250	; 0xfa
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	9302      	str	r3, [sp, #8]
 800087a:	2301      	movs	r3, #1
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	187b      	adds	r3, r7, r1
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2301      	movs	r3, #1
 8000884:	220f      	movs	r2, #15
 8000886:	21d0      	movs	r1, #208	; 0xd0
 8000888:	f001 fbd4 	bl	8002034 <HAL_I2C_Mem_Write>


	HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Tmr_A_freq_ctrl, 1, &freq, 1, 1000); // schreiben von frequenz register
 800088c:	4822      	ldr	r0, [pc, #136]	; (8000918 <PCF_RTC+0x1a0>)
 800088e:	23fa      	movs	r3, #250	; 0xfa
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	9302      	str	r3, [sp, #8]
 8000894:	2301      	movs	r3, #1
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	1dbb      	adds	r3, r7, #6
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2301      	movs	r3, #1
 800089e:	2210      	movs	r2, #16
 80008a0:	21d0      	movs	r1, #208	; 0xd0
 80008a2:	f001 fbc7 	bl	8002034 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Tmr_A_reg, 1, &val, 1, 1000);
 80008a6:	481c      	ldr	r0, [pc, #112]	; (8000918 <PCF_RTC+0x1a0>)
 80008a8:	23fa      	movs	r3, #250	; 0xfa
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	9302      	str	r3, [sp, #8]
 80008ae:	2301      	movs	r3, #1
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	2211      	movs	r2, #17
 80008ba:	21d0      	movs	r1, #208	; 0xd0
 80008bc:	f001 fbba 	bl	8002034 <HAL_I2C_Mem_Write>
	/*********************************Batterie******************************************/
	uint8_t battery = 0x00;
 80008c0:	210d      	movs	r1, #13
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Control_3, 1,  &battery, 1, 1000); //reset
 80008c8:	4813      	ldr	r0, [pc, #76]	; (8000918 <PCF_RTC+0x1a0>)
 80008ca:	23fa      	movs	r3, #250	; 0xfa
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	9302      	str	r3, [sp, #8]
 80008d0:	2301      	movs	r3, #1
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	000c      	movs	r4, r1
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2301      	movs	r3, #1
 80008dc:	2202      	movs	r2, #2
 80008de:	21d0      	movs	r1, #208	; 0xd0
 80008e0:	f001 fba8 	bl	8002034 <HAL_I2C_Mem_Write>

	battery |= (1 << 7);
 80008e4:	0021      	movs	r1, r4
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	4252      	negs	r2, r2
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Control_3, 1, &battery, 1, 1000); // batterie mode aktiviert
 80008f6:	4808      	ldr	r0, [pc, #32]	; (8000918 <PCF_RTC+0x1a0>)
 80008f8:	23fa      	movs	r3, #250	; 0xfa
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	2301      	movs	r3, #1
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	187b      	adds	r3, r7, r1
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2301      	movs	r3, #1
 8000908:	2202      	movs	r2, #2
 800090a:	21d0      	movs	r1, #208	; 0xd0
 800090c:	f001 fb92 	bl	8002034 <HAL_I2C_Mem_Write>

}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b005      	add	sp, #20
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	200000d8 	.word	0x200000d8
 800091c:	20000000 	.word	0x20000000
 8000920:	200001cd 	.word	0x200001cd

08000924 <Go_To_Standby>:
 *Messungen benutzt um eine Schlussvolgerung von Standby-Modus und STFO-Schaltung zu
 *ziehen. PA0 dient hierbei als Wake-Up-Pin. Der Mikrocontroller geht in den Standby-
 *Modus. Er wacht auf, falls ein Interrupt auf dem Wake-Up-Pin empfangen wird.
 */
void Go_To_Standby()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

	  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <Go_To_Standby+0x6c>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2202      	movs	r2, #2
 800092e:	4013      	ands	r3, r2
 8000930:	2b02      	cmp	r3, #2
 8000932:	d11d      	bne.n	8000970 <Go_To_Standby+0x4c>
	  {
		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <Go_To_Standby+0x6c>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <Go_To_Standby+0x6c>)
 800093a:	2108      	movs	r1, #8
 800093c:	430a      	orrs	r2, r1
 800093e:	601a      	str	r2, [r3, #0]


		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	2201      	movs	r2, #1
 8000946:	2120      	movs	r1, #32
 8000948:	0018      	movs	r0, r3
 800094a:	f001 fac0 	bl	8001ece <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800094e:	23fa      	movs	r3, #250	; 0xfa
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	0018      	movs	r0, r3
 8000954:	f000 fcb0 	bl	80012b8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000958:	23a0      	movs	r3, #160	; 0xa0
 800095a:	05db      	lsls	r3, r3, #23
 800095c:	2200      	movs	r2, #0
 800095e:	2120      	movs	r1, #32
 8000960:	0018      	movs	r0, r3
 8000962:	f001 fab4 	bl	8001ece <HAL_GPIO_WritePin>
		  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1); //disable PA0
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	0018      	movs	r0, r3
 800096c:	f002 fa80 	bl	8002e70 <HAL_PWR_DisableWakeUpPin>
	  }

	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <Go_To_Standby+0x6c>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <Go_To_Standby+0x6c>)
 8000976:	2104      	movs	r1, #4
 8000978:	430a      	orrs	r2, r1
 800097a:	601a      	str	r2, [r3, #0]

	  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	0018      	movs	r0, r3
 8000982:	f002 fa65 	bl	8002e50 <HAL_PWR_EnableWakeUpPin>

	  HAL_PWR_EnterSTANDBYMode();
 8000986:	f002 fa85 	bl	8002e94 <HAL_PWR_EnterSTANDBYMode>
}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40007000 	.word	0x40007000

08000994 <feuchtigkeit>:
 * Messdaten um. Bei neuen Umgebungsbedingungen muss der Sensor neu kalibriert werden.
 * Bei der jetzigen Kalibrierung steht ein Messwert von 2780 für eine Feuchtigkeit von
 * 0% und ein Wert von 1180 für 100%.
 */
void feuchtigkeit (int daten)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	if(daten >= 2780)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <feuchtigkeit+0x4c>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	dd03      	ble.n	80009ac <feuchtigkeit+0x18>
	{
		prozent = 0;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <feuchtigkeit+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
	}
	else if (daten <= 1180)
	{
		prozent = 100;
	}
}
 80009aa:	e014      	b.n	80009d6 <feuchtigkeit+0x42>
	else if (daten >= 1180)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <feuchtigkeit+0x54>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	dd09      	ble.n	80009c8 <feuchtigkeit+0x34>
		prozent = (2780-daten)/16;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <feuchtigkeit+0x58>)
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	d500      	bpl.n	80009be <feuchtigkeit+0x2a>
 80009bc:	330f      	adds	r3, #15
 80009be:	111b      	asrs	r3, r3, #4
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <feuchtigkeit+0x50>)
 80009c4:	701a      	strb	r2, [r3, #0]
}
 80009c6:	e006      	b.n	80009d6 <feuchtigkeit+0x42>
	else if (daten <= 1180)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <feuchtigkeit+0x5c>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	dc02      	bgt.n	80009d6 <feuchtigkeit+0x42>
		prozent = 100;
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <feuchtigkeit+0x50>)
 80009d2:	2264      	movs	r2, #100	; 0x64
 80009d4:	701a      	strb	r2, [r3, #0]
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	00000adb 	.word	0x00000adb
 80009e4:	200001cc 	.word	0x200001cc
 80009e8:	0000049b 	.word	0x0000049b
 80009ec:	00000adc 	.word	0x00000adc
 80009f0:	0000049c 	.word	0x0000049c

080009f4 <Messung>:
 * über den ADC gesammelt, durch die Funktion feuchtigkeit() weiterverarbeitet und
 * über eine UART-Schnittstelle versendet. Nach dem Verarbeiten der Daten wird der
 * Pin PC0 auf Low gesetzt und somit die Selbsthaltung ausgeschaltet.
 */
void Messung()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <Messung+0x78>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	2101      	movs	r1, #1
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 fa65 	bl	8001ece <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc);
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <Messung+0x7c>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fdee 	bl	80015e8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 20);
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <Messung+0x7c>)
 8000a0e:	2114      	movs	r1, #20
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fe3d 	bl	8001690 <HAL_ADC_PollForConversion>
	data = HAL_ADC_GetValue(&hadc);
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <Messung+0x7c>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f000 fed5 	bl	80017c8 <HAL_ADC_GetValue>
 8000a1e:	0003      	movs	r3, r0
 8000a20:	001a      	movs	r2, r3
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <Messung+0x80>)
 8000a24:	601a      	str	r2, [r3, #0]
	feuchtigkeit(data);
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <Messung+0x80>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff ffb2 	bl	8000994 <feuchtigkeit>
	sprintf(msg, "Feuchtigkeit %hu \r\n", prozent);
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <Messung+0x84>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	001a      	movs	r2, r3
 8000a36:	4911      	ldr	r1, [pc, #68]	; (8000a7c <Messung+0x88>)
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <Messung+0x8c>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f003 ff92 	bl	8004964 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <Messung+0x8c>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fb60 	bl	8000108 <strlen>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	425b      	negs	r3, r3
 8000a50:	490b      	ldr	r1, [pc, #44]	; (8000a80 <Messung+0x8c>)
 8000a52:	480c      	ldr	r0, [pc, #48]	; (8000a84 <Messung+0x90>)
 8000a54:	f003 fa1e 	bl	8003e94 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <Messung+0x78>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 fa35 	bl	8001ece <HAL_GPIO_WritePin>

}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	50000800 	.word	0x50000800
 8000a70:	2000007c 	.word	0x2000007c
 8000a74:	200001b4 	.word	0x200001b4
 8000a78:	200001cc 	.word	0x200001cc
 8000a7c:	080052c8 	.word	0x080052c8
 8000a80:	200001b8 	.word	0x200001b8
 8000a84:	2000012c 	.word	0x2000012c

08000a88 <chooseMode>:
 * von Standby und STFO-Schaltung da. Data-Modus wird benutzt um die Selbsthaltung zu schalten
 * sowie die Daten des Feuchtigkeitssensors auszulesen. Dieser Modus wird benutzt, wenn der MCU
 * mit der STFO-Schaltung verbunden ist.
 */
void chooseMode(Mode m)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	701a      	strb	r2, [r3, #0]

	  switch (m){
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d015      	beq.n	8000ac8 <chooseMode+0x40>
 8000a9c:	dc16      	bgt.n	8000acc <chooseMode+0x44>
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d010      	beq.n	8000ac4 <chooseMode+0x3c>
 8000aa2:	dc13      	bgt.n	8000acc <chooseMode+0x44>
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <chooseMode+0x26>
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d003      	beq.n	8000ab4 <chooseMode+0x2c>
	  case SLEEP_MODE:
		  Go_To_Standby();

	  default:

		  break;
 8000aac:	e00e      	b.n	8000acc <chooseMode+0x44>
		  RV3028C7_RTC(0x0A);
 8000aae:	200a      	movs	r0, #10
 8000ab0:	f7ff fd0c 	bl	80004cc <RV3028C7_RTC>
		  PCF_RTC(pcf_timr, pcf_freq);
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <chooseMode+0x50>)
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <chooseMode+0x54>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	0019      	movs	r1, r3
 8000abe:	0010      	movs	r0, r2
 8000ac0:	f7ff fe5a 	bl	8000778 <PCF_RTC>
		  Messung();
 8000ac4:	f7ff ff96 	bl	80009f4 <Messung>
		  Go_To_Standby();
 8000ac8:	f7ff ff2c 	bl	8000924 <Go_To_Standby>
		  break;
 8000acc:	46c0      	nop			; (mov r8, r8)

	  }


}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	20000002 	.word	0x20000002
 8000adc:	20000001 	.word	0x20000001

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae6:	f000 fb77 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aea:	f000 f82d 	bl	8000b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aee:	f000 f975 	bl	8000ddc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000af2:	f000 f903 	bl	8000cfc <MX_I2C1_Init>
  MX_ADC_Init();
 8000af6:	f000 f89b 	bl	8000c30 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000afa:	f000 f93f 	bl	8000d7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  chooseMode(DATA_MODE);
 8000afe:	2002      	movs	r0, #2
 8000b00:	f7ff ffc2 	bl	8000a88 <chooseMode>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		  HAL_Delay(2000);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
*/

	  interrupt = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000b04:	1dfc      	adds	r4, r7, #7
 8000b06:	23a0      	movs	r3, #160	; 0xa0
 8000b08:	05db      	lsls	r3, r3, #23
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 f9c1 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000b12:	0003      	movs	r3, r0
 8000b14:	7023      	strb	r3, [r4, #0]

	  if (interrupt == 0)
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1f2      	bne.n	8000b04 <main+0x24>
	  {



		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b1e:	23a0      	movs	r3, #160	; 0xa0
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	2201      	movs	r2, #1
 8000b24:	2120      	movs	r1, #32
 8000b26:	0018      	movs	r0, r3
 8000b28:	f001 f9d1 	bl	8001ece <HAL_GPIO_WritePin>
		  HAL_Delay(1000);//1000
 8000b2c:	23fa      	movs	r3, #250	; 0xfa
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 fbc1 	bl	80012b8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b36:	23a0      	movs	r3, #160	; 0xa0
 8000b38:	05db      	lsls	r3, r3, #23
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 f9c5 	bl	8001ece <HAL_GPIO_WritePin>
	  interrupt = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000b44:	e7de      	b.n	8000b04 <main+0x24>
	...

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b09f      	sub	sp, #124	; 0x7c
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	2440      	movs	r4, #64	; 0x40
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	0018      	movs	r0, r3
 8000b54:	2338      	movs	r3, #56	; 0x38
 8000b56:	001a      	movs	r2, r3
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f003 ff23 	bl	80049a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5e:	232c      	movs	r3, #44	; 0x2c
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	0018      	movs	r0, r3
 8000b64:	2314      	movs	r3, #20
 8000b66:	001a      	movs	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f003 ff1b 	bl	80049a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	0018      	movs	r0, r3
 8000b72:	2328      	movs	r3, #40	; 0x28
 8000b74:	001a      	movs	r2, r3
 8000b76:	2100      	movs	r1, #0
 8000b78:	f003 ff14 	bl	80049a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b7c:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <SystemClock_Config+0xe0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a2a      	ldr	r2, [pc, #168]	; (8000c2c <SystemClock_Config+0xe4>)
 8000b82:	401a      	ands	r2, r3
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <SystemClock_Config+0xe0>)
 8000b86:	2180      	movs	r1, #128	; 0x80
 8000b88:	0109      	lsls	r1, r1, #4
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8e:	0021      	movs	r1, r4
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2202      	movs	r2, #2
 8000b94:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2201      	movs	r2, #1
 8000b9a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2210      	movs	r2, #16
 8000ba0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2200      	movs	r2, #0
 8000bac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	0412      	lsls	r2, r2, #16
 8000bba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f002 f97e 	bl	8002ec0 <HAL_RCC_OscConfig>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bc8:	f000 f9a8 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bcc:	212c      	movs	r1, #44	; 0x2c
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2100      	movs	r1, #0
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 fd39 	bl	8003668 <HAL_RCC_ClockConfig>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000bfa:	f000 f98f 	bl	8000f1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	220a      	movs	r2, #10
 8000c02:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	0018      	movs	r0, r3
 8000c14:	f002 ff4c 	bl	8003ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000c1c:	f000 f97e 	bl	8000f1c <Error_Handler>
  }
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b01f      	add	sp, #124	; 0x7c
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	40007000 	.word	0x40007000
 8000c2c:	ffffe7ff 	.word	0xffffe7ff

08000c30 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c36:	003b      	movs	r3, r7
 8000c38:	0018      	movs	r0, r3
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f003 feb0 	bl	80049a4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c46:	4a2b      	ldr	r2, [pc, #172]	; (8000cf4 <MX_ADC_Init+0xc4>)
 8000c48:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000c4a:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c52:	22c0      	movs	r2, #192	; 0xc0
 8000c54:	0612      	lsls	r2, r2, #24
 8000c56:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c58:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c5e:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c72:	2220      	movs	r2, #32
 8000c74:	2100      	movs	r1, #0
 8000c76:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c7a:	2221      	movs	r2, #33	; 0x21
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c88:	22c2      	movs	r2, #194	; 0xc2
 8000c8a:	32ff      	adds	r2, #255	; 0xff
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c90:	222c      	movs	r2, #44	; 0x2c
 8000c92:	2100      	movs	r1, #0
 8000c94:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 fb22 	bl	8001300 <HAL_ADC_Init>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000cc0:	f000 f92c 	bl	8000f1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cc4:	003b      	movs	r3, r7
 8000cc6:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <MX_ADC_Init+0xc8>)
 8000cc8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000cca:	003b      	movs	r3, r7
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	0152      	lsls	r2, r2, #5
 8000cd0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cd2:	003a      	movs	r2, r7
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_ADC_Init+0xc0>)
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f000 fd81 	bl	80017e0 <HAL_ADC_ConfigChannel>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000ce2:	f000 f91b 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	2000007c 	.word	0x2000007c
 8000cf4:	40012400 	.word	0x40012400
 8000cf8:	04000002 	.word	0x04000002

08000cfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_I2C1_Init+0x74>)
 8000d02:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <MX_I2C1_Init+0x78>)
 8000d04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_I2C1_Init+0x74>)
 8000d08:	4a1b      	ldr	r2, [pc, #108]	; (8000d78 <MX_I2C1_Init+0x7c>)
 8000d0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_I2C1_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_I2C1_Init+0x74>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_I2C1_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_I2C1_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_I2C1_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_I2C1_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_I2C1_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_I2C1_Init+0x74>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 f8e5 	bl	8001f08 <HAL_I2C_Init>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d001      	beq.n	8000d46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d42:	f000 f8eb 	bl	8000f1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MX_I2C1_Init+0x74>)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f001 ffe8 	bl	8002d20 <HAL_I2CEx_ConfigAnalogFilter>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d54:	f000 f8e2 	bl	8000f1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <MX_I2C1_Init+0x74>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f002 f82b 	bl	8002db8 <HAL_I2CEx_ConfigDigitalFilter>
 8000d62:	1e03      	subs	r3, r0, #0
 8000d64:	d001      	beq.n	8000d6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d66:	f000 f8d9 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200000d8 	.word	0x200000d8
 8000d74:	40005400 	.word	0x40005400
 8000d78:	00303d5b 	.word	0x00303d5b

08000d7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d82:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <MX_USART2_UART_Init+0x5c>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d88:	22e1      	movs	r2, #225	; 0xe1
 8000d8a:	0252      	lsls	r2, r2, #9
 8000d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f003 f813 	bl	8003dec <HAL_UART_Init>
 8000dc6:	1e03      	subs	r3, r0, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dca:	f000 f8a7 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000012c 	.word	0x2000012c
 8000dd8:	40004400 	.word	0x40004400

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b08b      	sub	sp, #44	; 0x2c
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	2414      	movs	r4, #20
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	0018      	movs	r0, r3
 8000de8:	2314      	movs	r3, #20
 8000dea:	001a      	movs	r2, r3
 8000dec:	2100      	movs	r1, #0
 8000dee:	f003 fdd9 	bl	80049a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df2:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <MX_GPIO_Init+0x134>)
 8000df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df6:	4b46      	ldr	r3, [pc, #280]	; (8000f10 <MX_GPIO_Init+0x134>)
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dfe:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <MX_GPIO_Init+0x134>)
 8000e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b41      	ldr	r3, [pc, #260]	; (8000f10 <MX_GPIO_Init+0x134>)
 8000e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e0e:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <MX_GPIO_Init+0x134>)
 8000e10:	2104      	movs	r1, #4
 8000e12:	430a      	orrs	r2, r1
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e16:	4b3e      	ldr	r3, [pc, #248]	; (8000f10 <MX_GPIO_Init+0x134>)
 8000e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <MX_GPIO_Init+0x134>)
 8000e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e26:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <MX_GPIO_Init+0x134>)
 8000e28:	2101      	movs	r1, #1
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e2e:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <MX_GPIO_Init+0x134>)
 8000e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e32:	2201      	movs	r2, #1
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <MX_GPIO_Init+0x134>)
 8000e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e3e:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <MX_GPIO_Init+0x134>)
 8000e40:	2102      	movs	r1, #2
 8000e42:	430a      	orrs	r2, r1
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e46:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <MX_GPIO_Init+0x134>)
 8000e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e52:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <MX_GPIO_Init+0x138>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f001 f838 	bl	8001ece <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e5e:	23a0      	movs	r3, #160	; 0xa0
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	2200      	movs	r2, #0
 8000e64:	2120      	movs	r1, #32
 8000e66:	0018      	movs	r0, r3
 8000e68:	f001 f831 	bl	8001ece <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <MX_GPIO_Init+0x13c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2120      	movs	r1, #32
 8000e72:	0018      	movs	r0, r3
 8000e74:	f001 f82b 	bl	8001ece <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	2201      	movs	r2, #1
 8000e82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <MX_GPIO_Init+0x138>)
 8000e94:	0019      	movs	r1, r3
 8000e96:	0010      	movs	r0, r2
 8000e98:	f000 fe7e 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	2210      	movs	r2, #16
 8000ea0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	2201      	movs	r2, #1
 8000eac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	193a      	adds	r2, r7, r4
 8000eb0:	23a0      	movs	r3, #160	; 0xa0
 8000eb2:	05db      	lsls	r3, r3, #23
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 fe6e 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ebc:	193b      	adds	r3, r7, r4
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	193b      	adds	r3, r7, r4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	193a      	adds	r2, r7, r4
 8000ed6:	23a0      	movs	r3, #160	; 0xa0
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f000 fe5b 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ee2:	0021      	movs	r1, r4
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2201      	movs	r2, #1
 8000eee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <MX_GPIO_Init+0x13c>)
 8000f00:	0019      	movs	r1, r3
 8000f02:	0010      	movs	r0, r2
 8000f04:	f000 fe48 	bl	8001b98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b00b      	add	sp, #44	; 0x2c
 8000f0e:	bd90      	pop	{r4, r7, pc}
 8000f10:	40021000 	.word	0x40021000
 8000f14:	50000800 	.word	0x50000800
 8000f18:	50000400 	.word	0x50000400

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <Error_Handler+0x8>
	...

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <HAL_MspInit+0x24>)
 8000f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_MspInit+0x24>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	430a      	orrs	r2, r1
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <HAL_MspInit+0x24>)
 8000f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_MspInit+0x24>)
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	0549      	lsls	r1, r1, #21
 8000f42:	430a      	orrs	r2, r1
 8000f44:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	240c      	movs	r4, #12
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	2314      	movs	r3, #20
 8000f60:	001a      	movs	r2, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	f003 fd1e 	bl	80049a4 <memset>
  if(hadc->Instance==ADC1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <HAL_ADC_MspInit+0x70>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d122      	bne.n	8000fb8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_ADC_MspInit+0x74>)
 8000f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_ADC_MspInit+0x74>)
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	0089      	lsls	r1, r1, #2
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_ADC_MspInit+0x74>)
 8000f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_ADC_MspInit+0x74>)
 8000f86:	2101      	movs	r1, #1
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_ADC_MspInit+0x74>)
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	2201      	movs	r2, #1
 8000f92:	4013      	ands	r3, r2
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	193b      	adds	r3, r7, r4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	193a      	adds	r2, r7, r4
 8000fac:	23a0      	movs	r3, #160	; 0xa0
 8000fae:	05db      	lsls	r3, r3, #23
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 fdf0 	bl	8001b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b009      	add	sp, #36	; 0x24
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	40012400 	.word	0x40012400
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	240c      	movs	r4, #12
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	2314      	movs	r3, #20
 8000fd8:	001a      	movs	r2, r3
 8000fda:	2100      	movs	r1, #0
 8000fdc:	f003 fce2 	bl	80049a4 <memset>
  if(hi2c->Instance==I2C1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a18      	ldr	r2, [pc, #96]	; (8001048 <HAL_I2C_MspInit+0x80>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d129      	bne.n	800103e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_I2C_MspInit+0x84>)
 8000fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_I2C_MspInit+0x84>)
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_I2C_MspInit+0x84>)
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001002:	193b      	adds	r3, r7, r4
 8001004:	22c0      	movs	r2, #192	; 0xc0
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100a:	0021      	movs	r1, r4
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2212      	movs	r2, #18
 8001010:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2203      	movs	r2, #3
 800101c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2204      	movs	r2, #4
 8001022:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	187b      	adds	r3, r7, r1
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_I2C_MspInit+0x88>)
 8001028:	0019      	movs	r1, r3
 800102a:	0010      	movs	r0, r2
 800102c:	f000 fdb4 	bl	8001b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_I2C_MspInit+0x84>)
 8001032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_I2C_MspInit+0x84>)
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	0389      	lsls	r1, r1, #14
 800103a:	430a      	orrs	r2, r1
 800103c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b009      	add	sp, #36	; 0x24
 8001044:	bd90      	pop	{r4, r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	40005400 	.word	0x40005400
 800104c:	40021000 	.word	0x40021000
 8001050:	50000400 	.word	0x50000400

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	240c      	movs	r4, #12
 800105e:	193b      	adds	r3, r7, r4
 8001060:	0018      	movs	r0, r3
 8001062:	2314      	movs	r3, #20
 8001064:	001a      	movs	r2, r3
 8001066:	2100      	movs	r1, #0
 8001068:	f003 fc9c 	bl	80049a4 <memset>
  if(huart->Instance==USART2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <HAL_UART_MspInit+0x80>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d129      	bne.n	80010ca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_UART_MspInit+0x84>)
 8001078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_UART_MspInit+0x84>)
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	0289      	lsls	r1, r1, #10
 8001080:	430a      	orrs	r2, r1
 8001082:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_UART_MspInit+0x84>)
 8001086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <HAL_UART_MspInit+0x84>)
 800108a:	2101      	movs	r1, #1
 800108c:	430a      	orrs	r2, r1
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_UART_MspInit+0x84>)
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	2201      	movs	r2, #1
 8001096:	4013      	ands	r3, r2
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800109c:	0021      	movs	r1, r4
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	220c      	movs	r2, #12
 80010a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2202      	movs	r2, #2
 80010a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2203      	movs	r2, #3
 80010b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2204      	movs	r2, #4
 80010ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	187a      	adds	r2, r7, r1
 80010be:	23a0      	movs	r3, #160	; 0xa0
 80010c0:	05db      	lsls	r3, r3, #23
 80010c2:	0011      	movs	r1, r2
 80010c4:	0018      	movs	r0, r3
 80010c6:	f000 fd67 	bl	8001b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b009      	add	sp, #36	; 0x24
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	40004400 	.word	0x40004400
 80010d8:	40021000 	.word	0x40021000

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <NMI_Handler+0x4>

080010e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <HardFault_Handler+0x4>

080010e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001100:	f000 f8be 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <_sbrk+0x5c>)
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <_sbrk+0x60>)
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <_sbrk+0x64>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <_sbrk+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	18d3      	adds	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d207      	bcs.n	800114c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800113c:	f003 fc3a 	bl	80049b4 <__errno>
 8001140:	0003      	movs	r3, r0
 8001142:	220c      	movs	r2, #12
 8001144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001146:	2301      	movs	r3, #1
 8001148:	425b      	negs	r3, r3
 800114a:	e009      	b.n	8001160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	18d2      	adds	r2, r2, r3
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <_sbrk+0x64>)
 800115c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b006      	add	sp, #24
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20005000 	.word	0x20005000
 800116c:	00000400 	.word	0x00000400
 8001170:	200001d0 	.word	0x200001d0
 8001174:	20000320 	.word	0x20000320

08001178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <Reset_Handler>:
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <LoopForever+0x2>)
 8001186:	4685      	mov	sp, r0
 8001188:	f7ff fff6 	bl	8001178 <SystemInit>
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <LoopForever+0x6>)
 800118e:	490d      	ldr	r1, [pc, #52]	; (80011c4 <LoopForever+0xa>)
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <LoopForever+0xe>)
 8001192:	2300      	movs	r3, #0
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:
 8001196:	58d4      	ldr	r4, [r2, r3]
 8001198:	50c4      	str	r4, [r0, r3]
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:
 800119c:	18c4      	adds	r4, r0, r3
 800119e:	428c      	cmp	r4, r1
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <LoopForever+0x12>)
 80011a4:	4c0a      	ldr	r4, [pc, #40]	; (80011d0 <LoopForever+0x16>)
 80011a6:	2300      	movs	r3, #0
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:
 80011ae:	42a2      	cmp	r2, r4
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>
 80011b2:	f003 fc05 	bl	80049c0 <__libc_init_array>
 80011b6:	f7ff fc93 	bl	8000ae0 <main>

080011ba <LoopForever>:
 80011ba:	e7fe      	b.n	80011ba <LoopForever>
 80011bc:	20005000 	.word	0x20005000
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000060 	.word	0x20000060
 80011c8:	0800538c 	.word	0x0800538c
 80011cc:	20000060 	.word	0x20000060
 80011d0:	20000320 	.word	0x20000320

080011d4 <ADC1_COMP_IRQHandler>:
 80011d4:	e7fe      	b.n	80011d4 <ADC1_COMP_IRQHandler>
	...

080011d8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_Init+0x3c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Init+0x3c>)
 80011ea:	2140      	movs	r1, #64	; 0x40
 80011ec:	430a      	orrs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 f811 	bl	8001218 <HAL_InitTick>
 80011f6:	1e03      	subs	r3, r0, #0
 80011f8:	d003      	beq.n	8001202 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e001      	b.n	8001206 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001202:	f7ff fe91 	bl	8000f28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_InitTick+0x5c>)
 8001222:	681c      	ldr	r4, [r3, #0]
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_InitTick+0x60>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	0019      	movs	r1, r3
 800122a:	23fa      	movs	r3, #250	; 0xfa
 800122c:	0098      	lsls	r0, r3, #2
 800122e:	f7fe ff7d 	bl	800012c <__udivsi3>
 8001232:	0003      	movs	r3, r0
 8001234:	0019      	movs	r1, r3
 8001236:	0020      	movs	r0, r4
 8001238:	f7fe ff78 	bl	800012c <__udivsi3>
 800123c:	0003      	movs	r3, r0
 800123e:	0018      	movs	r0, r3
 8001240:	f000 fc9d 	bl	8001b7e <HAL_SYSTICK_Config>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d001      	beq.n	800124c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e00f      	b.n	800126c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d80b      	bhi.n	800126a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	2301      	movs	r3, #1
 8001256:	425b      	negs	r3, r3
 8001258:	2200      	movs	r2, #0
 800125a:	0018      	movs	r0, r3
 800125c:	f000 fc7a 	bl	8001b54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_InitTick+0x64>)
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b003      	add	sp, #12
 8001272:	bd90      	pop	{r4, r7, pc}
 8001274:	20000004 	.word	0x20000004
 8001278:	2000000c 	.word	0x2000000c
 800127c:	20000008 	.word	0x20000008

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	001a      	movs	r2, r3
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x20>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	18d2      	adds	r2, r2, r3
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_IncTick+0x20>)
 8001292:	601a      	str	r2, [r3, #0]
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	2000000c 	.word	0x2000000c
 80012a0:	200001d4 	.word	0x200001d4

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b02      	ldr	r3, [pc, #8]	; (80012b4 <HAL_GetTick+0x10>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	200001d4 	.word	0x200001d4

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff fff0 	bl	80012a4 <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3301      	adds	r3, #1
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	001a      	movs	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	189b      	adds	r3, r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	f7ff ffe0 	bl	80012a4 <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b004      	add	sp, #16
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	2000000c 	.word	0x2000000c

08001300 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e159      	b.n	80015c6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10a      	bne.n	8001330 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2250      	movs	r2, #80	; 0x50
 8001324:	2100      	movs	r1, #0
 8001326:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	0018      	movs	r0, r3
 800132c:	f7ff fe10 	bl	8000f50 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001334:	2210      	movs	r2, #16
 8001336:	4013      	ands	r3, r2
 8001338:	2b10      	cmp	r3, #16
 800133a:	d005      	beq.n	8001348 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2204      	movs	r2, #4
 8001344:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001346:	d00b      	beq.n	8001360 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134c:	2210      	movs	r2, #16
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2250      	movs	r2, #80	; 0x50
 8001358:	2100      	movs	r1, #0
 800135a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e132      	b.n	80015c6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001364:	4a9a      	ldr	r2, [pc, #616]	; (80015d0 <HAL_ADC_Init+0x2d0>)
 8001366:	4013      	ands	r3, r2
 8001368:	2202      	movs	r2, #2
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2203      	movs	r2, #3
 8001378:	4013      	ands	r3, r2
 800137a:	2b01      	cmp	r3, #1
 800137c:	d108      	bne.n	8001390 <HAL_ADC_Init+0x90>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <HAL_ADC_Init+0x90>
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <HAL_ADC_Init+0x92>
 8001390:	2300      	movs	r3, #0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d149      	bne.n	800142a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	23c0      	movs	r3, #192	; 0xc0
 800139c:	061b      	lsls	r3, r3, #24
 800139e:	429a      	cmp	r2, r3
 80013a0:	d00b      	beq.n	80013ba <HAL_ADC_Init+0xba>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	05db      	lsls	r3, r3, #23
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d005      	beq.n	80013ba <HAL_ADC_Init+0xba>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	061b      	lsls	r3, r3, #24
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d111      	bne.n	80013de <HAL_ADC_Init+0xde>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	0092      	lsls	r2, r2, #2
 80013c6:	0892      	lsrs	r2, r2, #2
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6919      	ldr	r1, [r3, #16]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	e014      	b.n	8001408 <HAL_ADC_Init+0x108>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0092      	lsls	r2, r2, #2
 80013ea:	0892      	lsrs	r2, r2, #2
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	4b79      	ldr	r3, [pc, #484]	; (80015d4 <HAL_ADC_Init+0x2d4>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b78      	ldr	r3, [pc, #480]	; (80015d4 <HAL_ADC_Init+0x2d4>)
 80013f4:	4978      	ldr	r1, [pc, #480]	; (80015d8 <HAL_ADC_Init+0x2d8>)
 80013f6:	400a      	ands	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	4b76      	ldr	r3, [pc, #472]	; (80015d4 <HAL_ADC_Init+0x2d4>)
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4b74      	ldr	r3, [pc, #464]	; (80015d4 <HAL_ADC_Init+0x2d4>)
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2118      	movs	r1, #24
 8001414:	438a      	bics	r2, r1
 8001416:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68d9      	ldr	r1, [r3, #12]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800142a:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <HAL_ADC_Init+0x2d4>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b69      	ldr	r3, [pc, #420]	; (80015d4 <HAL_ADC_Init+0x2d4>)
 8001430:	496a      	ldr	r1, [pc, #424]	; (80015dc <HAL_ADC_Init+0x2dc>)
 8001432:	400a      	ands	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001436:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <HAL_ADC_Init+0x2d4>)
 8001438:	6819      	ldr	r1, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143e:	065a      	lsls	r2, r3, #25
 8001440:	4b64      	ldr	r3, [pc, #400]	; (80015d4 <HAL_ADC_Init+0x2d4>)
 8001442:	430a      	orrs	r2, r1
 8001444:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	055b      	lsls	r3, r3, #21
 8001450:	4013      	ands	r3, r2
 8001452:	d108      	bne.n	8001466 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	0549      	lsls	r1, r1, #21
 8001462:	430a      	orrs	r2, r1
 8001464:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	495b      	ldr	r1, [pc, #364]	; (80015e0 <HAL_ADC_Init+0x2e0>)
 8001472:	400a      	ands	r2, r1
 8001474:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68d9      	ldr	r1, [r3, #12]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d101      	bne.n	800148c <HAL_ADC_Init+0x18c>
 8001488:	2304      	movs	r3, #4
 800148a:	e000      	b.n	800148e <HAL_ADC_Init+0x18e>
 800148c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800148e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2020      	movs	r0, #32
 8001494:	5c1b      	ldrb	r3, [r3, r0]
 8001496:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001498:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	202c      	movs	r0, #44	; 0x2c
 800149e:	5c1b      	ldrb	r3, [r3, r0]
 80014a0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014a2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014a8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80014b0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80014b8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c6:	23c2      	movs	r3, #194	; 0xc2
 80014c8:	33ff      	adds	r3, #255	; 0xff
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d00b      	beq.n	80014e6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68d9      	ldr	r1, [r3, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2221      	movs	r2, #33	; 0x21
 80014ea:	5c9b      	ldrb	r3, [r3, r2]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d11a      	bne.n	8001526 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2220      	movs	r2, #32
 80014f4:	5c9b      	ldrb	r3, [r3, r2]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	430a      	orrs	r2, r1
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	e00b      	b.n	8001526 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001512:	2220      	movs	r2, #32
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	2201      	movs	r2, #1
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152a:	2b01      	cmp	r3, #1
 800152c:	d11f      	bne.n	800156e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	492a      	ldr	r1, [pc, #168]	; (80015e4 <HAL_ADC_Init+0x2e4>)
 800153a:	400a      	ands	r2, r1
 800153c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6919      	ldr	r1, [r3, #16]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800154c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001552:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2101      	movs	r1, #1
 8001568:	430a      	orrs	r2, r1
 800156a:	611a      	str	r2, [r3, #16]
 800156c:	e00e      	b.n	800158c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	2201      	movs	r2, #1
 8001576:	4013      	ands	r3, r2
 8001578:	2b01      	cmp	r3, #1
 800157a:	d107      	bne.n	800158c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2101      	movs	r1, #1
 8001588:	438a      	bics	r2, r1
 800158a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2107      	movs	r1, #7
 8001598:	438a      	bics	r2, r1
 800159a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6959      	ldr	r1, [r3, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b8:	2203      	movs	r2, #3
 80015ba:	4393      	bics	r3, r2
 80015bc:	2201      	movs	r2, #1
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	0018      	movs	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b002      	add	sp, #8
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	fffffefd 	.word	0xfffffefd
 80015d4:	40012708 	.word	0x40012708
 80015d8:	ffc3ffff 	.word	0xffc3ffff
 80015dc:	fdffffff 	.word	0xfdffffff
 80015e0:	fffe0219 	.word	0xfffe0219
 80015e4:	fffffc03 	.word	0xfffffc03

080015e8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f0:	230f      	movs	r3, #15
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2204      	movs	r2, #4
 8001600:	4013      	ands	r3, r2
 8001602:	d138      	bne.n	8001676 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2250      	movs	r2, #80	; 0x50
 8001608:	5c9b      	ldrb	r3, [r3, r2]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_ADC_Start+0x2a>
 800160e:	2302      	movs	r3, #2
 8001610:	e038      	b.n	8001684 <HAL_ADC_Start+0x9c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2250      	movs	r2, #80	; 0x50
 8001616:	2101      	movs	r1, #1
 8001618:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d007      	beq.n	8001632 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001622:	230f      	movs	r3, #15
 8001624:	18fc      	adds	r4, r7, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	0018      	movs	r0, r3
 800162a:	f000 f979 	bl	8001920 <ADC_Enable>
 800162e:	0003      	movs	r3, r0
 8001630:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001632:	230f      	movs	r3, #15
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d120      	bne.n	800167e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <HAL_ADC_Start+0xa4>)
 8001642:	4013      	ands	r3, r2
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	0052      	lsls	r2, r2, #1
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2250      	movs	r2, #80	; 0x50
 8001658:	2100      	movs	r1, #0
 800165a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	221c      	movs	r2, #28
 8001662:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2104      	movs	r1, #4
 8001670:	430a      	orrs	r2, r1
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	e003      	b.n	800167e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001676:	230f      	movs	r3, #15
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	2202      	movs	r2, #2
 800167c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800167e:	230f      	movs	r3, #15
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	781b      	ldrb	r3, [r3, #0]
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b005      	add	sp, #20
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	fffff0fe 	.word	0xfffff0fe

08001690 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d102      	bne.n	80016b0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80016aa:	2308      	movs	r3, #8
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e014      	b.n	80016da <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d10b      	bne.n	80016d6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c2:	2220      	movs	r2, #32
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2250      	movs	r2, #80	; 0x50
 80016ce:	2100      	movs	r1, #0
 80016d0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e072      	b.n	80017bc <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80016d6:	230c      	movs	r3, #12
 80016d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80016da:	f7ff fde3 	bl	80012a4 <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80016e2:	e01f      	b.n	8001724 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	d01c      	beq.n	8001724 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <HAL_ADC_PollForConversion+0x70>
 80016f0:	f7ff fdd8 	bl	80012a4 <HAL_GetTick>
 80016f4:	0002      	movs	r2, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d211      	bcs.n	8001724 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	d10b      	bne.n	8001724 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001710:	2204      	movs	r2, #4
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2250      	movs	r2, #80	; 0x50
 800171c:	2100      	movs	r1, #0
 800171e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e04b      	b.n	80017bc <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4013      	ands	r3, r2
 800172e:	d0d9      	beq.n	80016e4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	23c0      	movs	r3, #192	; 0xc0
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	4013      	ands	r3, r2
 800174a:	d12e      	bne.n	80017aa <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2220      	movs	r2, #32
 8001750:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001752:	2b00      	cmp	r3, #0
 8001754:	d129      	bne.n	80017aa <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2208      	movs	r2, #8
 800175e:	4013      	ands	r3, r2
 8001760:	2b08      	cmp	r3, #8
 8001762:	d122      	bne.n	80017aa <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2204      	movs	r2, #4
 800176c:	4013      	ands	r3, r2
 800176e:	d110      	bne.n	8001792 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	210c      	movs	r1, #12
 800177c:	438a      	bics	r2, r1
 800177e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001784:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <HAL_ADC_PollForConversion+0x134>)
 8001786:	4013      	ands	r3, r2
 8001788:	2201      	movs	r2, #1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
 8001790:	e00b      	b.n	80017aa <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001796:	2220      	movs	r2, #32
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	2201      	movs	r2, #1
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d103      	bne.n	80017ba <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	220c      	movs	r2, #12
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b004      	add	sp, #16
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	fffffefe 	.word	0xfffffefe

080017c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b002      	add	sp, #8
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2250      	movs	r2, #80	; 0x50
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x18>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e085      	b.n	8001904 <HAL_ADC_ConfigChannel+0x124>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2250      	movs	r2, #80	; 0x50
 80017fc:	2101      	movs	r1, #1
 80017fe:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2204      	movs	r2, #4
 8001808:	4013      	ands	r3, r2
 800180a:	d00b      	beq.n	8001824 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001810:	2220      	movs	r2, #32
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2250      	movs	r2, #80	; 0x50
 800181c:	2100      	movs	r1, #0
 800181e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e06f      	b.n	8001904 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a38      	ldr	r2, [pc, #224]	; (800190c <HAL_ADC_ConfigChannel+0x12c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d035      	beq.n	800189a <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	035b      	lsls	r3, r3, #13
 800183a:	0b5a      	lsrs	r2, r3, #13
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	02db      	lsls	r3, r3, #11
 800184c:	4013      	ands	r3, r2
 800184e:	d009      	beq.n	8001864 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_ADC_ConfigChannel+0x130>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <HAL_ADC_ConfigChannel+0x130>)
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	0409      	lsls	r1, r1, #16
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800185e:	200a      	movs	r0, #10
 8001860:	f000 f8c6 	bl	80019f0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	029b      	lsls	r3, r3, #10
 800186c:	4013      	ands	r3, r2
 800186e:	d006      	beq.n	800187e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <HAL_ADC_ConfigChannel+0x130>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b26      	ldr	r3, [pc, #152]	; (8001910 <HAL_ADC_ConfigChannel+0x130>)
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	03c9      	lsls	r1, r1, #15
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	025b      	lsls	r3, r3, #9
 8001886:	4013      	ands	r3, r2
 8001888:	d037      	beq.n	80018fa <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_ADC_ConfigChannel+0x130>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_ADC_ConfigChannel+0x130>)
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	0449      	lsls	r1, r1, #17
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e02f      	b.n	80018fa <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	035b      	lsls	r3, r3, #13
 80018a6:	0b5b      	lsrs	r3, r3, #13
 80018a8:	43d9      	mvns	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	400a      	ands	r2, r1
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	02db      	lsls	r3, r3, #11
 80018ba:	4013      	ands	r3, r2
 80018bc:	d005      	beq.n	80018ca <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_ADC_ConfigChannel+0x130>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_ADC_ConfigChannel+0x130>)
 80018c4:	4913      	ldr	r1, [pc, #76]	; (8001914 <HAL_ADC_ConfigChannel+0x134>)
 80018c6:	400a      	ands	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	029b      	lsls	r3, r3, #10
 80018d2:	4013      	ands	r3, r2
 80018d4:	d005      	beq.n	80018e2 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_ADC_ConfigChannel+0x130>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_ADC_ConfigChannel+0x130>)
 80018dc:	490e      	ldr	r1, [pc, #56]	; (8001918 <HAL_ADC_ConfigChannel+0x138>)
 80018de:	400a      	ands	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	025b      	lsls	r3, r3, #9
 80018ea:	4013      	ands	r3, r2
 80018ec:	d005      	beq.n	80018fa <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_ADC_ConfigChannel+0x130>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <HAL_ADC_ConfigChannel+0x130>)
 80018f4:	4909      	ldr	r1, [pc, #36]	; (800191c <HAL_ADC_ConfigChannel+0x13c>)
 80018f6:	400a      	ands	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2250      	movs	r2, #80	; 0x50
 80018fe:	2100      	movs	r1, #0
 8001900:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}
 800190c:	00001001 	.word	0x00001001
 8001910:	40012708 	.word	0x40012708
 8001914:	ff7fffff 	.word	0xff7fffff
 8001918:	ffbfffff 	.word	0xffbfffff
 800191c:	feffffff 	.word	0xfeffffff

08001920 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2203      	movs	r2, #3
 8001934:	4013      	ands	r3, r2
 8001936:	2b01      	cmp	r3, #1
 8001938:	d108      	bne.n	800194c <ADC_Enable+0x2c>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	4013      	ands	r3, r2
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <ADC_Enable+0x2c>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <ADC_Enable+0x2e>
 800194c:	2300      	movs	r3, #0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d146      	bne.n	80019e0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4a24      	ldr	r2, [pc, #144]	; (80019ec <ADC_Enable+0xcc>)
 800195a:	4013      	ands	r3, r2
 800195c:	d00d      	beq.n	800197a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001962:	2210      	movs	r2, #16
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	2201      	movs	r2, #1
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e033      	b.n	80019e2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	430a      	orrs	r2, r1
 8001988:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800198a:	2001      	movs	r0, #1
 800198c:	f000 f830 	bl	80019f0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001990:	f7ff fc88 	bl	80012a4 <HAL_GetTick>
 8001994:	0003      	movs	r3, r0
 8001996:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001998:	e01b      	b.n	80019d2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800199a:	f7ff fc83 	bl	80012a4 <HAL_GetTick>
 800199e:	0002      	movs	r2, r0
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b0a      	cmp	r3, #10
 80019a6:	d914      	bls.n	80019d2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2201      	movs	r2, #1
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d00d      	beq.n	80019d2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ba:	2210      	movs	r2, #16
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	2201      	movs	r2, #1
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e007      	b.n	80019e2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2201      	movs	r2, #1
 80019da:	4013      	ands	r3, r2
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d1dc      	bne.n	800199a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	0018      	movs	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b004      	add	sp, #16
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	80000017 	.word	0x80000017

080019f0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <ADC_DelayMicroSecond+0x38>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	490b      	ldr	r1, [pc, #44]	; (8001a2c <ADC_DelayMicroSecond+0x3c>)
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7fe fb94 	bl	800012c <__udivsi3>
 8001a04:	0003      	movs	r3, r0
 8001a06:	001a      	movs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4353      	muls	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001a0e:	e002      	b.n	8001a16 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f9      	bne.n	8001a10 <ADC_DelayMicroSecond+0x20>
  }
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	20000004 	.word	0x20000004
 8001a2c:	000f4240 	.word	0x000f4240

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	0002      	movs	r2, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	1dfb      	adds	r3, r7, #7
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b7f      	cmp	r3, #127	; 0x7f
 8001a44:	d828      	bhi.n	8001a98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a46:	4a2f      	ldr	r2, [pc, #188]	; (8001b04 <__NVIC_SetPriority+0xd4>)
 8001a48:	1dfb      	adds	r3, r7, #7
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b25b      	sxtb	r3, r3
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	33c0      	adds	r3, #192	; 0xc0
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	589b      	ldr	r3, [r3, r2]
 8001a56:	1dfa      	adds	r2, r7, #7
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	400a      	ands	r2, r1
 8001a60:	00d2      	lsls	r2, r2, #3
 8001a62:	21ff      	movs	r1, #255	; 0xff
 8001a64:	4091      	lsls	r1, r2
 8001a66:	000a      	movs	r2, r1
 8001a68:	43d2      	mvns	r2, r2
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	019b      	lsls	r3, r3, #6
 8001a72:	22ff      	movs	r2, #255	; 0xff
 8001a74:	401a      	ands	r2, r3
 8001a76:	1dfb      	adds	r3, r7, #7
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	4003      	ands	r3, r0
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a84:	481f      	ldr	r0, [pc, #124]	; (8001b04 <__NVIC_SetPriority+0xd4>)
 8001a86:	1dfb      	adds	r3, r7, #7
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	33c0      	adds	r3, #192	; 0xc0
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a96:	e031      	b.n	8001afc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a98:	4a1b      	ldr	r2, [pc, #108]	; (8001b08 <__NVIC_SetPriority+0xd8>)
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	400b      	ands	r3, r1
 8001aa4:	3b08      	subs	r3, #8
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3306      	adds	r3, #6
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	18d3      	adds	r3, r2, r3
 8001aae:	3304      	adds	r3, #4
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	1dfa      	adds	r2, r7, #7
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	0011      	movs	r1, r2
 8001ab8:	2203      	movs	r2, #3
 8001aba:	400a      	ands	r2, r1
 8001abc:	00d2      	lsls	r2, r2, #3
 8001abe:	21ff      	movs	r1, #255	; 0xff
 8001ac0:	4091      	lsls	r1, r2
 8001ac2:	000a      	movs	r2, r1
 8001ac4:	43d2      	mvns	r2, r2
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	019b      	lsls	r3, r3, #6
 8001ace:	22ff      	movs	r2, #255	; 0xff
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	2303      	movs	r3, #3
 8001ada:	4003      	ands	r3, r0
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae0:	4809      	ldr	r0, [pc, #36]	; (8001b08 <__NVIC_SetPriority+0xd8>)
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	001c      	movs	r4, r3
 8001ae8:	230f      	movs	r3, #15
 8001aea:	4023      	ands	r3, r4
 8001aec:	3b08      	subs	r3, #8
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	430a      	orrs	r2, r1
 8001af2:	3306      	adds	r3, #6
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	18c3      	adds	r3, r0, r3
 8001af8:	3304      	adds	r3, #4
 8001afa:	601a      	str	r2, [r3, #0]
}
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b003      	add	sp, #12
 8001b02:	bd90      	pop	{r4, r7, pc}
 8001b04:	e000e100 	.word	0xe000e100
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	1e5a      	subs	r2, r3, #1
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	045b      	lsls	r3, r3, #17
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d301      	bcc.n	8001b24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b20:	2301      	movs	r3, #1
 8001b22:	e010      	b.n	8001b46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <SysTick_Config+0x44>)
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	3a01      	subs	r2, #1
 8001b2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	425b      	negs	r3, r3
 8001b30:	2103      	movs	r1, #3
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7ff ff7c 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <SysTick_Config+0x44>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <SysTick_Config+0x44>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b002      	add	sp, #8
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	210f      	movs	r1, #15
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	1c02      	adds	r2, r0, #0
 8001b64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	187b      	adds	r3, r7, r1
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	0011      	movs	r1, r2
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff ff5d 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f7ff ffbf 	bl	8001b0c <SysTick_Config>
 8001b8e:	0003      	movs	r3, r0
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b002      	add	sp, #8
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bae:	e155      	b.n	8001e5c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4091      	lsls	r1, r2
 8001bba:	000a      	movs	r2, r1
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d100      	bne.n	8001bc8 <HAL_GPIO_Init+0x30>
 8001bc6:	e146      	b.n	8001e56 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2203      	movs	r2, #3
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d005      	beq.n	8001be0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d130      	bne.n	8001c42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	409a      	lsls	r2, r3
 8001bee:	0013      	movs	r3, r2
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	409a      	lsls	r2, r3
 8001c02:	0013      	movs	r3, r2
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c16:	2201      	movs	r2, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	0013      	movs	r3, r2
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
 8001c34:	0013      	movs	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2203      	movs	r2, #3
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d017      	beq.n	8001c7e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	0013      	movs	r3, r2
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	0013      	movs	r3, r2
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2203      	movs	r2, #3
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d123      	bne.n	8001cd2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	58d3      	ldr	r3, [r2, r3]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2207      	movs	r2, #7
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2107      	movs	r1, #7
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	6939      	ldr	r1, [r7, #16]
 8001cd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	0013      	movs	r3, r2
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	23c0      	movs	r3, #192	; 0xc0
 8001d0c:	029b      	lsls	r3, r3, #10
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d100      	bne.n	8001d14 <HAL_GPIO_Init+0x17c>
 8001d12:	e0a0      	b.n	8001e56 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d14:	4b57      	ldr	r3, [pc, #348]	; (8001e74 <HAL_GPIO_Init+0x2dc>)
 8001d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d18:	4b56      	ldr	r3, [pc, #344]	; (8001e74 <HAL_GPIO_Init+0x2dc>)
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d20:	4a55      	ldr	r2, [pc, #340]	; (8001e78 <HAL_GPIO_Init+0x2e0>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	589b      	ldr	r3, [r3, r2]
 8001d2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2203      	movs	r2, #3
 8001d32:	4013      	ands	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	0013      	movs	r3, r2
 8001d3c:	43da      	mvns	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	23a0      	movs	r3, #160	; 0xa0
 8001d48:	05db      	lsls	r3, r3, #23
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d01f      	beq.n	8001d8e <HAL_GPIO_Init+0x1f6>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4a      	ldr	r2, [pc, #296]	; (8001e7c <HAL_GPIO_Init+0x2e4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d019      	beq.n	8001d8a <HAL_GPIO_Init+0x1f2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a49      	ldr	r2, [pc, #292]	; (8001e80 <HAL_GPIO_Init+0x2e8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_GPIO_Init+0x1ee>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a48      	ldr	r2, [pc, #288]	; (8001e84 <HAL_GPIO_Init+0x2ec>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00d      	beq.n	8001d82 <HAL_GPIO_Init+0x1ea>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a47      	ldr	r2, [pc, #284]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d007      	beq.n	8001d7e <HAL_GPIO_Init+0x1e6>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a46      	ldr	r2, [pc, #280]	; (8001e8c <HAL_GPIO_Init+0x2f4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d101      	bne.n	8001d7a <HAL_GPIO_Init+0x1e2>
 8001d76:	2305      	movs	r3, #5
 8001d78:	e00a      	b.n	8001d90 <HAL_GPIO_Init+0x1f8>
 8001d7a:	2306      	movs	r3, #6
 8001d7c:	e008      	b.n	8001d90 <HAL_GPIO_Init+0x1f8>
 8001d7e:	2304      	movs	r3, #4
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x1f8>
 8001d82:	2303      	movs	r3, #3
 8001d84:	e004      	b.n	8001d90 <HAL_GPIO_Init+0x1f8>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_Init+0x1f8>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_Init+0x1f8>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	2103      	movs	r1, #3
 8001d94:	400a      	ands	r2, r1
 8001d96:	0092      	lsls	r2, r2, #2
 8001d98:	4093      	lsls	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da0:	4935      	ldr	r1, [pc, #212]	; (8001e78 <HAL_GPIO_Init+0x2e0>)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3302      	adds	r3, #2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dae:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <HAL_GPIO_Init+0x2f8>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43da      	mvns	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	035b      	lsls	r3, r3, #13
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dd2:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x2f8>)
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <HAL_GPIO_Init+0x2f8>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	43da      	mvns	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	039b      	lsls	r3, r3, #14
 8001df0:	4013      	ands	r3, r2
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_GPIO_Init+0x2f8>)
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001e02:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_GPIO_Init+0x2f8>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	029b      	lsls	r3, r3, #10
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_GPIO_Init+0x2f8>)
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_GPIO_Init+0x2f8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43da      	mvns	r2, r3
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	025b      	lsls	r3, r3, #9
 8001e44:	4013      	ands	r3, r2
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_GPIO_Init+0x2f8>)
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	40da      	lsrs	r2, r3
 8001e64:	1e13      	subs	r3, r2, #0
 8001e66:	d000      	beq.n	8001e6a <HAL_GPIO_Init+0x2d2>
 8001e68:	e6a2      	b.n	8001bb0 <HAL_GPIO_Init+0x18>
  }
}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b006      	add	sp, #24
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	50000400 	.word	0x50000400
 8001e80:	50000800 	.word	0x50000800
 8001e84:	50000c00 	.word	0x50000c00
 8001e88:	50001000 	.word	0x50001000
 8001e8c:	50001c00 	.word	0x50001c00
 8001e90:	40010400 	.word	0x40010400

08001e94 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	000a      	movs	r2, r1
 8001e9e:	1cbb      	adds	r3, r7, #2
 8001ea0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	1cba      	adds	r2, r7, #2
 8001ea8:	8812      	ldrh	r2, [r2, #0]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001eae:	230f      	movs	r3, #15
 8001eb0:	18fb      	adds	r3, r7, r3
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e003      	b.n	8001ec0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eb8:	230f      	movs	r3, #15
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	781b      	ldrb	r3, [r3, #0]
}
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b004      	add	sp, #16
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	0008      	movs	r0, r1
 8001ed8:	0011      	movs	r1, r2
 8001eda:	1cbb      	adds	r3, r7, #2
 8001edc:	1c02      	adds	r2, r0, #0
 8001ede:	801a      	strh	r2, [r3, #0]
 8001ee0:	1c7b      	adds	r3, r7, #1
 8001ee2:	1c0a      	adds	r2, r1, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ee6:	1c7b      	adds	r3, r7, #1
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d004      	beq.n	8001ef8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eee:	1cbb      	adds	r3, r7, #2
 8001ef0:	881a      	ldrh	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ef6:	e003      	b.n	8001f00 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ef8:	1cbb      	adds	r3, r7, #2
 8001efa:	881a      	ldrh	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f00:	46c0      	nop			; (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b002      	add	sp, #8
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e082      	b.n	8002020 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2241      	movs	r2, #65	; 0x41
 8001f1e:	5c9b      	ldrb	r3, [r3, r2]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d107      	bne.n	8001f36 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2240      	movs	r2, #64	; 0x40
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7ff f849 	bl	8000fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2241      	movs	r2, #65	; 0x41
 8001f3a:	2124      	movs	r1, #36	; 0x24
 8001f3c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	438a      	bics	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4934      	ldr	r1, [pc, #208]	; (8002028 <HAL_I2C_Init+0x120>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4931      	ldr	r1, [pc, #196]	; (800202c <HAL_I2C_Init+0x124>)
 8001f68:	400a      	ands	r2, r1
 8001f6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d108      	bne.n	8001f86 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2180      	movs	r1, #128	; 0x80
 8001f7e:	0209      	lsls	r1, r1, #8
 8001f80:	430a      	orrs	r2, r1
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	e007      	b.n	8001f96 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2184      	movs	r1, #132	; 0x84
 8001f90:	0209      	lsls	r1, r1, #8
 8001f92:	430a      	orrs	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d104      	bne.n	8001fa8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	491f      	ldr	r1, [pc, #124]	; (8002030 <HAL_I2C_Init+0x128>)
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	491a      	ldr	r1, [pc, #104]	; (800202c <HAL_I2C_Init+0x124>)
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69d9      	ldr	r1, [r3, #28]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1a      	ldr	r2, [r3, #32]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	430a      	orrs	r2, r1
 8002000:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2241      	movs	r2, #65	; 0x41
 800200c:	2120      	movs	r1, #32
 800200e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2242      	movs	r2, #66	; 0x42
 800201a:	2100      	movs	r1, #0
 800201c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b002      	add	sp, #8
 8002026:	bd80      	pop	{r7, pc}
 8002028:	f0ffffff 	.word	0xf0ffffff
 800202c:	ffff7fff 	.word	0xffff7fff
 8002030:	02008000 	.word	0x02008000

08002034 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	000c      	movs	r4, r1
 800203e:	0010      	movs	r0, r2
 8002040:	0019      	movs	r1, r3
 8002042:	230a      	movs	r3, #10
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	1c22      	adds	r2, r4, #0
 8002048:	801a      	strh	r2, [r3, #0]
 800204a:	2308      	movs	r3, #8
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	1c02      	adds	r2, r0, #0
 8002050:	801a      	strh	r2, [r3, #0]
 8002052:	1dbb      	adds	r3, r7, #6
 8002054:	1c0a      	adds	r2, r1, #0
 8002056:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2241      	movs	r2, #65	; 0x41
 800205c:	5c9b      	ldrb	r3, [r3, r2]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b20      	cmp	r3, #32
 8002062:	d000      	beq.n	8002066 <HAL_I2C_Mem_Write+0x32>
 8002064:	e10c      	b.n	8002280 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <HAL_I2C_Mem_Write+0x42>
 800206c:	232c      	movs	r3, #44	; 0x2c
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	0092      	lsls	r2, r2, #2
 800207c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0ff      	b.n	8002282 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2240      	movs	r2, #64	; 0x40
 8002086:	5c9b      	ldrb	r3, [r3, r2]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2C_Mem_Write+0x5c>
 800208c:	2302      	movs	r3, #2
 800208e:	e0f8      	b.n	8002282 <HAL_I2C_Mem_Write+0x24e>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2240      	movs	r2, #64	; 0x40
 8002094:	2101      	movs	r1, #1
 8002096:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002098:	f7ff f904 	bl	80012a4 <HAL_GetTick>
 800209c:	0003      	movs	r3, r0
 800209e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	0219      	lsls	r1, r3, #8
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2319      	movs	r3, #25
 80020ac:	2201      	movs	r2, #1
 80020ae:	f000 fc25 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0e3      	b.n	8002282 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2241      	movs	r2, #65	; 0x41
 80020be:	2121      	movs	r1, #33	; 0x21
 80020c0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2242      	movs	r2, #66	; 0x42
 80020c6:	2140      	movs	r1, #64	; 0x40
 80020c8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	222c      	movs	r2, #44	; 0x2c
 80020da:	18ba      	adds	r2, r7, r2
 80020dc:	8812      	ldrh	r2, [r2, #0]
 80020de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020e6:	1dbb      	adds	r3, r7, #6
 80020e8:	881c      	ldrh	r4, [r3, #0]
 80020ea:	2308      	movs	r3, #8
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	881a      	ldrh	r2, [r3, #0]
 80020f0:	230a      	movs	r3, #10
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	8819      	ldrh	r1, [r3, #0]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	0023      	movs	r3, r4
 8002102:	f000 fb13 	bl	800272c <I2C_RequestMemoryWrite>
 8002106:	1e03      	subs	r3, r0, #0
 8002108:	d005      	beq.n	8002116 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2240      	movs	r2, #64	; 0x40
 800210e:	2100      	movs	r1, #0
 8002110:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e0b5      	b.n	8002282 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211a:	b29b      	uxth	r3, r3
 800211c:	2bff      	cmp	r3, #255	; 0xff
 800211e:	d911      	bls.n	8002144 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	22ff      	movs	r2, #255	; 0xff
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212a:	b2da      	uxtb	r2, r3
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	045c      	lsls	r4, r3, #17
 8002130:	230a      	movs	r3, #10
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	8819      	ldrh	r1, [r3, #0]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	2300      	movs	r3, #0
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	0023      	movs	r3, r4
 800213e:	f000 fdb5 	bl	8002cac <I2C_TransferConfig>
 8002142:	e012      	b.n	800216a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002152:	b2da      	uxtb	r2, r3
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	049c      	lsls	r4, r3, #18
 8002158:	230a      	movs	r3, #10
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	8819      	ldrh	r1, [r3, #0]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	2300      	movs	r3, #0
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	0023      	movs	r3, r4
 8002166:	f000 fda1 	bl	8002cac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	0018      	movs	r0, r3
 8002172:	f000 fc11 	bl	8002998 <I2C_WaitOnTXISFlagUntilTimeout>
 8002176:	1e03      	subs	r3, r0, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e081      	b.n	8002282 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d03a      	beq.n	800222e <HAL_I2C_Mem_Write+0x1fa>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d136      	bne.n	800222e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	0013      	movs	r3, r2
 80021ca:	2200      	movs	r2, #0
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	f000 fb95 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 80021d2:	1e03      	subs	r3, r0, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e053      	b.n	8002282 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2bff      	cmp	r3, #255	; 0xff
 80021e2:	d911      	bls.n	8002208 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	22ff      	movs	r2, #255	; 0xff
 80021e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	045c      	lsls	r4, r3, #17
 80021f4:	230a      	movs	r3, #10
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	8819      	ldrh	r1, [r3, #0]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	2300      	movs	r3, #0
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	0023      	movs	r3, r4
 8002202:	f000 fd53 	bl	8002cac <I2C_TransferConfig>
 8002206:	e012      	b.n	800222e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	b2da      	uxtb	r2, r3
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	049c      	lsls	r4, r3, #18
 800221c:	230a      	movs	r3, #10
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	8819      	ldrh	r1, [r3, #0]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	2300      	movs	r3, #0
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	0023      	movs	r3, r4
 800222a:	f000 fd3f 	bl	8002cac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002232:	b29b      	uxth	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d198      	bne.n	800216a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	0018      	movs	r0, r3
 8002240:	f000 fbf0 	bl	8002a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002244:	1e03      	subs	r3, r0, #0
 8002246:	d001      	beq.n	800224c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e01a      	b.n	8002282 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2220      	movs	r2, #32
 8002252:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	490b      	ldr	r1, [pc, #44]	; (800228c <HAL_I2C_Mem_Write+0x258>)
 8002260:	400a      	ands	r2, r1
 8002262:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2241      	movs	r2, #65	; 0x41
 8002268:	2120      	movs	r1, #32
 800226a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2242      	movs	r2, #66	; 0x42
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2240      	movs	r2, #64	; 0x40
 8002278:	2100      	movs	r1, #0
 800227a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	e000      	b.n	8002282 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002280:	2302      	movs	r3, #2
  }
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b007      	add	sp, #28
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	fe00e800 	.word	0xfe00e800

08002290 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	000c      	movs	r4, r1
 800229a:	0010      	movs	r0, r2
 800229c:	0019      	movs	r1, r3
 800229e:	230a      	movs	r3, #10
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	1c22      	adds	r2, r4, #0
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	2308      	movs	r3, #8
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	1c02      	adds	r2, r0, #0
 80022ac:	801a      	strh	r2, [r3, #0]
 80022ae:	1dbb      	adds	r3, r7, #6
 80022b0:	1c0a      	adds	r2, r1, #0
 80022b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2241      	movs	r2, #65	; 0x41
 80022b8:	5c9b      	ldrb	r3, [r3, r2]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b20      	cmp	r3, #32
 80022be:	d000      	beq.n	80022c2 <HAL_I2C_Mem_Read+0x32>
 80022c0:	e110      	b.n	80024e4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <HAL_I2C_Mem_Read+0x42>
 80022c8:	232c      	movs	r3, #44	; 0x2c
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2280      	movs	r2, #128	; 0x80
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e103      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2240      	movs	r2, #64	; 0x40
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_I2C_Mem_Read+0x5c>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e0fc      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	2101      	movs	r1, #1
 80022f2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022f4:	f7fe ffd6 	bl	80012a4 <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	0219      	lsls	r1, r3, #8
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	2319      	movs	r3, #25
 8002308:	2201      	movs	r2, #1
 800230a:	f000 faf7 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0e7      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2241      	movs	r2, #65	; 0x41
 800231a:	2122      	movs	r1, #34	; 0x22
 800231c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2242      	movs	r2, #66	; 0x42
 8002322:	2140      	movs	r1, #64	; 0x40
 8002324:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	222c      	movs	r2, #44	; 0x2c
 8002336:	18ba      	adds	r2, r7, r2
 8002338:	8812      	ldrh	r2, [r2, #0]
 800233a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002342:	1dbb      	adds	r3, r7, #6
 8002344:	881c      	ldrh	r4, [r3, #0]
 8002346:	2308      	movs	r3, #8
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	881a      	ldrh	r2, [r3, #0]
 800234c:	230a      	movs	r3, #10
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	8819      	ldrh	r1, [r3, #0]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	0023      	movs	r3, r4
 800235e:	f000 fa49 	bl	80027f4 <I2C_RequestMemoryRead>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d005      	beq.n	8002372 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2240      	movs	r2, #64	; 0x40
 800236a:	2100      	movs	r1, #0
 800236c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0b9      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	2bff      	cmp	r3, #255	; 0xff
 800237a:	d911      	bls.n	80023a0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	22ff      	movs	r2, #255	; 0xff
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	b2da      	uxtb	r2, r3
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	045c      	lsls	r4, r3, #17
 800238c:	230a      	movs	r3, #10
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	8819      	ldrh	r1, [r3, #0]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	4b56      	ldr	r3, [pc, #344]	; (80024f0 <HAL_I2C_Mem_Read+0x260>)
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	0023      	movs	r3, r4
 800239a:	f000 fc87 	bl	8002cac <I2C_TransferConfig>
 800239e:	e012      	b.n	80023c6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	049c      	lsls	r4, r3, #18
 80023b4:	230a      	movs	r3, #10
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	8819      	ldrh	r1, [r3, #0]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	4b4c      	ldr	r3, [pc, #304]	; (80024f0 <HAL_I2C_Mem_Read+0x260>)
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	0023      	movs	r3, r4
 80023c2:	f000 fc73 	bl	8002cac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	0013      	movs	r3, r2
 80023d0:	2200      	movs	r2, #0
 80023d2:	2104      	movs	r1, #4
 80023d4:	f000 fa92 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 80023d8:	1e03      	subs	r3, r0, #0
 80023da:	d001      	beq.n	80023e0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e082      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d03a      	beq.n	8002492 <HAL_I2C_Mem_Read+0x202>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	2b00      	cmp	r3, #0
 8002422:	d136      	bne.n	8002492 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	0013      	movs	r3, r2
 800242e:	2200      	movs	r2, #0
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	f000 fa63 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 8002436:	1e03      	subs	r3, r0, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e053      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	2bff      	cmp	r3, #255	; 0xff
 8002446:	d911      	bls.n	800246c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	22ff      	movs	r2, #255	; 0xff
 800244c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	b2da      	uxtb	r2, r3
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	045c      	lsls	r4, r3, #17
 8002458:	230a      	movs	r3, #10
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	8819      	ldrh	r1, [r3, #0]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	2300      	movs	r3, #0
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	0023      	movs	r3, r4
 8002466:	f000 fc21 	bl	8002cac <I2C_TransferConfig>
 800246a:	e012      	b.n	8002492 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	b2da      	uxtb	r2, r3
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	049c      	lsls	r4, r3, #18
 8002480:	230a      	movs	r3, #10
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	8819      	ldrh	r1, [r3, #0]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	2300      	movs	r3, #0
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	0023      	movs	r3, r4
 800248e:	f000 fc0d 	bl	8002cac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d194      	bne.n	80023c6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 fabe 	bl	8002a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024a8:	1e03      	subs	r3, r0, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e01a      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2220      	movs	r2, #32
 80024b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	490c      	ldr	r1, [pc, #48]	; (80024f4 <HAL_I2C_Mem_Read+0x264>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2241      	movs	r2, #65	; 0x41
 80024cc:	2120      	movs	r1, #32
 80024ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2242      	movs	r2, #66	; 0x42
 80024d4:	2100      	movs	r1, #0
 80024d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2240      	movs	r2, #64	; 0x40
 80024dc:	2100      	movs	r1, #0
 80024de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e000      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
  }
}
 80024e6:	0018      	movs	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b007      	add	sp, #28
 80024ec:	bd90      	pop	{r4, r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	80002400 	.word	0x80002400
 80024f4:	fe00e800 	.word	0xfe00e800

080024f8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	230a      	movs	r3, #10
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	1c0a      	adds	r2, r1, #0
 800250a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2241      	movs	r2, #65	; 0x41
 8002514:	5c9b      	ldrb	r3, [r3, r2]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b20      	cmp	r3, #32
 800251a:	d000      	beq.n	800251e <HAL_I2C_IsDeviceReady+0x26>
 800251c:	e0fd      	b.n	800271a <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	401a      	ands	r2, r3
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	429a      	cmp	r2, r3
 8002530:	d101      	bne.n	8002536 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002532:	2302      	movs	r3, #2
 8002534:	e0f2      	b.n	800271c <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2240      	movs	r2, #64	; 0x40
 800253a:	5c9b      	ldrb	r3, [r3, r2]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_I2C_IsDeviceReady+0x4c>
 8002540:	2302      	movs	r3, #2
 8002542:	e0eb      	b.n	800271c <HAL_I2C_IsDeviceReady+0x224>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2240      	movs	r2, #64	; 0x40
 8002548:	2101      	movs	r1, #1
 800254a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2241      	movs	r2, #65	; 0x41
 8002550:	2124      	movs	r1, #36	; 0x24
 8002552:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_I2C_IsDeviceReady+0x7a>
 8002562:	230a      	movs	r3, #10
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	059b      	lsls	r3, r3, #22
 800256a:	0d9b      	lsrs	r3, r3, #22
 800256c:	4a6d      	ldr	r2, [pc, #436]	; (8002724 <HAL_I2C_IsDeviceReady+0x22c>)
 800256e:	431a      	orrs	r2, r3
 8002570:	e006      	b.n	8002580 <HAL_I2C_IsDeviceReady+0x88>
 8002572:	230a      	movs	r3, #10
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	059b      	lsls	r3, r3, #22
 800257a:	0d9b      	lsrs	r3, r3, #22
 800257c:	4a6a      	ldr	r2, [pc, #424]	; (8002728 <HAL_I2C_IsDeviceReady+0x230>)
 800257e:	431a      	orrs	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002586:	f7fe fe8d 	bl	80012a4 <HAL_GetTick>
 800258a:	0003      	movs	r3, r0
 800258c:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2220      	movs	r2, #32
 8002596:	4013      	ands	r3, r2
 8002598:	3b20      	subs	r3, #32
 800259a:	425a      	negs	r2, r3
 800259c:	4153      	adcs	r3, r2
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	231f      	movs	r3, #31
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2210      	movs	r2, #16
 80025ae:	4013      	ands	r3, r2
 80025b0:	3b10      	subs	r3, #16
 80025b2:	425a      	negs	r2, r3
 80025b4:	4153      	adcs	r3, r2
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	231e      	movs	r3, #30
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80025be:	e035      	b.n	800262c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	3301      	adds	r3, #1
 80025c4:	d01a      	beq.n	80025fc <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025c6:	f7fe fe6d 	bl	80012a4 <HAL_GetTick>
 80025ca:	0002      	movs	r2, r0
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d302      	bcc.n	80025dc <HAL_I2C_IsDeviceReady+0xe4>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10f      	bne.n	80025fc <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2241      	movs	r2, #65	; 0x41
 80025e0:	2120      	movs	r1, #32
 80025e2:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	2220      	movs	r2, #32
 80025ea:	431a      	orrs	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2240      	movs	r2, #64	; 0x40
 80025f4:	2100      	movs	r1, #0
 80025f6:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e08f      	b.n	800271c <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2220      	movs	r2, #32
 8002604:	4013      	ands	r3, r2
 8002606:	3b20      	subs	r3, #32
 8002608:	425a      	negs	r2, r3
 800260a:	4153      	adcs	r3, r2
 800260c:	b2da      	uxtb	r2, r3
 800260e:	231f      	movs	r3, #31
 8002610:	18fb      	adds	r3, r7, r3
 8002612:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2210      	movs	r2, #16
 800261c:	4013      	ands	r3, r2
 800261e:	3b10      	subs	r3, #16
 8002620:	425a      	negs	r2, r3
 8002622:	4153      	adcs	r3, r2
 8002624:	b2da      	uxtb	r2, r3
 8002626:	231e      	movs	r3, #30
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800262c:	231f      	movs	r3, #31
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d104      	bne.n	8002640 <HAL_I2C_IsDeviceReady+0x148>
 8002636:	231e      	movs	r3, #30
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0bf      	beq.n	80025c0 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2210      	movs	r2, #16
 8002648:	4013      	ands	r3, r2
 800264a:	2b10      	cmp	r3, #16
 800264c:	d01a      	beq.n	8002684 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	0013      	movs	r3, r2
 8002658:	2200      	movs	r2, #0
 800265a:	2120      	movs	r1, #32
 800265c:	f000 f94e 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d001      	beq.n	8002668 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e059      	b.n	800271c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2220      	movs	r2, #32
 800266e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2241      	movs	r2, #65	; 0x41
 8002674:	2120      	movs	r1, #32
 8002676:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2240      	movs	r2, #64	; 0x40
 800267c:	2100      	movs	r1, #0
 800267e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e04b      	b.n	800271c <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	0013      	movs	r3, r2
 800268e:	2200      	movs	r2, #0
 8002690:	2120      	movs	r1, #32
 8002692:	f000 f933 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 8002696:	1e03      	subs	r3, r0, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e03e      	b.n	800271c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2210      	movs	r2, #16
 80026a4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2220      	movs	r2, #32
 80026ac:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d119      	bne.n	80026ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2180      	movs	r1, #128	; 0x80
 80026c2:	01c9      	lsls	r1, r1, #7
 80026c4:	430a      	orrs	r2, r1
 80026c6:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	0013      	movs	r3, r2
 80026d2:	2200      	movs	r2, #0
 80026d4:	2120      	movs	r1, #32
 80026d6:	f000 f911 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 80026da:	1e03      	subs	r3, r0, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e01c      	b.n	800271c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2220      	movs	r2, #32
 80026e8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3301      	adds	r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d900      	bls.n	80026fa <HAL_I2C_IsDeviceReady+0x202>
 80026f8:	e72f      	b.n	800255a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2241      	movs	r2, #65	; 0x41
 80026fe:	2120      	movs	r1, #32
 8002700:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	2220      	movs	r2, #32
 8002708:	431a      	orrs	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2240      	movs	r2, #64	; 0x40
 8002712:	2100      	movs	r1, #0
 8002714:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 800271a:	2302      	movs	r3, #2
  }
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b008      	add	sp, #32
 8002722:	bd80      	pop	{r7, pc}
 8002724:	02002000 	.word	0x02002000
 8002728:	02002800 	.word	0x02002800

0800272c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	000c      	movs	r4, r1
 8002736:	0010      	movs	r0, r2
 8002738:	0019      	movs	r1, r3
 800273a:	250a      	movs	r5, #10
 800273c:	197b      	adds	r3, r7, r5
 800273e:	1c22      	adds	r2, r4, #0
 8002740:	801a      	strh	r2, [r3, #0]
 8002742:	2308      	movs	r3, #8
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	1c02      	adds	r2, r0, #0
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	1dbb      	adds	r3, r7, #6
 800274c:	1c0a      	adds	r2, r1, #0
 800274e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002750:	1dbb      	adds	r3, r7, #6
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	045c      	lsls	r4, r3, #17
 800275a:	197b      	adds	r3, r7, r5
 800275c:	8819      	ldrh	r1, [r3, #0]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <I2C_RequestMemoryWrite+0xc4>)
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	0023      	movs	r3, r4
 8002766:	f000 faa1 	bl	8002cac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	6a39      	ldr	r1, [r7, #32]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f911 	bl	8002998 <I2C_WaitOnTXISFlagUntilTimeout>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d001      	beq.n	800277e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e033      	b.n	80027e6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800277e:	1dbb      	adds	r3, r7, #6
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d107      	bne.n	8002796 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002786:	2308      	movs	r3, #8
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
 8002794:	e019      	b.n	80027ca <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002796:	2308      	movs	r3, #8
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	b29b      	uxth	r3, r3
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027aa:	6a39      	ldr	r1, [r7, #32]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 f8f2 	bl	8002998 <I2C_WaitOnTXISFlagUntilTimeout>
 80027b4:	1e03      	subs	r3, r0, #0
 80027b6:	d001      	beq.n	80027bc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e014      	b.n	80027e6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027bc:	2308      	movs	r3, #8
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027ca:	6a3a      	ldr	r2, [r7, #32]
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	0013      	movs	r3, r2
 80027d4:	2200      	movs	r2, #0
 80027d6:	2180      	movs	r1, #128	; 0x80
 80027d8:	f000 f890 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d001      	beq.n	80027e4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b004      	add	sp, #16
 80027ec:	bdb0      	pop	{r4, r5, r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	80002000 	.word	0x80002000

080027f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80027f4:	b5b0      	push	{r4, r5, r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	000c      	movs	r4, r1
 80027fe:	0010      	movs	r0, r2
 8002800:	0019      	movs	r1, r3
 8002802:	250a      	movs	r5, #10
 8002804:	197b      	adds	r3, r7, r5
 8002806:	1c22      	adds	r2, r4, #0
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	2308      	movs	r3, #8
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	1c02      	adds	r2, r0, #0
 8002810:	801a      	strh	r2, [r3, #0]
 8002812:	1dbb      	adds	r3, r7, #6
 8002814:	1c0a      	adds	r2, r1, #0
 8002816:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002818:	1dbb      	adds	r3, r7, #6
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	197b      	adds	r3, r7, r5
 8002820:	8819      	ldrh	r1, [r3, #0]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <I2C_RequestMemoryRead+0xc0>)
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2300      	movs	r3, #0
 800282a:	f000 fa3f 	bl	8002cac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	6a39      	ldr	r1, [r7, #32]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	0018      	movs	r0, r3
 8002836:	f000 f8af 	bl	8002998 <I2C_WaitOnTXISFlagUntilTimeout>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d001      	beq.n	8002842 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e033      	b.n	80028aa <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002842:	1dbb      	adds	r3, r7, #6
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800284a:	2308      	movs	r3, #8
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
 8002858:	e019      	b.n	800288e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800285a:	2308      	movs	r3, #8
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	b29b      	uxth	r3, r3
 8002864:	b2da      	uxtb	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286e:	6a39      	ldr	r1, [r7, #32]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	0018      	movs	r0, r3
 8002874:	f000 f890 	bl	8002998 <I2C_WaitOnTXISFlagUntilTimeout>
 8002878:	1e03      	subs	r3, r0, #0
 800287a:	d001      	beq.n	8002880 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e014      	b.n	80028aa <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002880:	2308      	movs	r3, #8
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800288e:	6a3a      	ldr	r2, [r7, #32]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	0013      	movs	r3, r2
 8002898:	2200      	movs	r2, #0
 800289a:	2140      	movs	r1, #64	; 0x40
 800289c:	f000 f82e 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 80028a0:	1e03      	subs	r3, r0, #0
 80028a2:	d001      	beq.n	80028a8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b004      	add	sp, #16
 80028b0:	bdb0      	pop	{r4, r5, r7, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	80002000 	.word	0x80002000

080028b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2202      	movs	r2, #2
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d103      	bne.n	80028d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2200      	movs	r2, #0
 80028d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2201      	movs	r2, #1
 80028de:	4013      	ands	r3, r2
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d007      	beq.n	80028f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2101      	movs	r1, #1
 80028f0:	430a      	orrs	r2, r1
 80028f2:	619a      	str	r2, [r3, #24]
  }
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b002      	add	sp, #8
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800290c:	e030      	b.n	8002970 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	d02d      	beq.n	8002970 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002914:	f7fe fcc6 	bl	80012a4 <HAL_GetTick>
 8002918:	0002      	movs	r2, r0
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d302      	bcc.n	800292a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d122      	bne.n	8002970 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	4013      	ands	r3, r2
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	425a      	negs	r2, r3
 800293a:	4153      	adcs	r3, r2
 800293c:	b2db      	uxtb	r3, r3
 800293e:	001a      	movs	r2, r3
 8002940:	1dfb      	adds	r3, r7, #7
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d113      	bne.n	8002970 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	2220      	movs	r2, #32
 800294e:	431a      	orrs	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2241      	movs	r2, #65	; 0x41
 8002958:	2120      	movs	r1, #32
 800295a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2242      	movs	r2, #66	; 0x42
 8002960:	2100      	movs	r1, #0
 8002962:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2240      	movs	r2, #64	; 0x40
 8002968:	2100      	movs	r1, #0
 800296a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e00f      	b.n	8002990 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	4013      	ands	r3, r2
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	425a      	negs	r2, r3
 8002980:	4153      	adcs	r3, r2
 8002982:	b2db      	uxtb	r3, r3
 8002984:	001a      	movs	r2, r3
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d0bf      	beq.n	800290e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	b004      	add	sp, #16
 8002996:	bd80      	pop	{r7, pc}

08002998 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029a4:	e032      	b.n	8002a0c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f000 f87d 	bl	8002aac <I2C_IsErrorOccurred>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d001      	beq.n	80029ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e030      	b.n	8002a1c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3301      	adds	r3, #1
 80029be:	d025      	beq.n	8002a0c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c0:	f7fe fc70 	bl	80012a4 <HAL_GetTick>
 80029c4:	0002      	movs	r2, r0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d302      	bcc.n	80029d6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d11a      	bne.n	8002a0c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	2202      	movs	r2, #2
 80029de:	4013      	ands	r3, r2
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d013      	beq.n	8002a0c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	2220      	movs	r2, #32
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2241      	movs	r2, #65	; 0x41
 80029f4:	2120      	movs	r1, #32
 80029f6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2242      	movs	r2, #66	; 0x42
 80029fc:	2100      	movs	r1, #0
 80029fe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2240      	movs	r2, #64	; 0x40
 8002a04:	2100      	movs	r1, #0
 8002a06:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e007      	b.n	8002a1c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2202      	movs	r2, #2
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d1c5      	bne.n	80029a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b004      	add	sp, #16
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a30:	e02f      	b.n	8002a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f000 f837 	bl	8002aac <I2C_IsErrorOccurred>
 8002a3e:	1e03      	subs	r3, r0, #0
 8002a40:	d001      	beq.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e02d      	b.n	8002aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	f7fe fc2d 	bl	80012a4 <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d302      	bcc.n	8002a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d11a      	bne.n	8002a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2220      	movs	r2, #32
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d013      	beq.n	8002a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	2220      	movs	r2, #32
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2241      	movs	r2, #65	; 0x41
 8002a7a:	2120      	movs	r1, #32
 8002a7c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2242      	movs	r2, #66	; 0x42
 8002a82:	2100      	movs	r1, #0
 8002a84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2240      	movs	r2, #64	; 0x40
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e007      	b.n	8002aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d1c8      	bne.n	8002a32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b004      	add	sp, #16
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b08b      	sub	sp, #44	; 0x2c
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab8:	2327      	movs	r3, #39	; 0x27
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2210      	movs	r2, #16
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d100      	bne.n	8002ada <I2C_IsErrorOccurred+0x2e>
 8002ad8:	e082      	b.n	8002be0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2210      	movs	r2, #16
 8002ae0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ae2:	e060      	b.n	8002ba6 <I2C_IsErrorOccurred+0xfa>
 8002ae4:	2427      	movs	r4, #39	; 0x27
 8002ae6:	193b      	adds	r3, r7, r4
 8002ae8:	193a      	adds	r2, r7, r4
 8002aea:	7812      	ldrb	r2, [r2, #0]
 8002aec:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	3301      	adds	r3, #1
 8002af2:	d058      	beq.n	8002ba6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002af4:	f7fe fbd6 	bl	80012a4 <HAL_GetTick>
 8002af8:	0002      	movs	r2, r0
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d306      	bcc.n	8002b12 <I2C_IsErrorOccurred+0x66>
 8002b04:	193b      	adds	r3, r7, r4
 8002b06:	193a      	adds	r2, r7, r4
 8002b08:	7812      	ldrb	r2, [r2, #0]
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d149      	bne.n	8002ba6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	01db      	lsls	r3, r3, #7
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b20:	2013      	movs	r0, #19
 8002b22:	183b      	adds	r3, r7, r0
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	2142      	movs	r1, #66	; 0x42
 8002b28:	5c52      	ldrb	r2, [r2, r1]
 8002b2a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	401a      	ands	r2, r3
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d126      	bne.n	8002b8e <I2C_IsErrorOccurred+0xe2>
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	01db      	lsls	r3, r3, #7
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d021      	beq.n	8002b8e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002b4a:	183b      	adds	r3, r7, r0
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d01d      	beq.n	8002b8e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	01c9      	lsls	r1, r1, #7
 8002b60:	430a      	orrs	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b64:	f7fe fb9e 	bl	80012a4 <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b6c:	e00f      	b.n	8002b8e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b6e:	f7fe fb99 	bl	80012a4 <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b19      	cmp	r3, #25
 8002b7a:	d908      	bls.n	8002b8e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	4313      	orrs	r3, r2
 8002b82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b84:	2327      	movs	r3, #39	; 0x27
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]

              break;
 8002b8c:	e00b      	b.n	8002ba6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2220      	movs	r2, #32
 8002b96:	4013      	ands	r3, r2
 8002b98:	2127      	movs	r1, #39	; 0x27
 8002b9a:	187a      	adds	r2, r7, r1
 8002b9c:	1879      	adds	r1, r7, r1
 8002b9e:	7809      	ldrb	r1, [r1, #0]
 8002ba0:	7011      	strb	r1, [r2, #0]
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	d1e3      	bne.n	8002b6e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2220      	movs	r2, #32
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d004      	beq.n	8002bbe <I2C_IsErrorOccurred+0x112>
 8002bb4:	2327      	movs	r3, #39	; 0x27
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d092      	beq.n	8002ae4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bbe:	2327      	movs	r3, #39	; 0x27
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bd8:	2327      	movs	r3, #39	; 0x27
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d00c      	beq.n	8002c0c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2280      	movs	r2, #128	; 0x80
 8002c00:	0052      	lsls	r2, r2, #1
 8002c02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c04:	2327      	movs	r3, #39	; 0x27
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4013      	ands	r3, r2
 8002c14:	d00c      	beq.n	8002c30 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2208      	movs	r2, #8
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	00d2      	lsls	r2, r2, #3
 8002c26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c28:	2327      	movs	r3, #39	; 0x27
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4013      	ands	r3, r2
 8002c38:	d00c      	beq.n	8002c54 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2280      	movs	r2, #128	; 0x80
 8002c48:	0092      	lsls	r2, r2, #2
 8002c4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c4c:	2327      	movs	r3, #39	; 0x27
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002c54:	2327      	movs	r3, #39	; 0x27
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d01d      	beq.n	8002c9a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7ff fe29 	bl	80028b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	490d      	ldr	r1, [pc, #52]	; (8002ca8 <I2C_IsErrorOccurred+0x1fc>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2241      	movs	r2, #65	; 0x41
 8002c86:	2120      	movs	r1, #32
 8002c88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2242      	movs	r2, #66	; 0x42
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2240      	movs	r2, #64	; 0x40
 8002c96:	2100      	movs	r1, #0
 8002c98:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002c9a:	2327      	movs	r3, #39	; 0x27
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	781b      	ldrb	r3, [r3, #0]
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b00b      	add	sp, #44	; 0x2c
 8002ca6:	bd90      	pop	{r4, r7, pc}
 8002ca8:	fe00e800 	.word	0xfe00e800

08002cac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	0008      	movs	r0, r1
 8002cb6:	0011      	movs	r1, r2
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	240a      	movs	r4, #10
 8002cbc:	193b      	adds	r3, r7, r4
 8002cbe:	1c02      	adds	r2, r0, #0
 8002cc0:	801a      	strh	r2, [r3, #0]
 8002cc2:	2009      	movs	r0, #9
 8002cc4:	183b      	adds	r3, r7, r0
 8002cc6:	1c0a      	adds	r2, r1, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cca:	193b      	adds	r3, r7, r4
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	059b      	lsls	r3, r3, #22
 8002cd0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	0419      	lsls	r1, r3, #16
 8002cd8:	23ff      	movs	r3, #255	; 0xff
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cde:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf6:	0d51      	lsrs	r1, r2, #21
 8002cf8:	2280      	movs	r2, #128	; 0x80
 8002cfa:	00d2      	lsls	r2, r2, #3
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	4907      	ldr	r1, [pc, #28]	; (8002d1c <I2C_TransferConfig+0x70>)
 8002d00:	430a      	orrs	r2, r1
 8002d02:	43d2      	mvns	r2, r2
 8002d04:	401a      	ands	r2, r3
 8002d06:	0011      	movs	r1, r2
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b007      	add	sp, #28
 8002d18:	bd90      	pop	{r4, r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	03ff63ff 	.word	0x03ff63ff

08002d20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2241      	movs	r2, #65	; 0x41
 8002d2e:	5c9b      	ldrb	r3, [r3, r2]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d138      	bne.n	8002da8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2240      	movs	r2, #64	; 0x40
 8002d3a:	5c9b      	ldrb	r3, [r3, r2]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e032      	b.n	8002daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2240      	movs	r2, #64	; 0x40
 8002d48:	2101      	movs	r1, #1
 8002d4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2241      	movs	r2, #65	; 0x41
 8002d50:	2124      	movs	r1, #36	; 0x24
 8002d52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2101      	movs	r1, #1
 8002d60:	438a      	bics	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4911      	ldr	r1, [pc, #68]	; (8002db4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2101      	movs	r1, #1
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2241      	movs	r2, #65	; 0x41
 8002d98:	2120      	movs	r1, #32
 8002d9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2240      	movs	r2, #64	; 0x40
 8002da0:	2100      	movs	r1, #0
 8002da2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b002      	add	sp, #8
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	ffffefff 	.word	0xffffefff

08002db8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2241      	movs	r2, #65	; 0x41
 8002dc6:	5c9b      	ldrb	r3, [r3, r2]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d139      	bne.n	8002e42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2240      	movs	r2, #64	; 0x40
 8002dd2:	5c9b      	ldrb	r3, [r3, r2]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e033      	b.n	8002e44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2240      	movs	r2, #64	; 0x40
 8002de0:	2101      	movs	r1, #1
 8002de2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2241      	movs	r2, #65	; 0x41
 8002de8:	2124      	movs	r1, #36	; 0x24
 8002dea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2101      	movs	r1, #1
 8002df8:	438a      	bics	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2241      	movs	r2, #65	; 0x41
 8002e32:	2120      	movs	r1, #32
 8002e34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2240      	movs	r2, #64	; 0x40
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
  }
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b004      	add	sp, #16
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	fffff0ff 	.word	0xfffff0ff

08002e50 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <HAL_PWR_EnableWakeUpPin+0x1c>)
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <HAL_PWR_EnableWakeUpPin+0x1c>)
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40007000 	.word	0x40007000

08002e70 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2  
  *           @arg PWR_WAKEUP_PIN3  for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_PWR_DisableWakeUpPin+0x20>)
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	43d9      	mvns	r1, r3
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_PWR_DisableWakeUpPin+0x20>)
 8002e82:	400a      	ands	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b002      	add	sp, #8
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	40007000 	.word	0x40007000

08002e94 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002e98:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002eaa:	2104      	movs	r1, #4
 8002eac:	430a      	orrs	r2, r1
 8002eae:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002eb0:	bf30      	wfi
}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40007000 	.word	0x40007000
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec0:	b5b0      	push	{r4, r5, r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f000 fbbf 	bl	8003652 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed4:	4bc9      	ldr	r3, [pc, #804]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	220c      	movs	r2, #12
 8002eda:	4013      	ands	r3, r2
 8002edc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ede:	4bc7      	ldr	r3, [pc, #796]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	025b      	lsls	r3, r3, #9
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d100      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x36>
 8002ef4:	e07e      	b.n	8002ff4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d007      	beq.n	8002f0c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d112      	bne.n	8002f28 <HAL_RCC_OscConfig+0x68>
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	025b      	lsls	r3, r3, #9
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d10d      	bne.n	8002f28 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	4bbb      	ldr	r3, [pc, #748]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	029b      	lsls	r3, r3, #10
 8002f14:	4013      	ands	r3, r2
 8002f16:	d100      	bne.n	8002f1a <HAL_RCC_OscConfig+0x5a>
 8002f18:	e06b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x132>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d167      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f000 fb95 	bl	8003652 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	025b      	lsls	r3, r3, #9
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_OscConfig+0x84>
 8002f34:	4bb1      	ldr	r3, [pc, #708]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4bb0      	ldr	r3, [pc, #704]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002f3a:	2180      	movs	r1, #128	; 0x80
 8002f3c:	0249      	lsls	r1, r1, #9
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e027      	b.n	8002f94 <HAL_RCC_OscConfig+0xd4>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	23a0      	movs	r3, #160	; 0xa0
 8002f4a:	02db      	lsls	r3, r3, #11
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d10e      	bne.n	8002f6e <HAL_RCC_OscConfig+0xae>
 8002f50:	4baa      	ldr	r3, [pc, #680]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4ba9      	ldr	r3, [pc, #676]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	02c9      	lsls	r1, r1, #11
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	4ba7      	ldr	r3, [pc, #668]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4ba6      	ldr	r3, [pc, #664]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	0249      	lsls	r1, r1, #9
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e012      	b.n	8002f94 <HAL_RCC_OscConfig+0xd4>
 8002f6e:	4ba3      	ldr	r3, [pc, #652]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4ba2      	ldr	r3, [pc, #648]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002f74:	49a2      	ldr	r1, [pc, #648]	; (8003200 <HAL_RCC_OscConfig+0x340>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	4ba0      	ldr	r3, [pc, #640]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	025b      	lsls	r3, r3, #9
 8002f82:	4013      	ands	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4b9c      	ldr	r3, [pc, #624]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b9b      	ldr	r3, [pc, #620]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002f8e:	499d      	ldr	r1, [pc, #628]	; (8003204 <HAL_RCC_OscConfig+0x344>)
 8002f90:	400a      	ands	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d015      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe f982 	bl	80012a4 <HAL_GetTick>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fa4:	e009      	b.n	8002fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa6:	f7fe f97d 	bl	80012a4 <HAL_GetTick>
 8002faa:	0002      	movs	r2, r0
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	; 0x64
 8002fb2:	d902      	bls.n	8002fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	f000 fb4c 	bl	8003652 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fba:	4b90      	ldr	r3, [pc, #576]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	029b      	lsls	r3, r3, #10
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d0ef      	beq.n	8002fa6 <HAL_RCC_OscConfig+0xe6>
 8002fc6:	e015      	b.n	8002ff4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fe f96c 	bl	80012a4 <HAL_GetTick>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd2:	f7fe f967 	bl	80012a4 <HAL_GetTick>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b64      	cmp	r3, #100	; 0x64
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e336      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fe4:	4b85      	ldr	r3, [pc, #532]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	029b      	lsls	r3, r3, #10
 8002fec:	4013      	ands	r3, r2
 8002fee:	d1f0      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x112>
 8002ff0:	e000      	b.n	8002ff4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d100      	bne.n	8003000 <HAL_RCC_OscConfig+0x140>
 8002ffe:	e099      	b.n	8003134 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	2220      	movs	r2, #32
 800300a:	4013      	ands	r3, r2
 800300c:	d009      	beq.n	8003022 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800300e:	4b7b      	ldr	r3, [pc, #492]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b7a      	ldr	r3, [pc, #488]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8003014:	2120      	movs	r1, #32
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	2220      	movs	r2, #32
 800301e:	4393      	bics	r3, r2
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d005      	beq.n	8003034 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d13e      	bne.n	80030ac <HAL_RCC_OscConfig+0x1ec>
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d13b      	bne.n	80030ac <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003034:	4b71      	ldr	r3, [pc, #452]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2204      	movs	r2, #4
 800303a:	4013      	ands	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_RCC_OscConfig+0x188>
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e304      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b6c      	ldr	r3, [pc, #432]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a6e      	ldr	r2, [pc, #440]	; (8003208 <HAL_RCC_OscConfig+0x348>)
 800304e:	4013      	ands	r3, r2
 8003050:	0019      	movs	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	021a      	lsls	r2, r3, #8
 8003058:	4b68      	ldr	r3, [pc, #416]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800305e:	4b67      	ldr	r3, [pc, #412]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2209      	movs	r2, #9
 8003064:	4393      	bics	r3, r2
 8003066:	0019      	movs	r1, r3
 8003068:	4b64      	ldr	r3, [pc, #400]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 800306a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306c:	430a      	orrs	r2, r1
 800306e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003070:	f000 fc42 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8003074:	0001      	movs	r1, r0
 8003076:	4b61      	ldr	r3, [pc, #388]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	220f      	movs	r2, #15
 800307e:	4013      	ands	r3, r2
 8003080:	4a62      	ldr	r2, [pc, #392]	; (800320c <HAL_RCC_OscConfig+0x34c>)
 8003082:	5cd3      	ldrb	r3, [r2, r3]
 8003084:	000a      	movs	r2, r1
 8003086:	40da      	lsrs	r2, r3
 8003088:	4b61      	ldr	r3, [pc, #388]	; (8003210 <HAL_RCC_OscConfig+0x350>)
 800308a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800308c:	4b61      	ldr	r3, [pc, #388]	; (8003214 <HAL_RCC_OscConfig+0x354>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2513      	movs	r5, #19
 8003092:	197c      	adds	r4, r7, r5
 8003094:	0018      	movs	r0, r3
 8003096:	f7fe f8bf 	bl	8001218 <HAL_InitTick>
 800309a:	0003      	movs	r3, r0
 800309c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800309e:	197b      	adds	r3, r7, r5
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d046      	beq.n	8003134 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80030a6:	197b      	adds	r3, r7, r5
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	e2d2      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d027      	beq.n	8003102 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80030b2:	4b52      	ldr	r3, [pc, #328]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2209      	movs	r2, #9
 80030b8:	4393      	bics	r3, r2
 80030ba:	0019      	movs	r1, r3
 80030bc:	4b4f      	ldr	r3, [pc, #316]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 80030be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe f8ee 	bl	80012a4 <HAL_GetTick>
 80030c8:	0003      	movs	r3, r0
 80030ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ce:	f7fe f8e9 	bl	80012a4 <HAL_GetTick>
 80030d2:	0002      	movs	r2, r0
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e2b8      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030e0:	4b46      	ldr	r3, [pc, #280]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2204      	movs	r2, #4
 80030e6:	4013      	ands	r3, r2
 80030e8:	d0f1      	beq.n	80030ce <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ea:	4b44      	ldr	r3, [pc, #272]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a46      	ldr	r2, [pc, #280]	; (8003208 <HAL_RCC_OscConfig+0x348>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	021a      	lsls	r2, r3, #8
 80030fa:	4b40      	ldr	r3, [pc, #256]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	e018      	b.n	8003134 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003102:	4b3e      	ldr	r3, [pc, #248]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8003108:	2101      	movs	r1, #1
 800310a:	438a      	bics	r2, r1
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fe f8c9 	bl	80012a4 <HAL_GetTick>
 8003112:	0003      	movs	r3, r0
 8003114:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003118:	f7fe f8c4 	bl	80012a4 <HAL_GetTick>
 800311c:	0002      	movs	r2, r0
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e293      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800312a:	4b34      	ldr	r3, [pc, #208]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2204      	movs	r2, #4
 8003130:	4013      	ands	r3, r2
 8003132:	d1f1      	bne.n	8003118 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2210      	movs	r2, #16
 800313a:	4013      	ands	r3, r2
 800313c:	d100      	bne.n	8003140 <HAL_RCC_OscConfig+0x280>
 800313e:	e0a2      	b.n	8003286 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d140      	bne.n	80031c8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003146:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4013      	ands	r3, r2
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x29e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e279      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800315e:	4b27      	ldr	r3, [pc, #156]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4a2d      	ldr	r2, [pc, #180]	; (8003218 <HAL_RCC_OscConfig+0x358>)
 8003164:	4013      	ands	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800316c:	4b23      	ldr	r3, [pc, #140]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003172:	4b22      	ldr	r3, [pc, #136]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	0a19      	lsrs	r1, r3, #8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	061a      	lsls	r2, r3, #24
 8003180:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	0b5b      	lsrs	r3, r3, #13
 800318c:	3301      	adds	r3, #1
 800318e:	2280      	movs	r2, #128	; 0x80
 8003190:	0212      	lsls	r2, r2, #8
 8003192:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	210f      	movs	r1, #15
 800319c:	400b      	ands	r3, r1
 800319e:	491b      	ldr	r1, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x34c>)
 80031a0:	5ccb      	ldrb	r3, [r1, r3]
 80031a2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80031a4:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <HAL_RCC_OscConfig+0x350>)
 80031a6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80031a8:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <HAL_RCC_OscConfig+0x354>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2513      	movs	r5, #19
 80031ae:	197c      	adds	r4, r7, r5
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7fe f831 	bl	8001218 <HAL_InitTick>
 80031b6:	0003      	movs	r3, r0
 80031b8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80031ba:	197b      	adds	r3, r7, r5
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d061      	beq.n	8003286 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80031c2:	197b      	adds	r3, r7, r5
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	e244      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d040      	beq.n	8003252 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 80031d6:	2180      	movs	r1, #128	; 0x80
 80031d8:	0049      	lsls	r1, r1, #1
 80031da:	430a      	orrs	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fe f861 	bl	80012a4 <HAL_GetTick>
 80031e2:	0003      	movs	r3, r0
 80031e4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031e6:	e019      	b.n	800321c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031e8:	f7fe f85c 	bl	80012a4 <HAL_GetTick>
 80031ec:	0002      	movs	r2, r0
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d912      	bls.n	800321c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e22b      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	40021000 	.word	0x40021000
 8003200:	fffeffff 	.word	0xfffeffff
 8003204:	fffbffff 	.word	0xfffbffff
 8003208:	ffffe0ff 	.word	0xffffe0ff
 800320c:	080052dc 	.word	0x080052dc
 8003210:	20000004 	.word	0x20000004
 8003214:	20000008 	.word	0x20000008
 8003218:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800321c:	4bca      	ldr	r3, [pc, #808]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4013      	ands	r3, r2
 8003226:	d0df      	beq.n	80031e8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003228:	4bc7      	ldr	r3, [pc, #796]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4ac7      	ldr	r2, [pc, #796]	; (800354c <HAL_RCC_OscConfig+0x68c>)
 800322e:	4013      	ands	r3, r2
 8003230:	0019      	movs	r1, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003236:	4bc4      	ldr	r3, [pc, #784]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003238:	430a      	orrs	r2, r1
 800323a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800323c:	4bc2      	ldr	r3, [pc, #776]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	0a19      	lsrs	r1, r3, #8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	061a      	lsls	r2, r3, #24
 800324a:	4bbf      	ldr	r3, [pc, #764]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]
 8003250:	e019      	b.n	8003286 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003252:	4bbd      	ldr	r3, [pc, #756]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4bbc      	ldr	r3, [pc, #752]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003258:	49bd      	ldr	r1, [pc, #756]	; (8003550 <HAL_RCC_OscConfig+0x690>)
 800325a:	400a      	ands	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7fe f821 	bl	80012a4 <HAL_GetTick>
 8003262:	0003      	movs	r3, r0
 8003264:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003268:	f7fe f81c 	bl	80012a4 <HAL_GetTick>
 800326c:	0002      	movs	r2, r0
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e1eb      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800327a:	4bb3      	ldr	r3, [pc, #716]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4013      	ands	r3, r2
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2208      	movs	r2, #8
 800328c:	4013      	ands	r3, r2
 800328e:	d036      	beq.n	80032fe <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d019      	beq.n	80032cc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003298:	4bab      	ldr	r3, [pc, #684]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 800329a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800329c:	4baa      	ldr	r3, [pc, #680]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 800329e:	2101      	movs	r1, #1
 80032a0:	430a      	orrs	r2, r1
 80032a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a4:	f7fd fffe 	bl	80012a4 <HAL_GetTick>
 80032a8:	0003      	movs	r3, r0
 80032aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ae:	f7fd fff9 	bl	80012a4 <HAL_GetTick>
 80032b2:	0002      	movs	r2, r0
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e1c8      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032c0:	4ba1      	ldr	r3, [pc, #644]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80032c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c4:	2202      	movs	r2, #2
 80032c6:	4013      	ands	r3, r2
 80032c8:	d0f1      	beq.n	80032ae <HAL_RCC_OscConfig+0x3ee>
 80032ca:	e018      	b.n	80032fe <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032cc:	4b9e      	ldr	r3, [pc, #632]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80032ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032d0:	4b9d      	ldr	r3, [pc, #628]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80032d2:	2101      	movs	r1, #1
 80032d4:	438a      	bics	r2, r1
 80032d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d8:	f7fd ffe4 	bl	80012a4 <HAL_GetTick>
 80032dc:	0003      	movs	r3, r0
 80032de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e2:	f7fd ffdf 	bl	80012a4 <HAL_GetTick>
 80032e6:	0002      	movs	r2, r0
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e1ae      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032f4:	4b94      	ldr	r3, [pc, #592]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80032f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f8:	2202      	movs	r2, #2
 80032fa:	4013      	ands	r3, r2
 80032fc:	d1f1      	bne.n	80032e2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2204      	movs	r2, #4
 8003304:	4013      	ands	r3, r2
 8003306:	d100      	bne.n	800330a <HAL_RCC_OscConfig+0x44a>
 8003308:	e0ae      	b.n	8003468 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2023      	movs	r0, #35	; 0x23
 800330c:	183b      	adds	r3, r7, r0
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003312:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	055b      	lsls	r3, r3, #21
 800331a:	4013      	ands	r3, r2
 800331c:	d109      	bne.n	8003332 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331e:	4b8a      	ldr	r3, [pc, #552]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003322:	4b89      	ldr	r3, [pc, #548]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	0549      	lsls	r1, r1, #21
 8003328:	430a      	orrs	r2, r1
 800332a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800332c:	183b      	adds	r3, r7, r0
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b88      	ldr	r3, [pc, #544]	; (8003554 <HAL_RCC_OscConfig+0x694>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4013      	ands	r3, r2
 800333c:	d11a      	bne.n	8003374 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b85      	ldr	r3, [pc, #532]	; (8003554 <HAL_RCC_OscConfig+0x694>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4b84      	ldr	r3, [pc, #528]	; (8003554 <HAL_RCC_OscConfig+0x694>)
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	0049      	lsls	r1, r1, #1
 8003348:	430a      	orrs	r2, r1
 800334a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334c:	f7fd ffaa 	bl	80012a4 <HAL_GetTick>
 8003350:	0003      	movs	r3, r0
 8003352:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003356:	f7fd ffa5 	bl	80012a4 <HAL_GetTick>
 800335a:	0002      	movs	r2, r0
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b64      	cmp	r3, #100	; 0x64
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e174      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003368:	4b7a      	ldr	r3, [pc, #488]	; (8003554 <HAL_RCC_OscConfig+0x694>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4013      	ands	r3, r2
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	429a      	cmp	r2, r3
 800337e:	d107      	bne.n	8003390 <HAL_RCC_OscConfig+0x4d0>
 8003380:	4b71      	ldr	r3, [pc, #452]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003384:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003386:	2180      	movs	r1, #128	; 0x80
 8003388:	0049      	lsls	r1, r1, #1
 800338a:	430a      	orrs	r2, r1
 800338c:	651a      	str	r2, [r3, #80]	; 0x50
 800338e:	e031      	b.n	80033f4 <HAL_RCC_OscConfig+0x534>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10c      	bne.n	80033b2 <HAL_RCC_OscConfig+0x4f2>
 8003398:	4b6b      	ldr	r3, [pc, #428]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 800339a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800339c:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 800339e:	496c      	ldr	r1, [pc, #432]	; (8003550 <HAL_RCC_OscConfig+0x690>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	651a      	str	r2, [r3, #80]	; 0x50
 80033a4:	4b68      	ldr	r3, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80033a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033a8:	4b67      	ldr	r3, [pc, #412]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80033aa:	496b      	ldr	r1, [pc, #428]	; (8003558 <HAL_RCC_OscConfig+0x698>)
 80033ac:	400a      	ands	r2, r1
 80033ae:	651a      	str	r2, [r3, #80]	; 0x50
 80033b0:	e020      	b.n	80033f4 <HAL_RCC_OscConfig+0x534>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	23a0      	movs	r3, #160	; 0xa0
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d10e      	bne.n	80033dc <HAL_RCC_OscConfig+0x51c>
 80033be:	4b62      	ldr	r3, [pc, #392]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80033c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033c2:	4b61      	ldr	r3, [pc, #388]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80033c4:	2180      	movs	r1, #128	; 0x80
 80033c6:	00c9      	lsls	r1, r1, #3
 80033c8:	430a      	orrs	r2, r1
 80033ca:	651a      	str	r2, [r3, #80]	; 0x50
 80033cc:	4b5e      	ldr	r3, [pc, #376]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80033ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033d0:	4b5d      	ldr	r3, [pc, #372]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	0049      	lsls	r1, r1, #1
 80033d6:	430a      	orrs	r2, r1
 80033d8:	651a      	str	r2, [r3, #80]	; 0x50
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0x534>
 80033dc:	4b5a      	ldr	r3, [pc, #360]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80033de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033e0:	4b59      	ldr	r3, [pc, #356]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80033e2:	495b      	ldr	r1, [pc, #364]	; (8003550 <HAL_RCC_OscConfig+0x690>)
 80033e4:	400a      	ands	r2, r1
 80033e6:	651a      	str	r2, [r3, #80]	; 0x50
 80033e8:	4b57      	ldr	r3, [pc, #348]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80033ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033ec:	4b56      	ldr	r3, [pc, #344]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80033ee:	495a      	ldr	r1, [pc, #360]	; (8003558 <HAL_RCC_OscConfig+0x698>)
 80033f0:	400a      	ands	r2, r1
 80033f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d015      	beq.n	8003428 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fc:	f7fd ff52 	bl	80012a4 <HAL_GetTick>
 8003400:	0003      	movs	r3, r0
 8003402:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003404:	e009      	b.n	800341a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fd ff4d 	bl	80012a4 <HAL_GetTick>
 800340a:	0002      	movs	r2, r0
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	4a52      	ldr	r2, [pc, #328]	; (800355c <HAL_RCC_OscConfig+0x69c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e11b      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800341a:	4b4b      	ldr	r3, [pc, #300]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 800341c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4013      	ands	r3, r2
 8003424:	d0ef      	beq.n	8003406 <HAL_RCC_OscConfig+0x546>
 8003426:	e014      	b.n	8003452 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003428:	f7fd ff3c 	bl	80012a4 <HAL_GetTick>
 800342c:	0003      	movs	r3, r0
 800342e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003430:	e009      	b.n	8003446 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7fd ff37 	bl	80012a4 <HAL_GetTick>
 8003436:	0002      	movs	r2, r0
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	4a47      	ldr	r2, [pc, #284]	; (800355c <HAL_RCC_OscConfig+0x69c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e105      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003446:	4b40      	ldr	r3, [pc, #256]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4013      	ands	r3, r2
 8003450:	d1ef      	bne.n	8003432 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003452:	2323      	movs	r3, #35	; 0x23
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345c:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 800345e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003460:	4b39      	ldr	r3, [pc, #228]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003462:	493f      	ldr	r1, [pc, #252]	; (8003560 <HAL_RCC_OscConfig+0x6a0>)
 8003464:	400a      	ands	r2, r1
 8003466:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2220      	movs	r2, #32
 800346e:	4013      	ands	r3, r2
 8003470:	d049      	beq.n	8003506 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d026      	beq.n	80034c8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800347a:	4b33      	ldr	r3, [pc, #204]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	4b32      	ldr	r3, [pc, #200]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003480:	2101      	movs	r1, #1
 8003482:	430a      	orrs	r2, r1
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	4b30      	ldr	r3, [pc, #192]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348a:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 800348c:	2101      	movs	r1, #1
 800348e:	430a      	orrs	r2, r1
 8003490:	635a      	str	r2, [r3, #52]	; 0x34
 8003492:	4b34      	ldr	r3, [pc, #208]	; (8003564 <HAL_RCC_OscConfig+0x6a4>)
 8003494:	6a1a      	ldr	r2, [r3, #32]
 8003496:	4b33      	ldr	r3, [pc, #204]	; (8003564 <HAL_RCC_OscConfig+0x6a4>)
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	0189      	lsls	r1, r1, #6
 800349c:	430a      	orrs	r2, r1
 800349e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7fd ff00 	bl	80012a4 <HAL_GetTick>
 80034a4:	0003      	movs	r3, r0
 80034a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034aa:	f7fd fefb 	bl	80012a4 <HAL_GetTick>
 80034ae:	0002      	movs	r2, r0
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e0ca      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034bc:	4b22      	ldr	r3, [pc, #136]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2202      	movs	r2, #2
 80034c2:	4013      	ands	r3, r2
 80034c4:	d0f1      	beq.n	80034aa <HAL_RCC_OscConfig+0x5ea>
 80034c6:	e01e      	b.n	8003506 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80034ce:	2101      	movs	r1, #1
 80034d0:	438a      	bics	r2, r1
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	4b23      	ldr	r3, [pc, #140]	; (8003564 <HAL_RCC_OscConfig+0x6a4>)
 80034d6:	6a1a      	ldr	r2, [r3, #32]
 80034d8:	4b22      	ldr	r3, [pc, #136]	; (8003564 <HAL_RCC_OscConfig+0x6a4>)
 80034da:	4923      	ldr	r1, [pc, #140]	; (8003568 <HAL_RCC_OscConfig+0x6a8>)
 80034dc:	400a      	ands	r2, r1
 80034de:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fd fee0 	bl	80012a4 <HAL_GetTick>
 80034e4:	0003      	movs	r3, r0
 80034e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ea:	f7fd fedb 	bl	80012a4 <HAL_GetTick>
 80034ee:	0002      	movs	r2, r0
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0aa      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2202      	movs	r2, #2
 8003502:	4013      	ands	r3, r2
 8003504:	d1f1      	bne.n	80034ea <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	2b00      	cmp	r3, #0
 800350c:	d100      	bne.n	8003510 <HAL_RCC_OscConfig+0x650>
 800350e:	e09f      	b.n	8003650 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b0c      	cmp	r3, #12
 8003514:	d100      	bne.n	8003518 <HAL_RCC_OscConfig+0x658>
 8003516:	e078      	b.n	800360a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	2b02      	cmp	r3, #2
 800351e:	d159      	bne.n	80035d4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <HAL_RCC_OscConfig+0x688>)
 8003526:	4911      	ldr	r1, [pc, #68]	; (800356c <HAL_RCC_OscConfig+0x6ac>)
 8003528:	400a      	ands	r2, r1
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fd feba 	bl	80012a4 <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003534:	e01c      	b.n	8003570 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003536:	f7fd feb5 	bl	80012a4 <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d915      	bls.n	8003570 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e084      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
 8003548:	40021000 	.word	0x40021000
 800354c:	ffff1fff 	.word	0xffff1fff
 8003550:	fffffeff 	.word	0xfffffeff
 8003554:	40007000 	.word	0x40007000
 8003558:	fffffbff 	.word	0xfffffbff
 800355c:	00001388 	.word	0x00001388
 8003560:	efffffff 	.word	0xefffffff
 8003564:	40010000 	.word	0x40010000
 8003568:	ffffdfff 	.word	0xffffdfff
 800356c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003570:	4b3a      	ldr	r3, [pc, #232]	; (800365c <HAL_RCC_OscConfig+0x79c>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	049b      	lsls	r3, r3, #18
 8003578:	4013      	ands	r3, r2
 800357a:	d1dc      	bne.n	8003536 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800357c:	4b37      	ldr	r3, [pc, #220]	; (800365c <HAL_RCC_OscConfig+0x79c>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4a37      	ldr	r2, [pc, #220]	; (8003660 <HAL_RCC_OscConfig+0x7a0>)
 8003582:	4013      	ands	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	431a      	orrs	r2, r3
 8003596:	4b31      	ldr	r3, [pc, #196]	; (800365c <HAL_RCC_OscConfig+0x79c>)
 8003598:	430a      	orrs	r2, r1
 800359a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800359c:	4b2f      	ldr	r3, [pc, #188]	; (800365c <HAL_RCC_OscConfig+0x79c>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b2e      	ldr	r3, [pc, #184]	; (800365c <HAL_RCC_OscConfig+0x79c>)
 80035a2:	2180      	movs	r1, #128	; 0x80
 80035a4:	0449      	lsls	r1, r1, #17
 80035a6:	430a      	orrs	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035aa:	f7fd fe7b 	bl	80012a4 <HAL_GetTick>
 80035ae:	0003      	movs	r3, r0
 80035b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fd fe76 	bl	80012a4 <HAL_GetTick>
 80035b8:	0002      	movs	r2, r0
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e045      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80035c6:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_RCC_OscConfig+0x79c>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	049b      	lsls	r3, r3, #18
 80035ce:	4013      	ands	r3, r2
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x6f4>
 80035d2:	e03d      	b.n	8003650 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d4:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_RCC_OscConfig+0x79c>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_RCC_OscConfig+0x79c>)
 80035da:	4922      	ldr	r1, [pc, #136]	; (8003664 <HAL_RCC_OscConfig+0x7a4>)
 80035dc:	400a      	ands	r2, r1
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fd fe60 	bl	80012a4 <HAL_GetTick>
 80035e4:	0003      	movs	r3, r0
 80035e6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ea:	f7fd fe5b 	bl	80012a4 <HAL_GetTick>
 80035ee:	0002      	movs	r2, r0
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e02a      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035fc:	4b17      	ldr	r3, [pc, #92]	; (800365c <HAL_RCC_OscConfig+0x79c>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	049b      	lsls	r3, r3, #18
 8003604:	4013      	ands	r3, r2
 8003606:	d1f0      	bne.n	80035ea <HAL_RCC_OscConfig+0x72a>
 8003608:	e022      	b.n	8003650 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e01d      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <HAL_RCC_OscConfig+0x79c>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	025b      	lsls	r3, r3, #9
 8003622:	401a      	ands	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	429a      	cmp	r2, r3
 800362a:	d10f      	bne.n	800364c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	23f0      	movs	r3, #240	; 0xf0
 8003630:	039b      	lsls	r3, r3, #14
 8003632:	401a      	ands	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d107      	bne.n	800364c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	23c0      	movs	r3, #192	; 0xc0
 8003640:	041b      	lsls	r3, r3, #16
 8003642:	401a      	ands	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	0018      	movs	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	b00a      	add	sp, #40	; 0x28
 8003658:	bdb0      	pop	{r4, r5, r7, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	40021000 	.word	0x40021000
 8003660:	ff02ffff 	.word	0xff02ffff
 8003664:	feffffff 	.word	0xfeffffff

08003668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003668:	b5b0      	push	{r4, r5, r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e128      	b.n	80038ce <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800367c:	4b96      	ldr	r3, [pc, #600]	; (80038d8 <HAL_RCC_ClockConfig+0x270>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2201      	movs	r2, #1
 8003682:	4013      	ands	r3, r2
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d91e      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b93      	ldr	r3, [pc, #588]	; (80038d8 <HAL_RCC_ClockConfig+0x270>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2201      	movs	r2, #1
 8003690:	4393      	bics	r3, r2
 8003692:	0019      	movs	r1, r3
 8003694:	4b90      	ldr	r3, [pc, #576]	; (80038d8 <HAL_RCC_ClockConfig+0x270>)
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800369c:	f7fd fe02 	bl	80012a4 <HAL_GetTick>
 80036a0:	0003      	movs	r3, r0
 80036a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a4:	e009      	b.n	80036ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a6:	f7fd fdfd 	bl	80012a4 <HAL_GetTick>
 80036aa:	0002      	movs	r2, r0
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	4a8a      	ldr	r2, [pc, #552]	; (80038dc <HAL_RCC_ClockConfig+0x274>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e109      	b.n	80038ce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b87      	ldr	r3, [pc, #540]	; (80038d8 <HAL_RCC_ClockConfig+0x270>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2201      	movs	r2, #1
 80036c0:	4013      	ands	r3, r2
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d1ee      	bne.n	80036a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2202      	movs	r2, #2
 80036ce:	4013      	ands	r3, r2
 80036d0:	d009      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d2:	4b83      	ldr	r3, [pc, #524]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	22f0      	movs	r2, #240	; 0xf0
 80036d8:	4393      	bics	r3, r2
 80036da:	0019      	movs	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	4b7f      	ldr	r3, [pc, #508]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 80036e2:	430a      	orrs	r2, r1
 80036e4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	4013      	ands	r3, r2
 80036ee:	d100      	bne.n	80036f2 <HAL_RCC_ClockConfig+0x8a>
 80036f0:	e089      	b.n	8003806 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d107      	bne.n	800370a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036fa:	4b79      	ldr	r3, [pc, #484]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	029b      	lsls	r3, r3, #10
 8003702:	4013      	ands	r3, r2
 8003704:	d120      	bne.n	8003748 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e0e1      	b.n	80038ce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d107      	bne.n	8003722 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003712:	4b73      	ldr	r3, [pc, #460]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	049b      	lsls	r3, r3, #18
 800371a:	4013      	ands	r3, r2
 800371c:	d114      	bne.n	8003748 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0d5      	b.n	80038ce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d106      	bne.n	8003738 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800372a:	4b6d      	ldr	r3, [pc, #436]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2204      	movs	r2, #4
 8003730:	4013      	ands	r3, r2
 8003732:	d109      	bne.n	8003748 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0ca      	b.n	80038ce <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003738:	4b69      	ldr	r3, [pc, #420]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4013      	ands	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0c2      	b.n	80038ce <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003748:	4b65      	ldr	r3, [pc, #404]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2203      	movs	r2, #3
 800374e:	4393      	bics	r3, r2
 8003750:	0019      	movs	r1, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	4b62      	ldr	r3, [pc, #392]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 8003758:	430a      	orrs	r2, r1
 800375a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800375c:	f7fd fda2 	bl	80012a4 <HAL_GetTick>
 8003760:	0003      	movs	r3, r0
 8003762:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d111      	bne.n	8003790 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800376c:	e009      	b.n	8003782 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376e:	f7fd fd99 	bl	80012a4 <HAL_GetTick>
 8003772:	0002      	movs	r2, r0
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	4a58      	ldr	r2, [pc, #352]	; (80038dc <HAL_RCC_ClockConfig+0x274>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e0a5      	b.n	80038ce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003782:	4b57      	ldr	r3, [pc, #348]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	220c      	movs	r2, #12
 8003788:	4013      	ands	r3, r2
 800378a:	2b08      	cmp	r3, #8
 800378c:	d1ef      	bne.n	800376e <HAL_RCC_ClockConfig+0x106>
 800378e:	e03a      	b.n	8003806 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d111      	bne.n	80037bc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003798:	e009      	b.n	80037ae <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379a:	f7fd fd83 	bl	80012a4 <HAL_GetTick>
 800379e:	0002      	movs	r2, r0
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	4a4d      	ldr	r2, [pc, #308]	; (80038dc <HAL_RCC_ClockConfig+0x274>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e08f      	b.n	80038ce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ae:	4b4c      	ldr	r3, [pc, #304]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	220c      	movs	r2, #12
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d1ef      	bne.n	800379a <HAL_RCC_ClockConfig+0x132>
 80037ba:	e024      	b.n	8003806 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d11b      	bne.n	80037fc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037c4:	e009      	b.n	80037da <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c6:	f7fd fd6d 	bl	80012a4 <HAL_GetTick>
 80037ca:	0002      	movs	r2, r0
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	4a42      	ldr	r2, [pc, #264]	; (80038dc <HAL_RCC_ClockConfig+0x274>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e079      	b.n	80038ce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037da:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	220c      	movs	r2, #12
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d1ef      	bne.n	80037c6 <HAL_RCC_ClockConfig+0x15e>
 80037e6:	e00e      	b.n	8003806 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e8:	f7fd fd5c 	bl	80012a4 <HAL_GetTick>
 80037ec:	0002      	movs	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	4a3a      	ldr	r2, [pc, #232]	; (80038dc <HAL_RCC_ClockConfig+0x274>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e068      	b.n	80038ce <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80037fc:	4b38      	ldr	r3, [pc, #224]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	220c      	movs	r2, #12
 8003802:	4013      	ands	r3, r2
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003806:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <HAL_RCC_ClockConfig+0x270>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2201      	movs	r2, #1
 800380c:	4013      	ands	r3, r2
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d21e      	bcs.n	8003852 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003814:	4b30      	ldr	r3, [pc, #192]	; (80038d8 <HAL_RCC_ClockConfig+0x270>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2201      	movs	r2, #1
 800381a:	4393      	bics	r3, r2
 800381c:	0019      	movs	r1, r3
 800381e:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <HAL_RCC_ClockConfig+0x270>)
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003826:	f7fd fd3d 	bl	80012a4 <HAL_GetTick>
 800382a:	0003      	movs	r3, r0
 800382c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	e009      	b.n	8003844 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fd fd38 	bl	80012a4 <HAL_GetTick>
 8003834:	0002      	movs	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	4a28      	ldr	r2, [pc, #160]	; (80038dc <HAL_RCC_ClockConfig+0x274>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e044      	b.n	80038ce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003844:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <HAL_RCC_ClockConfig+0x270>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2201      	movs	r2, #1
 800384a:	4013      	ands	r3, r2
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d1ee      	bne.n	8003830 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2204      	movs	r2, #4
 8003858:	4013      	ands	r3, r2
 800385a:	d009      	beq.n	8003870 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800385c:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a20      	ldr	r2, [pc, #128]	; (80038e4 <HAL_RCC_ClockConfig+0x27c>)
 8003862:	4013      	ands	r3, r2
 8003864:	0019      	movs	r1, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 800386c:	430a      	orrs	r2, r1
 800386e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2208      	movs	r2, #8
 8003876:	4013      	ands	r3, r2
 8003878:	d00a      	beq.n	8003890 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800387a:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	4a1a      	ldr	r2, [pc, #104]	; (80038e8 <HAL_RCC_ClockConfig+0x280>)
 8003880:	4013      	ands	r3, r2
 8003882:	0019      	movs	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	00da      	lsls	r2, r3, #3
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 800388c:	430a      	orrs	r2, r1
 800388e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003890:	f000 f832 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8003894:	0001      	movs	r1, r0
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_RCC_ClockConfig+0x278>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	220f      	movs	r2, #15
 800389e:	4013      	ands	r3, r2
 80038a0:	4a12      	ldr	r2, [pc, #72]	; (80038ec <HAL_RCC_ClockConfig+0x284>)
 80038a2:	5cd3      	ldrb	r3, [r2, r3]
 80038a4:	000a      	movs	r2, r1
 80038a6:	40da      	lsrs	r2, r3
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <HAL_RCC_ClockConfig+0x288>)
 80038aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_RCC_ClockConfig+0x28c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	250b      	movs	r5, #11
 80038b2:	197c      	adds	r4, r7, r5
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7fd fcaf 	bl	8001218 <HAL_InitTick>
 80038ba:	0003      	movs	r3, r0
 80038bc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80038be:	197b      	adds	r3, r7, r5
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80038c6:	197b      	adds	r3, r7, r5
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	e000      	b.n	80038ce <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	0018      	movs	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b004      	add	sp, #16
 80038d4:	bdb0      	pop	{r4, r5, r7, pc}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	40022000 	.word	0x40022000
 80038dc:	00001388 	.word	0x00001388
 80038e0:	40021000 	.word	0x40021000
 80038e4:	fffff8ff 	.word	0xfffff8ff
 80038e8:	ffffc7ff 	.word	0xffffc7ff
 80038ec:	080052dc 	.word	0x080052dc
 80038f0:	20000004 	.word	0x20000004
 80038f4:	20000008 	.word	0x20000008

080038f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f8:	b5b0      	push	{r4, r5, r7, lr}
 80038fa:	b08e      	sub	sp, #56	; 0x38
 80038fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80038fe:	4b4c      	ldr	r3, [pc, #304]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x138>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003906:	230c      	movs	r3, #12
 8003908:	4013      	ands	r3, r2
 800390a:	2b0c      	cmp	r3, #12
 800390c:	d014      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0x40>
 800390e:	d900      	bls.n	8003912 <HAL_RCC_GetSysClockFreq+0x1a>
 8003910:	e07b      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x112>
 8003912:	2b04      	cmp	r3, #4
 8003914:	d002      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x24>
 8003916:	2b08      	cmp	r3, #8
 8003918:	d00b      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0x3a>
 800391a:	e076      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800391c:	4b44      	ldr	r3, [pc, #272]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x138>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2210      	movs	r2, #16
 8003922:	4013      	ands	r3, r2
 8003924:	d002      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003926:	4b43      	ldr	r3, [pc, #268]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003928:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800392a:	e07c      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800392c:	4b42      	ldr	r3, [pc, #264]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x140>)
 800392e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003930:	e079      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003932:	4b42      	ldr	r3, [pc, #264]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x144>)
 8003934:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003936:	e076      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	0c9a      	lsrs	r2, r3, #18
 800393c:	230f      	movs	r3, #15
 800393e:	401a      	ands	r2, r3
 8003940:	4b3f      	ldr	r3, [pc, #252]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x148>)
 8003942:	5c9b      	ldrb	r3, [r3, r2]
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	0d9a      	lsrs	r2, r3, #22
 800394a:	2303      	movs	r3, #3
 800394c:	4013      	ands	r3, r2
 800394e:	3301      	adds	r3, #1
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003952:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x138>)
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	025b      	lsls	r3, r3, #9
 800395a:	4013      	ands	r3, r2
 800395c:	d01a      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	4a35      	ldr	r2, [pc, #212]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x144>)
 8003968:	2300      	movs	r3, #0
 800396a:	69b8      	ldr	r0, [r7, #24]
 800396c:	69f9      	ldr	r1, [r7, #28]
 800396e:	f7fc fc89 	bl	8000284 <__aeabi_lmul>
 8003972:	0002      	movs	r2, r0
 8003974:	000b      	movs	r3, r1
 8003976:	0010      	movs	r0, r2
 8003978:	0019      	movs	r1, r3
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f7fc fc5d 	bl	8000244 <__aeabi_uldivmod>
 800398a:	0002      	movs	r2, r0
 800398c:	000b      	movs	r3, r1
 800398e:	0013      	movs	r3, r2
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
 8003992:	e037      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003994:	4b26      	ldr	r3, [pc, #152]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x138>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2210      	movs	r2, #16
 800399a:	4013      	ands	r3, r2
 800399c:	d01a      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	4a23      	ldr	r2, [pc, #140]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x13c>)
 80039a8:	2300      	movs	r3, #0
 80039aa:	68b8      	ldr	r0, [r7, #8]
 80039ac:	68f9      	ldr	r1, [r7, #12]
 80039ae:	f7fc fc69 	bl	8000284 <__aeabi_lmul>
 80039b2:	0002      	movs	r2, r0
 80039b4:	000b      	movs	r3, r1
 80039b6:	0010      	movs	r0, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f7fc fc3d 	bl	8000244 <__aeabi_uldivmod>
 80039ca:	0002      	movs	r2, r0
 80039cc:	000b      	movs	r3, r1
 80039ce:	0013      	movs	r3, r2
 80039d0:	637b      	str	r3, [r7, #52]	; 0x34
 80039d2:	e017      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	0018      	movs	r0, r3
 80039d8:	2300      	movs	r3, #0
 80039da:	0019      	movs	r1, r3
 80039dc:	4a16      	ldr	r2, [pc, #88]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x140>)
 80039de:	2300      	movs	r3, #0
 80039e0:	f7fc fc50 	bl	8000284 <__aeabi_lmul>
 80039e4:	0002      	movs	r2, r0
 80039e6:	000b      	movs	r3, r1
 80039e8:	0010      	movs	r0, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	001c      	movs	r4, r3
 80039f0:	2300      	movs	r3, #0
 80039f2:	001d      	movs	r5, r3
 80039f4:	0022      	movs	r2, r4
 80039f6:	002b      	movs	r3, r5
 80039f8:	f7fc fc24 	bl	8000244 <__aeabi_uldivmod>
 80039fc:	0002      	movs	r2, r0
 80039fe:	000b      	movs	r3, r1
 8003a00:	0013      	movs	r3, r2
 8003a02:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a08:	e00d      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	0b5b      	lsrs	r3, r3, #13
 8003a10:	2207      	movs	r2, #7
 8003a12:	4013      	ands	r3, r2
 8003a14:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	2280      	movs	r2, #128	; 0x80
 8003a1c:	0212      	lsls	r2, r2, #8
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	0013      	movs	r3, r2
 8003a22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a24:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b00e      	add	sp, #56	; 0x38
 8003a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a30:	40021000 	.word	0x40021000
 8003a34:	003d0900 	.word	0x003d0900
 8003a38:	00f42400 	.word	0x00f42400
 8003a3c:	007a1200 	.word	0x007a1200
 8003a40:	080052f4 	.word	0x080052f4

08003a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a48:	4b02      	ldr	r3, [pc, #8]	; (8003a54 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
}
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	20000004 	.word	0x20000004

08003a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a5c:	f7ff fff2 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a60:	0001      	movs	r1, r0
 8003a62:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	2207      	movs	r2, #7
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a6e:	5cd3      	ldrb	r3, [r2, r3]
 8003a70:	40d9      	lsrs	r1, r3
 8003a72:	000b      	movs	r3, r1
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	080052ec 	.word	0x080052ec

08003a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a88:	f7ff ffdc 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a8c:	0001      	movs	r1, r0
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	0adb      	lsrs	r3, r3, #11
 8003a94:	2207      	movs	r2, #7
 8003a96:	4013      	ands	r3, r2
 8003a98:	4a04      	ldr	r2, [pc, #16]	; (8003aac <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a9a:	5cd3      	ldrb	r3, [r2, r3]
 8003a9c:	40d9      	lsrs	r1, r3
 8003a9e:	000b      	movs	r3, r1
}
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	080052ec 	.word	0x080052ec

08003ab0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003ab8:	2317      	movs	r3, #23
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d106      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d100      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003ad6:	e104      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad8:	4bb9      	ldr	r3, [pc, #740]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	055b      	lsls	r3, r3, #21
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d10a      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae4:	4bb6      	ldr	r3, [pc, #728]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae8:	4bb5      	ldr	r3, [pc, #724]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003aea:	2180      	movs	r1, #128	; 0x80
 8003aec:	0549      	lsls	r1, r1, #21
 8003aee:	430a      	orrs	r2, r1
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003af2:	2317      	movs	r3, #23
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afa:	4bb2      	ldr	r3, [pc, #712]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4013      	ands	r3, r2
 8003b04:	d11a      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b06:	4baf      	ldr	r3, [pc, #700]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4bae      	ldr	r3, [pc, #696]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	0049      	lsls	r1, r1, #1
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b14:	f7fd fbc6 	bl	80012a4 <HAL_GetTick>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e008      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fd fbc1 	bl	80012a4 <HAL_GetTick>
 8003b22:	0002      	movs	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b64      	cmp	r3, #100	; 0x64
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e143      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	4ba4      	ldr	r3, [pc, #656]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003b3c:	4ba0      	ldr	r3, [pc, #640]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	23c0      	movs	r3, #192	; 0xc0
 8003b42:	039b      	lsls	r3, r3, #14
 8003b44:	4013      	ands	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	23c0      	movs	r3, #192	; 0xc0
 8003b4e:	039b      	lsls	r3, r3, #14
 8003b50:	4013      	ands	r3, r2
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d107      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	23c0      	movs	r3, #192	; 0xc0
 8003b5e:	039b      	lsls	r3, r3, #14
 8003b60:	4013      	ands	r3, r2
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d013      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	23c0      	movs	r3, #192	; 0xc0
 8003b6e:	029b      	lsls	r3, r3, #10
 8003b70:	401a      	ands	r2, r3
 8003b72:	23c0      	movs	r3, #192	; 0xc0
 8003b74:	029b      	lsls	r3, r3, #10
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d10a      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003b7a:	4b91      	ldr	r3, [pc, #580]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	2380      	movs	r3, #128	; 0x80
 8003b80:	029b      	lsls	r3, r3, #10
 8003b82:	401a      	ands	r2, r3
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	029b      	lsls	r3, r3, #10
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e113      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003b90:	4b8b      	ldr	r3, [pc, #556]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b94:	23c0      	movs	r3, #192	; 0xc0
 8003b96:	029b      	lsls	r3, r3, #10
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d049      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	23c0      	movs	r3, #192	; 0xc0
 8003ba8:	029b      	lsls	r3, r3, #10
 8003baa:	4013      	ands	r3, r2
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d004      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d10d      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	23c0      	movs	r3, #192	; 0xc0
 8003bc2:	029b      	lsls	r3, r3, #10
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d034      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d02e      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003bd8:	4b79      	ldr	r3, [pc, #484]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bdc:	4a7a      	ldr	r2, [pc, #488]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003be2:	4b77      	ldr	r3, [pc, #476]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003be4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003be6:	4b76      	ldr	r3, [pc, #472]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	0309      	lsls	r1, r1, #12
 8003bec:	430a      	orrs	r2, r1
 8003bee:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf0:	4b73      	ldr	r3, [pc, #460]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bf4:	4b72      	ldr	r3, [pc, #456]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bf6:	4975      	ldr	r1, [pc, #468]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003bfc:	4b70      	ldr	r3, [pc, #448]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d014      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fd fb4a 	bl	80012a4 <HAL_GetTick>
 8003c10:	0003      	movs	r3, r0
 8003c12:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c14:	e009      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c16:	f7fd fb45 	bl	80012a4 <HAL_GetTick>
 8003c1a:	0002      	movs	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	4a6b      	ldr	r2, [pc, #428]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0c6      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c2a:	4b65      	ldr	r3, [pc, #404]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4013      	ands	r3, r2
 8003c34:	d0ef      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d01f      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	23c0      	movs	r3, #192	; 0xc0
 8003c48:	029b      	lsls	r3, r3, #10
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	23c0      	movs	r3, #192	; 0xc0
 8003c4e:	029b      	lsls	r3, r3, #10
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d10c      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003c54:	4b5a      	ldr	r3, [pc, #360]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a5e      	ldr	r2, [pc, #376]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	23c0      	movs	r3, #192	; 0xc0
 8003c64:	039b      	lsls	r3, r3, #14
 8003c66:	401a      	ands	r2, r3
 8003c68:	4b55      	ldr	r3, [pc, #340]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	4b54      	ldr	r3, [pc, #336]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c70:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	23c0      	movs	r3, #192	; 0xc0
 8003c78:	029b      	lsls	r3, r3, #10
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	4b50      	ldr	r3, [pc, #320]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2220      	movs	r2, #32
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d01f      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	23c0      	movs	r3, #192	; 0xc0
 8003c92:	029b      	lsls	r3, r3, #10
 8003c94:	401a      	ands	r2, r3
 8003c96:	23c0      	movs	r3, #192	; 0xc0
 8003c98:	029b      	lsls	r3, r3, #10
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003c9e:	4b48      	ldr	r3, [pc, #288]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a4c      	ldr	r2, [pc, #304]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	23c0      	movs	r3, #192	; 0xc0
 8003cae:	039b      	lsls	r3, r3, #14
 8003cb0:	401a      	ands	r2, r3
 8003cb2:	4b43      	ldr	r3, [pc, #268]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	4b41      	ldr	r3, [pc, #260]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cba:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	23c0      	movs	r3, #192	; 0xc0
 8003cc2:	029b      	lsls	r3, r3, #10
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	4b3e      	ldr	r3, [pc, #248]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ccc:	2317      	movs	r3, #23
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d105      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd6:	4b3a      	ldr	r3, [pc, #232]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cda:	4b39      	ldr	r3, [pc, #228]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cdc:	493e      	ldr	r1, [pc, #248]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003cde:	400a      	ands	r2, r1
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d009      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cec:	4b34      	ldr	r3, [pc, #208]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	4393      	bics	r3, r2
 8003cf4:	0019      	movs	r1, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	4b31      	ldr	r3, [pc, #196]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2202      	movs	r2, #2
 8003d06:	4013      	ands	r3, r2
 8003d08:	d009      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d0a:	4b2d      	ldr	r3, [pc, #180]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	220c      	movs	r2, #12
 8003d10:	4393      	bics	r3, r2
 8003d12:	0019      	movs	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	4b29      	ldr	r3, [pc, #164]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2204      	movs	r2, #4
 8003d24:	4013      	ands	r3, r2
 8003d26:	d009      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d28:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2c:	4a2b      	ldr	r2, [pc, #172]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	0019      	movs	r1, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	4b22      	ldr	r3, [pc, #136]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2208      	movs	r2, #8
 8003d42:	4013      	ands	r3, r2
 8003d44:	d009      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d46:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4a:	4a25      	ldr	r2, [pc, #148]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	0019      	movs	r1, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699a      	ldr	r2, [r3, #24]
 8003d54:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d56:	430a      	orrs	r2, r1
 8003d58:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4013      	ands	r3, r2
 8003d64:	d009      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d66:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6a:	4a17      	ldr	r2, [pc, #92]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	0019      	movs	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d76:	430a      	orrs	r2, r1
 8003d78:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2240      	movs	r2, #64	; 0x40
 8003d80:	4013      	ands	r3, r2
 8003d82:	d009      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d84:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d88:	4a16      	ldr	r2, [pc, #88]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d94:	430a      	orrs	r2, r1
 8003d96:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2280      	movs	r2, #128	; 0x80
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d009      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003da2:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da6:	4a10      	ldr	r2, [pc, #64]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	0019      	movs	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1a      	ldr	r2, [r3, #32]
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003db2:	430a      	orrs	r2, r1
 8003db4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	0018      	movs	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b006      	add	sp, #24
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40007000 	.word	0x40007000
 8003dc8:	fffcffff 	.word	0xfffcffff
 8003dcc:	fff7ffff 	.word	0xfff7ffff
 8003dd0:	00001388 	.word	0x00001388
 8003dd4:	ffcfffff 	.word	0xffcfffff
 8003dd8:	efffffff 	.word	0xefffffff
 8003ddc:	fffff3ff 	.word	0xfffff3ff
 8003de0:	ffffcfff 	.word	0xffffcfff
 8003de4:	fbffffff 	.word	0xfbffffff
 8003de8:	fff3ffff 	.word	0xfff3ffff

08003dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e044      	b.n	8003e88 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d107      	bne.n	8003e16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2278      	movs	r2, #120	; 0x78
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7fd f91f 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2224      	movs	r2, #36	; 0x24
 8003e1a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2101      	movs	r1, #1
 8003e28:	438a      	bics	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 f8d0 	bl	8003fd4 <UART_SetConfig>
 8003e34:	0003      	movs	r3, r0
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e024      	b.n	8003e88 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f000 fb61 	bl	8004510 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	490d      	ldr	r1, [pc, #52]	; (8003e90 <HAL_UART_Init+0xa4>)
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	212a      	movs	r1, #42	; 0x2a
 8003e6a:	438a      	bics	r2, r1
 8003e6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2101      	movs	r1, #1
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 fbf9 	bl	8004678 <UART_CheckIdleState>
 8003e86:	0003      	movs	r3, r0
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b002      	add	sp, #8
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	ffffb7ff 	.word	0xffffb7ff

08003e94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	; 0x28
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	1dbb      	adds	r3, r7, #6
 8003ea2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d000      	beq.n	8003eae <HAL_UART_Transmit+0x1a>
 8003eac:	e08c      	b.n	8003fc8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_UART_Transmit+0x28>
 8003eb4:	1dbb      	adds	r3, r7, #6
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e084      	b.n	8003fca <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	015b      	lsls	r3, r3, #5
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d109      	bne.n	8003ee0 <HAL_UART_Transmit+0x4c>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d001      	beq.n	8003ee0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e074      	b.n	8003fca <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2284      	movs	r2, #132	; 0x84
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2221      	movs	r2, #33	; 0x21
 8003eec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eee:	f7fd f9d9 	bl	80012a4 <HAL_GetTick>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1dba      	adds	r2, r7, #6
 8003efa:	2150      	movs	r1, #80	; 0x50
 8003efc:	8812      	ldrh	r2, [r2, #0]
 8003efe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1dba      	adds	r2, r7, #6
 8003f04:	2152      	movs	r1, #82	; 0x52
 8003f06:	8812      	ldrh	r2, [r2, #0]
 8003f08:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	015b      	lsls	r3, r3, #5
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d108      	bne.n	8003f28 <HAL_UART_Transmit+0x94>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d104      	bne.n	8003f28 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	e003      	b.n	8003f30 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f30:	e02f      	b.n	8003f92 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	0013      	movs	r3, r2
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2180      	movs	r1, #128	; 0x80
 8003f40:	f000 fc42 	bl	80047c8 <UART_WaitOnFlagUntilTimeout>
 8003f44:	1e03      	subs	r3, r0, #0
 8003f46:	d004      	beq.n	8003f52 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e03b      	b.n	8003fca <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	001a      	movs	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	05d2      	lsls	r2, r2, #23
 8003f64:	0dd2      	lsrs	r2, r2, #23
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	3302      	adds	r3, #2
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	e007      	b.n	8003f80 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	781a      	ldrb	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2252      	movs	r2, #82	; 0x52
 8003f84:	5a9b      	ldrh	r3, [r3, r2]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b299      	uxth	r1, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2252      	movs	r2, #82	; 0x52
 8003f90:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2252      	movs	r2, #82	; 0x52
 8003f96:	5a9b      	ldrh	r3, [r3, r2]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1c9      	bne.n	8003f32 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	0013      	movs	r3, r2
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2140      	movs	r1, #64	; 0x40
 8003fac:	f000 fc0c 	bl	80047c8 <UART_WaitOnFlagUntilTimeout>
 8003fb0:	1e03      	subs	r3, r0, #0
 8003fb2:	d004      	beq.n	8003fbe <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e005      	b.n	8003fca <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e000      	b.n	8003fca <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
  }
}
 8003fca:	0018      	movs	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b008      	add	sp, #32
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd4:	b5b0      	push	{r4, r5, r7, lr}
 8003fd6:	b08e      	sub	sp, #56	; 0x38
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fdc:	231a      	movs	r3, #26
 8003fde:	2218      	movs	r2, #24
 8003fe0:	189b      	adds	r3, r3, r2
 8003fe2:	19db      	adds	r3, r3, r7
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4ac3      	ldr	r2, [pc, #780]	; (8004314 <UART_SetConfig+0x340>)
 8004008:	4013      	ands	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004012:	430a      	orrs	r2, r1
 8004014:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4abe      	ldr	r2, [pc, #760]	; (8004318 <UART_SetConfig+0x344>)
 800401e:	4013      	ands	r3, r2
 8004020:	0019      	movs	r1, r3
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4ab8      	ldr	r2, [pc, #736]	; (800431c <UART_SetConfig+0x348>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004044:	4313      	orrs	r3, r2
 8004046:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	4ab4      	ldr	r2, [pc, #720]	; (8004320 <UART_SetConfig+0x34c>)
 8004050:	4013      	ands	r3, r2
 8004052:	0019      	movs	r1, r3
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800405a:	430a      	orrs	r2, r1
 800405c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4ab0      	ldr	r2, [pc, #704]	; (8004324 <UART_SetConfig+0x350>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d131      	bne.n	80040cc <UART_SetConfig+0xf8>
 8004068:	4baf      	ldr	r3, [pc, #700]	; (8004328 <UART_SetConfig+0x354>)
 800406a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406c:	2203      	movs	r2, #3
 800406e:	4013      	ands	r3, r2
 8004070:	2b03      	cmp	r3, #3
 8004072:	d01d      	beq.n	80040b0 <UART_SetConfig+0xdc>
 8004074:	d823      	bhi.n	80040be <UART_SetConfig+0xea>
 8004076:	2b02      	cmp	r3, #2
 8004078:	d00c      	beq.n	8004094 <UART_SetConfig+0xc0>
 800407a:	d820      	bhi.n	80040be <UART_SetConfig+0xea>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <UART_SetConfig+0xb2>
 8004080:	2b01      	cmp	r3, #1
 8004082:	d00e      	beq.n	80040a2 <UART_SetConfig+0xce>
 8004084:	e01b      	b.n	80040be <UART_SetConfig+0xea>
 8004086:	231b      	movs	r3, #27
 8004088:	2218      	movs	r2, #24
 800408a:	189b      	adds	r3, r3, r2
 800408c:	19db      	adds	r3, r3, r7
 800408e:	2201      	movs	r2, #1
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	e0b4      	b.n	80041fe <UART_SetConfig+0x22a>
 8004094:	231b      	movs	r3, #27
 8004096:	2218      	movs	r2, #24
 8004098:	189b      	adds	r3, r3, r2
 800409a:	19db      	adds	r3, r3, r7
 800409c:	2202      	movs	r2, #2
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	e0ad      	b.n	80041fe <UART_SetConfig+0x22a>
 80040a2:	231b      	movs	r3, #27
 80040a4:	2218      	movs	r2, #24
 80040a6:	189b      	adds	r3, r3, r2
 80040a8:	19db      	adds	r3, r3, r7
 80040aa:	2204      	movs	r2, #4
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e0a6      	b.n	80041fe <UART_SetConfig+0x22a>
 80040b0:	231b      	movs	r3, #27
 80040b2:	2218      	movs	r2, #24
 80040b4:	189b      	adds	r3, r3, r2
 80040b6:	19db      	adds	r3, r3, r7
 80040b8:	2208      	movs	r2, #8
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	e09f      	b.n	80041fe <UART_SetConfig+0x22a>
 80040be:	231b      	movs	r3, #27
 80040c0:	2218      	movs	r2, #24
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	19db      	adds	r3, r3, r7
 80040c6:	2210      	movs	r2, #16
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e098      	b.n	80041fe <UART_SetConfig+0x22a>
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a96      	ldr	r2, [pc, #600]	; (800432c <UART_SetConfig+0x358>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d131      	bne.n	800413a <UART_SetConfig+0x166>
 80040d6:	4b94      	ldr	r3, [pc, #592]	; (8004328 <UART_SetConfig+0x354>)
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	220c      	movs	r2, #12
 80040dc:	4013      	ands	r3, r2
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d01d      	beq.n	800411e <UART_SetConfig+0x14a>
 80040e2:	d823      	bhi.n	800412c <UART_SetConfig+0x158>
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d00c      	beq.n	8004102 <UART_SetConfig+0x12e>
 80040e8:	d820      	bhi.n	800412c <UART_SetConfig+0x158>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <UART_SetConfig+0x120>
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d00e      	beq.n	8004110 <UART_SetConfig+0x13c>
 80040f2:	e01b      	b.n	800412c <UART_SetConfig+0x158>
 80040f4:	231b      	movs	r3, #27
 80040f6:	2218      	movs	r2, #24
 80040f8:	189b      	adds	r3, r3, r2
 80040fa:	19db      	adds	r3, r3, r7
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e07d      	b.n	80041fe <UART_SetConfig+0x22a>
 8004102:	231b      	movs	r3, #27
 8004104:	2218      	movs	r2, #24
 8004106:	189b      	adds	r3, r3, r2
 8004108:	19db      	adds	r3, r3, r7
 800410a:	2202      	movs	r2, #2
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	e076      	b.n	80041fe <UART_SetConfig+0x22a>
 8004110:	231b      	movs	r3, #27
 8004112:	2218      	movs	r2, #24
 8004114:	189b      	adds	r3, r3, r2
 8004116:	19db      	adds	r3, r3, r7
 8004118:	2204      	movs	r2, #4
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e06f      	b.n	80041fe <UART_SetConfig+0x22a>
 800411e:	231b      	movs	r3, #27
 8004120:	2218      	movs	r2, #24
 8004122:	189b      	adds	r3, r3, r2
 8004124:	19db      	adds	r3, r3, r7
 8004126:	2208      	movs	r2, #8
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e068      	b.n	80041fe <UART_SetConfig+0x22a>
 800412c:	231b      	movs	r3, #27
 800412e:	2218      	movs	r2, #24
 8004130:	189b      	adds	r3, r3, r2
 8004132:	19db      	adds	r3, r3, r7
 8004134:	2210      	movs	r2, #16
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e061      	b.n	80041fe <UART_SetConfig+0x22a>
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a7c      	ldr	r2, [pc, #496]	; (8004330 <UART_SetConfig+0x35c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d106      	bne.n	8004152 <UART_SetConfig+0x17e>
 8004144:	231b      	movs	r3, #27
 8004146:	2218      	movs	r2, #24
 8004148:	189b      	adds	r3, r3, r2
 800414a:	19db      	adds	r3, r3, r7
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	e055      	b.n	80041fe <UART_SetConfig+0x22a>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a77      	ldr	r2, [pc, #476]	; (8004334 <UART_SetConfig+0x360>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d106      	bne.n	800416a <UART_SetConfig+0x196>
 800415c:	231b      	movs	r3, #27
 800415e:	2218      	movs	r2, #24
 8004160:	189b      	adds	r3, r3, r2
 8004162:	19db      	adds	r3, r3, r7
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	e049      	b.n	80041fe <UART_SetConfig+0x22a>
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a6b      	ldr	r2, [pc, #428]	; (800431c <UART_SetConfig+0x348>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d13e      	bne.n	80041f2 <UART_SetConfig+0x21e>
 8004174:	4b6c      	ldr	r3, [pc, #432]	; (8004328 <UART_SetConfig+0x354>)
 8004176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004178:	23c0      	movs	r3, #192	; 0xc0
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4013      	ands	r3, r2
 800417e:	22c0      	movs	r2, #192	; 0xc0
 8004180:	0112      	lsls	r2, r2, #4
 8004182:	4293      	cmp	r3, r2
 8004184:	d027      	beq.n	80041d6 <UART_SetConfig+0x202>
 8004186:	22c0      	movs	r2, #192	; 0xc0
 8004188:	0112      	lsls	r2, r2, #4
 800418a:	4293      	cmp	r3, r2
 800418c:	d82a      	bhi.n	80041e4 <UART_SetConfig+0x210>
 800418e:	2280      	movs	r2, #128	; 0x80
 8004190:	0112      	lsls	r2, r2, #4
 8004192:	4293      	cmp	r3, r2
 8004194:	d011      	beq.n	80041ba <UART_SetConfig+0x1e6>
 8004196:	2280      	movs	r2, #128	; 0x80
 8004198:	0112      	lsls	r2, r2, #4
 800419a:	4293      	cmp	r3, r2
 800419c:	d822      	bhi.n	80041e4 <UART_SetConfig+0x210>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <UART_SetConfig+0x1d8>
 80041a2:	2280      	movs	r2, #128	; 0x80
 80041a4:	00d2      	lsls	r2, r2, #3
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00e      	beq.n	80041c8 <UART_SetConfig+0x1f4>
 80041aa:	e01b      	b.n	80041e4 <UART_SetConfig+0x210>
 80041ac:	231b      	movs	r3, #27
 80041ae:	2218      	movs	r2, #24
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	19db      	adds	r3, r3, r7
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	e021      	b.n	80041fe <UART_SetConfig+0x22a>
 80041ba:	231b      	movs	r3, #27
 80041bc:	2218      	movs	r2, #24
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	19db      	adds	r3, r3, r7
 80041c2:	2202      	movs	r2, #2
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	e01a      	b.n	80041fe <UART_SetConfig+0x22a>
 80041c8:	231b      	movs	r3, #27
 80041ca:	2218      	movs	r2, #24
 80041cc:	189b      	adds	r3, r3, r2
 80041ce:	19db      	adds	r3, r3, r7
 80041d0:	2204      	movs	r2, #4
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e013      	b.n	80041fe <UART_SetConfig+0x22a>
 80041d6:	231b      	movs	r3, #27
 80041d8:	2218      	movs	r2, #24
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	19db      	adds	r3, r3, r7
 80041de:	2208      	movs	r2, #8
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e00c      	b.n	80041fe <UART_SetConfig+0x22a>
 80041e4:	231b      	movs	r3, #27
 80041e6:	2218      	movs	r2, #24
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	19db      	adds	r3, r3, r7
 80041ec:	2210      	movs	r2, #16
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e005      	b.n	80041fe <UART_SetConfig+0x22a>
 80041f2:	231b      	movs	r3, #27
 80041f4:	2218      	movs	r2, #24
 80041f6:	189b      	adds	r3, r3, r2
 80041f8:	19db      	adds	r3, r3, r7
 80041fa:	2210      	movs	r2, #16
 80041fc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a46      	ldr	r2, [pc, #280]	; (800431c <UART_SetConfig+0x348>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d000      	beq.n	800420a <UART_SetConfig+0x236>
 8004208:	e09a      	b.n	8004340 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800420a:	231b      	movs	r3, #27
 800420c:	2218      	movs	r2, #24
 800420e:	189b      	adds	r3, r3, r2
 8004210:	19db      	adds	r3, r3, r7
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d01d      	beq.n	8004254 <UART_SetConfig+0x280>
 8004218:	dc20      	bgt.n	800425c <UART_SetConfig+0x288>
 800421a:	2b04      	cmp	r3, #4
 800421c:	d015      	beq.n	800424a <UART_SetConfig+0x276>
 800421e:	dc1d      	bgt.n	800425c <UART_SetConfig+0x288>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <UART_SetConfig+0x256>
 8004224:	2b02      	cmp	r3, #2
 8004226:	d005      	beq.n	8004234 <UART_SetConfig+0x260>
 8004228:	e018      	b.n	800425c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800422a:	f7ff fc15 	bl	8003a58 <HAL_RCC_GetPCLK1Freq>
 800422e:	0003      	movs	r3, r0
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004232:	e01c      	b.n	800426e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004234:	4b3c      	ldr	r3, [pc, #240]	; (8004328 <UART_SetConfig+0x354>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2210      	movs	r2, #16
 800423a:	4013      	ands	r3, r2
 800423c:	d002      	beq.n	8004244 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800423e:	4b3e      	ldr	r3, [pc, #248]	; (8004338 <UART_SetConfig+0x364>)
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004242:	e014      	b.n	800426e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004244:	4b3d      	ldr	r3, [pc, #244]	; (800433c <UART_SetConfig+0x368>)
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004248:	e011      	b.n	800426e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424a:	f7ff fb55 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 800424e:	0003      	movs	r3, r0
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004252:	e00c      	b.n	800426e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800425a:	e008      	b.n	800426e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004260:	231a      	movs	r3, #26
 8004262:	2218      	movs	r2, #24
 8004264:	189b      	adds	r3, r3, r2
 8004266:	19db      	adds	r3, r3, r7
 8004268:	2201      	movs	r2, #1
 800426a:	701a      	strb	r2, [r3, #0]
        break;
 800426c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d100      	bne.n	8004276 <UART_SetConfig+0x2a2>
 8004274:	e133      	b.n	80044de <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	0013      	movs	r3, r2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	189b      	adds	r3, r3, r2
 8004280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004282:	429a      	cmp	r2, r3
 8004284:	d305      	bcc.n	8004292 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800428c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800428e:	429a      	cmp	r2, r3
 8004290:	d906      	bls.n	80042a0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004292:	231a      	movs	r3, #26
 8004294:	2218      	movs	r2, #24
 8004296:	189b      	adds	r3, r3, r2
 8004298:	19db      	adds	r3, r3, r7
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e11e      	b.n	80044de <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	6939      	ldr	r1, [r7, #16]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	000b      	movs	r3, r1
 80042ae:	0e1b      	lsrs	r3, r3, #24
 80042b0:	0010      	movs	r0, r2
 80042b2:	0205      	lsls	r5, r0, #8
 80042b4:	431d      	orrs	r5, r3
 80042b6:	000b      	movs	r3, r1
 80042b8:	021c      	lsls	r4, r3, #8
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	68b8      	ldr	r0, [r7, #8]
 80042c8:	68f9      	ldr	r1, [r7, #12]
 80042ca:	1900      	adds	r0, r0, r4
 80042cc:	4169      	adcs	r1, r5
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	2300      	movs	r3, #0
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f7fb ffb2 	bl	8000244 <__aeabi_uldivmod>
 80042e0:	0002      	movs	r2, r0
 80042e2:	000b      	movs	r3, r1
 80042e4:	0013      	movs	r3, r2
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ea:	23c0      	movs	r3, #192	; 0xc0
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d309      	bcc.n	8004306 <UART_SetConfig+0x332>
 80042f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	035b      	lsls	r3, r3, #13
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d204      	bcs.n	8004306 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004302:	60da      	str	r2, [r3, #12]
 8004304:	e0eb      	b.n	80044de <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004306:	231a      	movs	r3, #26
 8004308:	2218      	movs	r2, #24
 800430a:	189b      	adds	r3, r3, r2
 800430c:	19db      	adds	r3, r3, r7
 800430e:	2201      	movs	r2, #1
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e0e4      	b.n	80044de <UART_SetConfig+0x50a>
 8004314:	efff69f3 	.word	0xefff69f3
 8004318:	ffffcfff 	.word	0xffffcfff
 800431c:	40004800 	.word	0x40004800
 8004320:	fffff4ff 	.word	0xfffff4ff
 8004324:	40013800 	.word	0x40013800
 8004328:	40021000 	.word	0x40021000
 800432c:	40004400 	.word	0x40004400
 8004330:	40004c00 	.word	0x40004c00
 8004334:	40005000 	.word	0x40005000
 8004338:	003d0900 	.word	0x003d0900
 800433c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	429a      	cmp	r2, r3
 800434a:	d000      	beq.n	800434e <UART_SetConfig+0x37a>
 800434c:	e070      	b.n	8004430 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800434e:	231b      	movs	r3, #27
 8004350:	2218      	movs	r2, #24
 8004352:	189b      	adds	r3, r3, r2
 8004354:	19db      	adds	r3, r3, r7
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d822      	bhi.n	80043a2 <UART_SetConfig+0x3ce>
 800435c:	009a      	lsls	r2, r3, #2
 800435e:	4b67      	ldr	r3, [pc, #412]	; (80044fc <UART_SetConfig+0x528>)
 8004360:	18d3      	adds	r3, r2, r3
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004366:	f7ff fb77 	bl	8003a58 <HAL_RCC_GetPCLK1Freq>
 800436a:	0003      	movs	r3, r0
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800436e:	e021      	b.n	80043b4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004370:	f7ff fb88 	bl	8003a84 <HAL_RCC_GetPCLK2Freq>
 8004374:	0003      	movs	r3, r0
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004378:	e01c      	b.n	80043b4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800437a:	4b61      	ldr	r3, [pc, #388]	; (8004500 <UART_SetConfig+0x52c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2210      	movs	r2, #16
 8004380:	4013      	ands	r3, r2
 8004382:	d002      	beq.n	800438a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004384:	4b5f      	ldr	r3, [pc, #380]	; (8004504 <UART_SetConfig+0x530>)
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004388:	e014      	b.n	80043b4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800438a:	4b5f      	ldr	r3, [pc, #380]	; (8004508 <UART_SetConfig+0x534>)
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800438e:	e011      	b.n	80043b4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004390:	f7ff fab2 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8004394:	0003      	movs	r3, r0
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004398:	e00c      	b.n	80043b4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043a0:	e008      	b.n	80043b4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80043a6:	231a      	movs	r3, #26
 80043a8:	2218      	movs	r2, #24
 80043aa:	189b      	adds	r3, r3, r2
 80043ac:	19db      	adds	r3, r3, r7
 80043ae:	2201      	movs	r2, #1
 80043b0:	701a      	strb	r2, [r3, #0]
        break;
 80043b2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d100      	bne.n	80043bc <UART_SetConfig+0x3e8>
 80043ba:	e090      	b.n	80044de <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	005a      	lsls	r2, r3, #1
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	18d2      	adds	r2, r2, r3
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	0019      	movs	r1, r3
 80043ce:	0010      	movs	r0, r2
 80043d0:	f7fb feac 	bl	800012c <__udivsi3>
 80043d4:	0003      	movs	r3, r0
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	2b0f      	cmp	r3, #15
 80043dc:	d921      	bls.n	8004422 <UART_SetConfig+0x44e>
 80043de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	025b      	lsls	r3, r3, #9
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d21c      	bcs.n	8004422 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	200e      	movs	r0, #14
 80043ee:	2418      	movs	r4, #24
 80043f0:	1903      	adds	r3, r0, r4
 80043f2:	19db      	adds	r3, r3, r7
 80043f4:	210f      	movs	r1, #15
 80043f6:	438a      	bics	r2, r1
 80043f8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2207      	movs	r2, #7
 8004402:	4013      	ands	r3, r2
 8004404:	b299      	uxth	r1, r3
 8004406:	1903      	adds	r3, r0, r4
 8004408:	19db      	adds	r3, r3, r7
 800440a:	1902      	adds	r2, r0, r4
 800440c:	19d2      	adds	r2, r2, r7
 800440e:	8812      	ldrh	r2, [r2, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	1902      	adds	r2, r0, r4
 800441a:	19d2      	adds	r2, r2, r7
 800441c:	8812      	ldrh	r2, [r2, #0]
 800441e:	60da      	str	r2, [r3, #12]
 8004420:	e05d      	b.n	80044de <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004422:	231a      	movs	r3, #26
 8004424:	2218      	movs	r2, #24
 8004426:	189b      	adds	r3, r3, r2
 8004428:	19db      	adds	r3, r3, r7
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e056      	b.n	80044de <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004430:	231b      	movs	r3, #27
 8004432:	2218      	movs	r2, #24
 8004434:	189b      	adds	r3, r3, r2
 8004436:	19db      	adds	r3, r3, r7
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b08      	cmp	r3, #8
 800443c:	d822      	bhi.n	8004484 <UART_SetConfig+0x4b0>
 800443e:	009a      	lsls	r2, r3, #2
 8004440:	4b32      	ldr	r3, [pc, #200]	; (800450c <UART_SetConfig+0x538>)
 8004442:	18d3      	adds	r3, r2, r3
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004448:	f7ff fb06 	bl	8003a58 <HAL_RCC_GetPCLK1Freq>
 800444c:	0003      	movs	r3, r0
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004450:	e021      	b.n	8004496 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004452:	f7ff fb17 	bl	8003a84 <HAL_RCC_GetPCLK2Freq>
 8004456:	0003      	movs	r3, r0
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800445a:	e01c      	b.n	8004496 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800445c:	4b28      	ldr	r3, [pc, #160]	; (8004500 <UART_SetConfig+0x52c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2210      	movs	r2, #16
 8004462:	4013      	ands	r3, r2
 8004464:	d002      	beq.n	800446c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004466:	4b27      	ldr	r3, [pc, #156]	; (8004504 <UART_SetConfig+0x530>)
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800446a:	e014      	b.n	8004496 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800446c:	4b26      	ldr	r3, [pc, #152]	; (8004508 <UART_SetConfig+0x534>)
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004470:	e011      	b.n	8004496 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004472:	f7ff fa41 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8004476:	0003      	movs	r3, r0
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800447a:	e00c      	b.n	8004496 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004482:	e008      	b.n	8004496 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004488:	231a      	movs	r3, #26
 800448a:	2218      	movs	r2, #24
 800448c:	189b      	adds	r3, r3, r2
 800448e:	19db      	adds	r3, r3, r7
 8004490:	2201      	movs	r2, #1
 8004492:	701a      	strb	r2, [r3, #0]
        break;
 8004494:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	085a      	lsrs	r2, r3, #1
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	18d2      	adds	r2, r2, r3
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	0019      	movs	r1, r3
 80044ac:	0010      	movs	r0, r2
 80044ae:	f7fb fe3d 	bl	800012c <__udivsi3>
 80044b2:	0003      	movs	r3, r0
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	2b0f      	cmp	r3, #15
 80044ba:	d90a      	bls.n	80044d2 <UART_SetConfig+0x4fe>
 80044bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	025b      	lsls	r3, r3, #9
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d205      	bcs.n	80044d2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60da      	str	r2, [r3, #12]
 80044d0:	e005      	b.n	80044de <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80044d2:	231a      	movs	r3, #26
 80044d4:	2218      	movs	r2, #24
 80044d6:	189b      	adds	r3, r3, r2
 80044d8:	19db      	adds	r3, r3, r7
 80044da:	2201      	movs	r2, #1
 80044dc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2200      	movs	r2, #0
 80044e2:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2200      	movs	r2, #0
 80044e8:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044ea:	231a      	movs	r3, #26
 80044ec:	2218      	movs	r2, #24
 80044ee:	189b      	adds	r3, r3, r2
 80044f0:	19db      	adds	r3, r3, r7
 80044f2:	781b      	ldrb	r3, [r3, #0]
}
 80044f4:	0018      	movs	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b00e      	add	sp, #56	; 0x38
 80044fa:	bdb0      	pop	{r4, r5, r7, pc}
 80044fc:	08005300 	.word	0x08005300
 8004500:	40021000 	.word	0x40021000
 8004504:	003d0900 	.word	0x003d0900
 8004508:	00f42400 	.word	0x00f42400
 800450c:	08005324 	.word	0x08005324

08004510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	2201      	movs	r2, #1
 800451e:	4013      	ands	r3, r2
 8004520:	d00b      	beq.n	800453a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4a4a      	ldr	r2, [pc, #296]	; (8004654 <UART_AdvFeatureConfig+0x144>)
 800452a:	4013      	ands	r3, r2
 800452c:	0019      	movs	r1, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2202      	movs	r2, #2
 8004540:	4013      	ands	r3, r2
 8004542:	d00b      	beq.n	800455c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	4a43      	ldr	r2, [pc, #268]	; (8004658 <UART_AdvFeatureConfig+0x148>)
 800454c:	4013      	ands	r3, r2
 800454e:	0019      	movs	r1, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	2204      	movs	r2, #4
 8004562:	4013      	ands	r3, r2
 8004564:	d00b      	beq.n	800457e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4a3b      	ldr	r2, [pc, #236]	; (800465c <UART_AdvFeatureConfig+0x14c>)
 800456e:	4013      	ands	r3, r2
 8004570:	0019      	movs	r1, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	2208      	movs	r2, #8
 8004584:	4013      	ands	r3, r2
 8004586:	d00b      	beq.n	80045a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4a34      	ldr	r2, [pc, #208]	; (8004660 <UART_AdvFeatureConfig+0x150>)
 8004590:	4013      	ands	r3, r2
 8004592:	0019      	movs	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2210      	movs	r2, #16
 80045a6:	4013      	ands	r3, r2
 80045a8:	d00b      	beq.n	80045c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a2c      	ldr	r2, [pc, #176]	; (8004664 <UART_AdvFeatureConfig+0x154>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	0019      	movs	r1, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	2220      	movs	r2, #32
 80045c8:	4013      	ands	r3, r2
 80045ca:	d00b      	beq.n	80045e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	4a25      	ldr	r2, [pc, #148]	; (8004668 <UART_AdvFeatureConfig+0x158>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	0019      	movs	r1, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	2240      	movs	r2, #64	; 0x40
 80045ea:	4013      	ands	r3, r2
 80045ec:	d01d      	beq.n	800462a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	4a1d      	ldr	r2, [pc, #116]	; (800466c <UART_AdvFeatureConfig+0x15c>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	0019      	movs	r1, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800460a:	2380      	movs	r3, #128	; 0x80
 800460c:	035b      	lsls	r3, r3, #13
 800460e:	429a      	cmp	r2, r3
 8004610:	d10b      	bne.n	800462a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4a15      	ldr	r2, [pc, #84]	; (8004670 <UART_AdvFeatureConfig+0x160>)
 800461a:	4013      	ands	r3, r2
 800461c:	0019      	movs	r1, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2280      	movs	r2, #128	; 0x80
 8004630:	4013      	ands	r3, r2
 8004632:	d00b      	beq.n	800464c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	4a0e      	ldr	r2, [pc, #56]	; (8004674 <UART_AdvFeatureConfig+0x164>)
 800463c:	4013      	ands	r3, r2
 800463e:	0019      	movs	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
  }
}
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	46bd      	mov	sp, r7
 8004650:	b002      	add	sp, #8
 8004652:	bd80      	pop	{r7, pc}
 8004654:	fffdffff 	.word	0xfffdffff
 8004658:	fffeffff 	.word	0xfffeffff
 800465c:	fffbffff 	.word	0xfffbffff
 8004660:	ffff7fff 	.word	0xffff7fff
 8004664:	ffffefff 	.word	0xffffefff
 8004668:	ffffdfff 	.word	0xffffdfff
 800466c:	ffefffff 	.word	0xffefffff
 8004670:	ff9fffff 	.word	0xff9fffff
 8004674:	fff7ffff 	.word	0xfff7ffff

08004678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b092      	sub	sp, #72	; 0x48
 800467c:	af02      	add	r7, sp, #8
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2284      	movs	r2, #132	; 0x84
 8004684:	2100      	movs	r1, #0
 8004686:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004688:	f7fc fe0c 	bl	80012a4 <HAL_GetTick>
 800468c:	0003      	movs	r3, r0
 800468e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2208      	movs	r2, #8
 8004698:	4013      	ands	r3, r2
 800469a:	2b08      	cmp	r3, #8
 800469c:	d12c      	bne.n	80046f8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800469e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a0:	2280      	movs	r2, #128	; 0x80
 80046a2:	0391      	lsls	r1, r2, #14
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	4a46      	ldr	r2, [pc, #280]	; (80047c0 <UART_CheckIdleState+0x148>)
 80046a8:	9200      	str	r2, [sp, #0]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f000 f88c 	bl	80047c8 <UART_WaitOnFlagUntilTimeout>
 80046b0:	1e03      	subs	r3, r0, #0
 80046b2:	d021      	beq.n	80046f8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b4:	f3ef 8310 	mrs	r3, PRIMASK
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80046be:	2301      	movs	r3, #1
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	f383 8810 	msr	PRIMASK, r3
}
 80046c8:	46c0      	nop			; (mov r8, r8)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2180      	movs	r1, #128	; 0x80
 80046d6:	438a      	bics	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	f383 8810 	msr	PRIMASK, r3
}
 80046e4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2278      	movs	r2, #120	; 0x78
 80046f0:	2100      	movs	r1, #0
 80046f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e05f      	b.n	80047b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2204      	movs	r2, #4
 8004700:	4013      	ands	r3, r2
 8004702:	2b04      	cmp	r3, #4
 8004704:	d146      	bne.n	8004794 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004708:	2280      	movs	r2, #128	; 0x80
 800470a:	03d1      	lsls	r1, r2, #15
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <UART_CheckIdleState+0x148>)
 8004710:	9200      	str	r2, [sp, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	f000 f858 	bl	80047c8 <UART_WaitOnFlagUntilTimeout>
 8004718:	1e03      	subs	r3, r0, #0
 800471a:	d03b      	beq.n	8004794 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800471c:	f3ef 8310 	mrs	r3, PRIMASK
 8004720:	60fb      	str	r3, [r7, #12]
  return(result);
 8004722:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004724:	637b      	str	r3, [r7, #52]	; 0x34
 8004726:	2301      	movs	r3, #1
 8004728:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f383 8810 	msr	PRIMASK, r3
}
 8004730:	46c0      	nop			; (mov r8, r8)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4921      	ldr	r1, [pc, #132]	; (80047c4 <UART_CheckIdleState+0x14c>)
 800473e:	400a      	ands	r2, r1
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004744:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f383 8810 	msr	PRIMASK, r3
}
 800474c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800474e:	f3ef 8310 	mrs	r3, PRIMASK
 8004752:	61bb      	str	r3, [r7, #24]
  return(result);
 8004754:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004756:	633b      	str	r3, [r7, #48]	; 0x30
 8004758:	2301      	movs	r3, #1
 800475a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f383 8810 	msr	PRIMASK, r3
}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2101      	movs	r1, #1
 8004770:	438a      	bics	r2, r1
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	f383 8810 	msr	PRIMASK, r3
}
 800477e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2280      	movs	r2, #128	; 0x80
 8004784:	2120      	movs	r1, #32
 8004786:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2278      	movs	r2, #120	; 0x78
 800478c:	2100      	movs	r1, #0
 800478e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e011      	b.n	80047b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2280      	movs	r2, #128	; 0x80
 800479e:	2120      	movs	r1, #32
 80047a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2278      	movs	r2, #120	; 0x78
 80047b2:	2100      	movs	r1, #0
 80047b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	0018      	movs	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b010      	add	sp, #64	; 0x40
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	01ffffff 	.word	0x01ffffff
 80047c4:	fffffedf 	.word	0xfffffedf

080047c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	1dfb      	adds	r3, r7, #7
 80047d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d8:	e04b      	b.n	8004872 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	3301      	adds	r3, #1
 80047de:	d048      	beq.n	8004872 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e0:	f7fc fd60 	bl	80012a4 <HAL_GetTick>
 80047e4:	0002      	movs	r2, r0
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d302      	bcc.n	80047f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e04b      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2204      	movs	r2, #4
 8004802:	4013      	ands	r3, r2
 8004804:	d035      	beq.n	8004872 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	2208      	movs	r2, #8
 800480e:	4013      	ands	r3, r2
 8004810:	2b08      	cmp	r3, #8
 8004812:	d111      	bne.n	8004838 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2208      	movs	r2, #8
 800481a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	0018      	movs	r0, r3
 8004820:	f000 f83c 	bl	800489c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2284      	movs	r2, #132	; 0x84
 8004828:	2108      	movs	r1, #8
 800482a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2278      	movs	r2, #120	; 0x78
 8004830:	2100      	movs	r1, #0
 8004832:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e02c      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	401a      	ands	r2, r3
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	429a      	cmp	r2, r3
 800484a:	d112      	bne.n	8004872 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2280      	movs	r2, #128	; 0x80
 8004852:	0112      	lsls	r2, r2, #4
 8004854:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	0018      	movs	r0, r3
 800485a:	f000 f81f 	bl	800489c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2284      	movs	r2, #132	; 0x84
 8004862:	2120      	movs	r1, #32
 8004864:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2278      	movs	r2, #120	; 0x78
 800486a:	2100      	movs	r1, #0
 800486c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e00f      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	4013      	ands	r3, r2
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	425a      	negs	r2, r3
 8004882:	4153      	adcs	r3, r2
 8004884:	b2db      	uxtb	r3, r3
 8004886:	001a      	movs	r2, r3
 8004888:	1dfb      	adds	r3, r7, #7
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d0a4      	beq.n	80047da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	0018      	movs	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	b004      	add	sp, #16
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08e      	sub	sp, #56	; 0x38
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a4:	f3ef 8310 	mrs	r3, PRIMASK
 80048a8:	617b      	str	r3, [r7, #20]
  return(result);
 80048aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ac:	637b      	str	r3, [r7, #52]	; 0x34
 80048ae:	2301      	movs	r3, #1
 80048b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f383 8810 	msr	PRIMASK, r3
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4926      	ldr	r1, [pc, #152]	; (8004960 <UART_EndRxTransfer+0xc4>)
 80048c6:	400a      	ands	r2, r1
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f383 8810 	msr	PRIMASK, r3
}
 80048d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d6:	f3ef 8310 	mrs	r3, PRIMASK
 80048da:	623b      	str	r3, [r7, #32]
  return(result);
 80048dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	633b      	str	r3, [r7, #48]	; 0x30
 80048e0:	2301      	movs	r3, #1
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	f383 8810 	msr	PRIMASK, r3
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2101      	movs	r1, #1
 80048f8:	438a      	bics	r2, r1
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	f383 8810 	msr	PRIMASK, r3
}
 8004906:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490c:	2b01      	cmp	r3, #1
 800490e:	d118      	bne.n	8004942 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004910:	f3ef 8310 	mrs	r3, PRIMASK
 8004914:	60bb      	str	r3, [r7, #8]
  return(result);
 8004916:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491a:	2301      	movs	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f383 8810 	msr	PRIMASK, r3
}
 8004924:	46c0      	nop			; (mov r8, r8)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2110      	movs	r1, #16
 8004932:	438a      	bics	r2, r1
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f383 8810 	msr	PRIMASK, r3
}
 8004940:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2280      	movs	r2, #128	; 0x80
 8004946:	2120      	movs	r1, #32
 8004948:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	46bd      	mov	sp, r7
 800495a:	b00e      	add	sp, #56	; 0x38
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	fffffedf 	.word	0xfffffedf

08004964 <siprintf>:
 8004964:	b40e      	push	{r1, r2, r3}
 8004966:	b500      	push	{lr}
 8004968:	490b      	ldr	r1, [pc, #44]	; (8004998 <siprintf+0x34>)
 800496a:	b09c      	sub	sp, #112	; 0x70
 800496c:	ab1d      	add	r3, sp, #116	; 0x74
 800496e:	9002      	str	r0, [sp, #8]
 8004970:	9006      	str	r0, [sp, #24]
 8004972:	9107      	str	r1, [sp, #28]
 8004974:	9104      	str	r1, [sp, #16]
 8004976:	4809      	ldr	r0, [pc, #36]	; (800499c <siprintf+0x38>)
 8004978:	4909      	ldr	r1, [pc, #36]	; (80049a0 <siprintf+0x3c>)
 800497a:	cb04      	ldmia	r3!, {r2}
 800497c:	9105      	str	r1, [sp, #20]
 800497e:	6800      	ldr	r0, [r0, #0]
 8004980:	a902      	add	r1, sp, #8
 8004982:	9301      	str	r3, [sp, #4]
 8004984:	f000 f9a2 	bl	8004ccc <_svfiprintf_r>
 8004988:	2200      	movs	r2, #0
 800498a:	9b02      	ldr	r3, [sp, #8]
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	b01c      	add	sp, #112	; 0x70
 8004990:	bc08      	pop	{r3}
 8004992:	b003      	add	sp, #12
 8004994:	4718      	bx	r3
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	7fffffff 	.word	0x7fffffff
 800499c:	2000005c 	.word	0x2000005c
 80049a0:	ffff0208 	.word	0xffff0208

080049a4 <memset>:
 80049a4:	0003      	movs	r3, r0
 80049a6:	1882      	adds	r2, r0, r2
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d100      	bne.n	80049ae <memset+0xa>
 80049ac:	4770      	bx	lr
 80049ae:	7019      	strb	r1, [r3, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	e7f9      	b.n	80049a8 <memset+0x4>

080049b4 <__errno>:
 80049b4:	4b01      	ldr	r3, [pc, #4]	; (80049bc <__errno+0x8>)
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	4770      	bx	lr
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	2000005c 	.word	0x2000005c

080049c0 <__libc_init_array>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	2600      	movs	r6, #0
 80049c4:	4c0c      	ldr	r4, [pc, #48]	; (80049f8 <__libc_init_array+0x38>)
 80049c6:	4d0d      	ldr	r5, [pc, #52]	; (80049fc <__libc_init_array+0x3c>)
 80049c8:	1b64      	subs	r4, r4, r5
 80049ca:	10a4      	asrs	r4, r4, #2
 80049cc:	42a6      	cmp	r6, r4
 80049ce:	d109      	bne.n	80049e4 <__libc_init_array+0x24>
 80049d0:	2600      	movs	r6, #0
 80049d2:	f000 fc6d 	bl	80052b0 <_init>
 80049d6:	4c0a      	ldr	r4, [pc, #40]	; (8004a00 <__libc_init_array+0x40>)
 80049d8:	4d0a      	ldr	r5, [pc, #40]	; (8004a04 <__libc_init_array+0x44>)
 80049da:	1b64      	subs	r4, r4, r5
 80049dc:	10a4      	asrs	r4, r4, #2
 80049de:	42a6      	cmp	r6, r4
 80049e0:	d105      	bne.n	80049ee <__libc_init_array+0x2e>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	00b3      	lsls	r3, r6, #2
 80049e6:	58eb      	ldr	r3, [r5, r3]
 80049e8:	4798      	blx	r3
 80049ea:	3601      	adds	r6, #1
 80049ec:	e7ee      	b.n	80049cc <__libc_init_array+0xc>
 80049ee:	00b3      	lsls	r3, r6, #2
 80049f0:	58eb      	ldr	r3, [r5, r3]
 80049f2:	4798      	blx	r3
 80049f4:	3601      	adds	r6, #1
 80049f6:	e7f2      	b.n	80049de <__libc_init_array+0x1e>
 80049f8:	08005384 	.word	0x08005384
 80049fc:	08005384 	.word	0x08005384
 8004a00:	08005388 	.word	0x08005388
 8004a04:	08005384 	.word	0x08005384

08004a08 <__retarget_lock_acquire_recursive>:
 8004a08:	4770      	bx	lr

08004a0a <__retarget_lock_release_recursive>:
 8004a0a:	4770      	bx	lr

08004a0c <_free_r>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	0005      	movs	r5, r0
 8004a10:	2900      	cmp	r1, #0
 8004a12:	d010      	beq.n	8004a36 <_free_r+0x2a>
 8004a14:	1f0c      	subs	r4, r1, #4
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	da00      	bge.n	8004a1e <_free_r+0x12>
 8004a1c:	18e4      	adds	r4, r4, r3
 8004a1e:	0028      	movs	r0, r5
 8004a20:	f000 f8e2 	bl	8004be8 <__malloc_lock>
 8004a24:	4a1d      	ldr	r2, [pc, #116]	; (8004a9c <_free_r+0x90>)
 8004a26:	6813      	ldr	r3, [r2, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d105      	bne.n	8004a38 <_free_r+0x2c>
 8004a2c:	6063      	str	r3, [r4, #4]
 8004a2e:	6014      	str	r4, [r2, #0]
 8004a30:	0028      	movs	r0, r5
 8004a32:	f000 f8e1 	bl	8004bf8 <__malloc_unlock>
 8004a36:	bd70      	pop	{r4, r5, r6, pc}
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	d908      	bls.n	8004a4e <_free_r+0x42>
 8004a3c:	6820      	ldr	r0, [r4, #0]
 8004a3e:	1821      	adds	r1, r4, r0
 8004a40:	428b      	cmp	r3, r1
 8004a42:	d1f3      	bne.n	8004a2c <_free_r+0x20>
 8004a44:	6819      	ldr	r1, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	1809      	adds	r1, r1, r0
 8004a4a:	6021      	str	r1, [r4, #0]
 8004a4c:	e7ee      	b.n	8004a2c <_free_r+0x20>
 8004a4e:	001a      	movs	r2, r3
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <_free_r+0x4e>
 8004a56:	42a3      	cmp	r3, r4
 8004a58:	d9f9      	bls.n	8004a4e <_free_r+0x42>
 8004a5a:	6811      	ldr	r1, [r2, #0]
 8004a5c:	1850      	adds	r0, r2, r1
 8004a5e:	42a0      	cmp	r0, r4
 8004a60:	d10b      	bne.n	8004a7a <_free_r+0x6e>
 8004a62:	6820      	ldr	r0, [r4, #0]
 8004a64:	1809      	adds	r1, r1, r0
 8004a66:	1850      	adds	r0, r2, r1
 8004a68:	6011      	str	r1, [r2, #0]
 8004a6a:	4283      	cmp	r3, r0
 8004a6c:	d1e0      	bne.n	8004a30 <_free_r+0x24>
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	1841      	adds	r1, r0, r1
 8004a74:	6011      	str	r1, [r2, #0]
 8004a76:	6053      	str	r3, [r2, #4]
 8004a78:	e7da      	b.n	8004a30 <_free_r+0x24>
 8004a7a:	42a0      	cmp	r0, r4
 8004a7c:	d902      	bls.n	8004a84 <_free_r+0x78>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	e7d5      	b.n	8004a30 <_free_r+0x24>
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	1821      	adds	r1, r4, r0
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	d103      	bne.n	8004a94 <_free_r+0x88>
 8004a8c:	6819      	ldr	r1, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	1809      	adds	r1, r1, r0
 8004a92:	6021      	str	r1, [r4, #0]
 8004a94:	6063      	str	r3, [r4, #4]
 8004a96:	6054      	str	r4, [r2, #4]
 8004a98:	e7ca      	b.n	8004a30 <_free_r+0x24>
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	20000318 	.word	0x20000318

08004aa0 <sbrk_aligned>:
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	4e0f      	ldr	r6, [pc, #60]	; (8004ae0 <sbrk_aligned+0x40>)
 8004aa4:	000d      	movs	r5, r1
 8004aa6:	6831      	ldr	r1, [r6, #0]
 8004aa8:	0004      	movs	r4, r0
 8004aaa:	2900      	cmp	r1, #0
 8004aac:	d102      	bne.n	8004ab4 <sbrk_aligned+0x14>
 8004aae:	f000 fba1 	bl	80051f4 <_sbrk_r>
 8004ab2:	6030      	str	r0, [r6, #0]
 8004ab4:	0029      	movs	r1, r5
 8004ab6:	0020      	movs	r0, r4
 8004ab8:	f000 fb9c 	bl	80051f4 <_sbrk_r>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d00a      	beq.n	8004ad6 <sbrk_aligned+0x36>
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	1cc5      	adds	r5, r0, #3
 8004ac4:	439d      	bics	r5, r3
 8004ac6:	42a8      	cmp	r0, r5
 8004ac8:	d007      	beq.n	8004ada <sbrk_aligned+0x3a>
 8004aca:	1a29      	subs	r1, r5, r0
 8004acc:	0020      	movs	r0, r4
 8004ace:	f000 fb91 	bl	80051f4 <_sbrk_r>
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d101      	bne.n	8004ada <sbrk_aligned+0x3a>
 8004ad6:	2501      	movs	r5, #1
 8004ad8:	426d      	negs	r5, r5
 8004ada:	0028      	movs	r0, r5
 8004adc:	bd70      	pop	{r4, r5, r6, pc}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	2000031c 	.word	0x2000031c

08004ae4 <_malloc_r>:
 8004ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	1ccb      	adds	r3, r1, #3
 8004aea:	4393      	bics	r3, r2
 8004aec:	3308      	adds	r3, #8
 8004aee:	0006      	movs	r6, r0
 8004af0:	001f      	movs	r7, r3
 8004af2:	2b0c      	cmp	r3, #12
 8004af4:	d238      	bcs.n	8004b68 <_malloc_r+0x84>
 8004af6:	270c      	movs	r7, #12
 8004af8:	42b9      	cmp	r1, r7
 8004afa:	d837      	bhi.n	8004b6c <_malloc_r+0x88>
 8004afc:	0030      	movs	r0, r6
 8004afe:	f000 f873 	bl	8004be8 <__malloc_lock>
 8004b02:	4b38      	ldr	r3, [pc, #224]	; (8004be4 <_malloc_r+0x100>)
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	001c      	movs	r4, r3
 8004b0a:	2c00      	cmp	r4, #0
 8004b0c:	d133      	bne.n	8004b76 <_malloc_r+0x92>
 8004b0e:	0039      	movs	r1, r7
 8004b10:	0030      	movs	r0, r6
 8004b12:	f7ff ffc5 	bl	8004aa0 <sbrk_aligned>
 8004b16:	0004      	movs	r4, r0
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d15e      	bne.n	8004bda <_malloc_r+0xf6>
 8004b1c:	9b00      	ldr	r3, [sp, #0]
 8004b1e:	681c      	ldr	r4, [r3, #0]
 8004b20:	0025      	movs	r5, r4
 8004b22:	2d00      	cmp	r5, #0
 8004b24:	d14e      	bne.n	8004bc4 <_malloc_r+0xe0>
 8004b26:	2c00      	cmp	r4, #0
 8004b28:	d051      	beq.n	8004bce <_malloc_r+0xea>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	0029      	movs	r1, r5
 8004b2e:	18e3      	adds	r3, r4, r3
 8004b30:	0030      	movs	r0, r6
 8004b32:	9301      	str	r3, [sp, #4]
 8004b34:	f000 fb5e 	bl	80051f4 <_sbrk_r>
 8004b38:	9b01      	ldr	r3, [sp, #4]
 8004b3a:	4283      	cmp	r3, r0
 8004b3c:	d147      	bne.n	8004bce <_malloc_r+0xea>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	0030      	movs	r0, r6
 8004b42:	1aff      	subs	r7, r7, r3
 8004b44:	0039      	movs	r1, r7
 8004b46:	f7ff ffab 	bl	8004aa0 <sbrk_aligned>
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	d03f      	beq.n	8004bce <_malloc_r+0xea>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	19db      	adds	r3, r3, r7
 8004b52:	6023      	str	r3, [r4, #0]
 8004b54:	9b00      	ldr	r3, [sp, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d040      	beq.n	8004bde <_malloc_r+0xfa>
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	42a2      	cmp	r2, r4
 8004b60:	d133      	bne.n	8004bca <_malloc_r+0xe6>
 8004b62:	2200      	movs	r2, #0
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	e014      	b.n	8004b92 <_malloc_r+0xae>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	dac5      	bge.n	8004af8 <_malloc_r+0x14>
 8004b6c:	230c      	movs	r3, #12
 8004b6e:	2500      	movs	r5, #0
 8004b70:	6033      	str	r3, [r6, #0]
 8004b72:	0028      	movs	r0, r5
 8004b74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b76:	6821      	ldr	r1, [r4, #0]
 8004b78:	1bc9      	subs	r1, r1, r7
 8004b7a:	d420      	bmi.n	8004bbe <_malloc_r+0xda>
 8004b7c:	290b      	cmp	r1, #11
 8004b7e:	d918      	bls.n	8004bb2 <_malloc_r+0xce>
 8004b80:	19e2      	adds	r2, r4, r7
 8004b82:	6027      	str	r7, [r4, #0]
 8004b84:	42a3      	cmp	r3, r4
 8004b86:	d112      	bne.n	8004bae <_malloc_r+0xca>
 8004b88:	9b00      	ldr	r3, [sp, #0]
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	6863      	ldr	r3, [r4, #4]
 8004b8e:	6011      	str	r1, [r2, #0]
 8004b90:	6053      	str	r3, [r2, #4]
 8004b92:	0030      	movs	r0, r6
 8004b94:	0025      	movs	r5, r4
 8004b96:	f000 f82f 	bl	8004bf8 <__malloc_unlock>
 8004b9a:	2207      	movs	r2, #7
 8004b9c:	350b      	adds	r5, #11
 8004b9e:	1d23      	adds	r3, r4, #4
 8004ba0:	4395      	bics	r5, r2
 8004ba2:	1aea      	subs	r2, r5, r3
 8004ba4:	429d      	cmp	r5, r3
 8004ba6:	d0e4      	beq.n	8004b72 <_malloc_r+0x8e>
 8004ba8:	1b5b      	subs	r3, r3, r5
 8004baa:	50a3      	str	r3, [r4, r2]
 8004bac:	e7e1      	b.n	8004b72 <_malloc_r+0x8e>
 8004bae:	605a      	str	r2, [r3, #4]
 8004bb0:	e7ec      	b.n	8004b8c <_malloc_r+0xa8>
 8004bb2:	6862      	ldr	r2, [r4, #4]
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	d1d5      	bne.n	8004b64 <_malloc_r+0x80>
 8004bb8:	9b00      	ldr	r3, [sp, #0]
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	e7e9      	b.n	8004b92 <_malloc_r+0xae>
 8004bbe:	0023      	movs	r3, r4
 8004bc0:	6864      	ldr	r4, [r4, #4]
 8004bc2:	e7a2      	b.n	8004b0a <_malloc_r+0x26>
 8004bc4:	002c      	movs	r4, r5
 8004bc6:	686d      	ldr	r5, [r5, #4]
 8004bc8:	e7ab      	b.n	8004b22 <_malloc_r+0x3e>
 8004bca:	0013      	movs	r3, r2
 8004bcc:	e7c4      	b.n	8004b58 <_malloc_r+0x74>
 8004bce:	230c      	movs	r3, #12
 8004bd0:	0030      	movs	r0, r6
 8004bd2:	6033      	str	r3, [r6, #0]
 8004bd4:	f000 f810 	bl	8004bf8 <__malloc_unlock>
 8004bd8:	e7cb      	b.n	8004b72 <_malloc_r+0x8e>
 8004bda:	6027      	str	r7, [r4, #0]
 8004bdc:	e7d9      	b.n	8004b92 <_malloc_r+0xae>
 8004bde:	605b      	str	r3, [r3, #4]
 8004be0:	deff      	udf	#255	; 0xff
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	20000318 	.word	0x20000318

08004be8 <__malloc_lock>:
 8004be8:	b510      	push	{r4, lr}
 8004bea:	4802      	ldr	r0, [pc, #8]	; (8004bf4 <__malloc_lock+0xc>)
 8004bec:	f7ff ff0c 	bl	8004a08 <__retarget_lock_acquire_recursive>
 8004bf0:	bd10      	pop	{r4, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	20000314 	.word	0x20000314

08004bf8 <__malloc_unlock>:
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	4802      	ldr	r0, [pc, #8]	; (8004c04 <__malloc_unlock+0xc>)
 8004bfc:	f7ff ff05 	bl	8004a0a <__retarget_lock_release_recursive>
 8004c00:	bd10      	pop	{r4, pc}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	20000314 	.word	0x20000314

08004c08 <__ssputs_r>:
 8004c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	9203      	str	r2, [sp, #12]
 8004c10:	688e      	ldr	r6, [r1, #8]
 8004c12:	9a01      	ldr	r2, [sp, #4]
 8004c14:	0007      	movs	r7, r0
 8004c16:	000c      	movs	r4, r1
 8004c18:	680b      	ldr	r3, [r1, #0]
 8004c1a:	4296      	cmp	r6, r2
 8004c1c:	d831      	bhi.n	8004c82 <__ssputs_r+0x7a>
 8004c1e:	898a      	ldrh	r2, [r1, #12]
 8004c20:	2190      	movs	r1, #144	; 0x90
 8004c22:	00c9      	lsls	r1, r1, #3
 8004c24:	420a      	tst	r2, r1
 8004c26:	d029      	beq.n	8004c7c <__ssputs_r+0x74>
 8004c28:	2003      	movs	r0, #3
 8004c2a:	6921      	ldr	r1, [r4, #16]
 8004c2c:	1a5b      	subs	r3, r3, r1
 8004c2e:	9302      	str	r3, [sp, #8]
 8004c30:	6963      	ldr	r3, [r4, #20]
 8004c32:	4343      	muls	r3, r0
 8004c34:	0fdd      	lsrs	r5, r3, #31
 8004c36:	18ed      	adds	r5, r5, r3
 8004c38:	9b01      	ldr	r3, [sp, #4]
 8004c3a:	9802      	ldr	r0, [sp, #8]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	181b      	adds	r3, r3, r0
 8004c40:	106d      	asrs	r5, r5, #1
 8004c42:	42ab      	cmp	r3, r5
 8004c44:	d900      	bls.n	8004c48 <__ssputs_r+0x40>
 8004c46:	001d      	movs	r5, r3
 8004c48:	0552      	lsls	r2, r2, #21
 8004c4a:	d529      	bpl.n	8004ca0 <__ssputs_r+0x98>
 8004c4c:	0029      	movs	r1, r5
 8004c4e:	0038      	movs	r0, r7
 8004c50:	f7ff ff48 	bl	8004ae4 <_malloc_r>
 8004c54:	1e06      	subs	r6, r0, #0
 8004c56:	d02d      	beq.n	8004cb4 <__ssputs_r+0xac>
 8004c58:	9a02      	ldr	r2, [sp, #8]
 8004c5a:	6921      	ldr	r1, [r4, #16]
 8004c5c:	f000 fae7 	bl	800522e <memcpy>
 8004c60:	89a2      	ldrh	r2, [r4, #12]
 8004c62:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <__ssputs_r+0xc0>)
 8004c64:	401a      	ands	r2, r3
 8004c66:	2380      	movs	r3, #128	; 0x80
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	9b02      	ldr	r3, [sp, #8]
 8004c6e:	6126      	str	r6, [r4, #16]
 8004c70:	18f6      	adds	r6, r6, r3
 8004c72:	6026      	str	r6, [r4, #0]
 8004c74:	6165      	str	r5, [r4, #20]
 8004c76:	9e01      	ldr	r6, [sp, #4]
 8004c78:	1aed      	subs	r5, r5, r3
 8004c7a:	60a5      	str	r5, [r4, #8]
 8004c7c:	9b01      	ldr	r3, [sp, #4]
 8004c7e:	429e      	cmp	r6, r3
 8004c80:	d900      	bls.n	8004c84 <__ssputs_r+0x7c>
 8004c82:	9e01      	ldr	r6, [sp, #4]
 8004c84:	0032      	movs	r2, r6
 8004c86:	9903      	ldr	r1, [sp, #12]
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	f000 fa9f 	bl	80051cc <memmove>
 8004c8e:	2000      	movs	r0, #0
 8004c90:	68a3      	ldr	r3, [r4, #8]
 8004c92:	1b9b      	subs	r3, r3, r6
 8004c94:	60a3      	str	r3, [r4, #8]
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	199b      	adds	r3, r3, r6
 8004c9a:	6023      	str	r3, [r4, #0]
 8004c9c:	b005      	add	sp, #20
 8004c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ca0:	002a      	movs	r2, r5
 8004ca2:	0038      	movs	r0, r7
 8004ca4:	f000 facc 	bl	8005240 <_realloc_r>
 8004ca8:	1e06      	subs	r6, r0, #0
 8004caa:	d1df      	bne.n	8004c6c <__ssputs_r+0x64>
 8004cac:	0038      	movs	r0, r7
 8004cae:	6921      	ldr	r1, [r4, #16]
 8004cb0:	f7ff feac 	bl	8004a0c <_free_r>
 8004cb4:	230c      	movs	r3, #12
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	603b      	str	r3, [r7, #0]
 8004cba:	89a2      	ldrh	r2, [r4, #12]
 8004cbc:	3334      	adds	r3, #52	; 0x34
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	81a3      	strh	r3, [r4, #12]
 8004cc2:	4240      	negs	r0, r0
 8004cc4:	e7ea      	b.n	8004c9c <__ssputs_r+0x94>
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	fffffb7f 	.word	0xfffffb7f

08004ccc <_svfiprintf_r>:
 8004ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cce:	b0a1      	sub	sp, #132	; 0x84
 8004cd0:	9003      	str	r0, [sp, #12]
 8004cd2:	001d      	movs	r5, r3
 8004cd4:	898b      	ldrh	r3, [r1, #12]
 8004cd6:	000f      	movs	r7, r1
 8004cd8:	0016      	movs	r6, r2
 8004cda:	061b      	lsls	r3, r3, #24
 8004cdc:	d511      	bpl.n	8004d02 <_svfiprintf_r+0x36>
 8004cde:	690b      	ldr	r3, [r1, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10e      	bne.n	8004d02 <_svfiprintf_r+0x36>
 8004ce4:	2140      	movs	r1, #64	; 0x40
 8004ce6:	f7ff fefd 	bl	8004ae4 <_malloc_r>
 8004cea:	6038      	str	r0, [r7, #0]
 8004cec:	6138      	str	r0, [r7, #16]
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d105      	bne.n	8004cfe <_svfiprintf_r+0x32>
 8004cf2:	230c      	movs	r3, #12
 8004cf4:	9a03      	ldr	r2, [sp, #12]
 8004cf6:	3801      	subs	r0, #1
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	b021      	add	sp, #132	; 0x84
 8004cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cfe:	2340      	movs	r3, #64	; 0x40
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	2300      	movs	r3, #0
 8004d04:	ac08      	add	r4, sp, #32
 8004d06:	6163      	str	r3, [r4, #20]
 8004d08:	3320      	adds	r3, #32
 8004d0a:	7663      	strb	r3, [r4, #25]
 8004d0c:	3310      	adds	r3, #16
 8004d0e:	76a3      	strb	r3, [r4, #26]
 8004d10:	9507      	str	r5, [sp, #28]
 8004d12:	0035      	movs	r5, r6
 8004d14:	782b      	ldrb	r3, [r5, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <_svfiprintf_r+0x52>
 8004d1a:	2b25      	cmp	r3, #37	; 0x25
 8004d1c:	d148      	bne.n	8004db0 <_svfiprintf_r+0xe4>
 8004d1e:	1bab      	subs	r3, r5, r6
 8004d20:	9305      	str	r3, [sp, #20]
 8004d22:	42b5      	cmp	r5, r6
 8004d24:	d00b      	beq.n	8004d3e <_svfiprintf_r+0x72>
 8004d26:	0032      	movs	r2, r6
 8004d28:	0039      	movs	r1, r7
 8004d2a:	9803      	ldr	r0, [sp, #12]
 8004d2c:	f7ff ff6c 	bl	8004c08 <__ssputs_r>
 8004d30:	3001      	adds	r0, #1
 8004d32:	d100      	bne.n	8004d36 <_svfiprintf_r+0x6a>
 8004d34:	e0af      	b.n	8004e96 <_svfiprintf_r+0x1ca>
 8004d36:	6963      	ldr	r3, [r4, #20]
 8004d38:	9a05      	ldr	r2, [sp, #20]
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	6163      	str	r3, [r4, #20]
 8004d3e:	782b      	ldrb	r3, [r5, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d100      	bne.n	8004d46 <_svfiprintf_r+0x7a>
 8004d44:	e0a7      	b.n	8004e96 <_svfiprintf_r+0x1ca>
 8004d46:	2201      	movs	r2, #1
 8004d48:	2300      	movs	r3, #0
 8004d4a:	4252      	negs	r2, r2
 8004d4c:	6062      	str	r2, [r4, #4]
 8004d4e:	a904      	add	r1, sp, #16
 8004d50:	3254      	adds	r2, #84	; 0x54
 8004d52:	1852      	adds	r2, r2, r1
 8004d54:	1c6e      	adds	r6, r5, #1
 8004d56:	6023      	str	r3, [r4, #0]
 8004d58:	60e3      	str	r3, [r4, #12]
 8004d5a:	60a3      	str	r3, [r4, #8]
 8004d5c:	7013      	strb	r3, [r2, #0]
 8004d5e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004d60:	4b55      	ldr	r3, [pc, #340]	; (8004eb8 <_svfiprintf_r+0x1ec>)
 8004d62:	2205      	movs	r2, #5
 8004d64:	0018      	movs	r0, r3
 8004d66:	7831      	ldrb	r1, [r6, #0]
 8004d68:	9305      	str	r3, [sp, #20]
 8004d6a:	f000 fa55 	bl	8005218 <memchr>
 8004d6e:	1c75      	adds	r5, r6, #1
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d11f      	bne.n	8004db4 <_svfiprintf_r+0xe8>
 8004d74:	6822      	ldr	r2, [r4, #0]
 8004d76:	06d3      	lsls	r3, r2, #27
 8004d78:	d504      	bpl.n	8004d84 <_svfiprintf_r+0xb8>
 8004d7a:	2353      	movs	r3, #83	; 0x53
 8004d7c:	a904      	add	r1, sp, #16
 8004d7e:	185b      	adds	r3, r3, r1
 8004d80:	2120      	movs	r1, #32
 8004d82:	7019      	strb	r1, [r3, #0]
 8004d84:	0713      	lsls	r3, r2, #28
 8004d86:	d504      	bpl.n	8004d92 <_svfiprintf_r+0xc6>
 8004d88:	2353      	movs	r3, #83	; 0x53
 8004d8a:	a904      	add	r1, sp, #16
 8004d8c:	185b      	adds	r3, r3, r1
 8004d8e:	212b      	movs	r1, #43	; 0x2b
 8004d90:	7019      	strb	r1, [r3, #0]
 8004d92:	7833      	ldrb	r3, [r6, #0]
 8004d94:	2b2a      	cmp	r3, #42	; 0x2a
 8004d96:	d016      	beq.n	8004dc6 <_svfiprintf_r+0xfa>
 8004d98:	0035      	movs	r5, r6
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	200a      	movs	r0, #10
 8004d9e:	68e3      	ldr	r3, [r4, #12]
 8004da0:	782a      	ldrb	r2, [r5, #0]
 8004da2:	1c6e      	adds	r6, r5, #1
 8004da4:	3a30      	subs	r2, #48	; 0x30
 8004da6:	2a09      	cmp	r2, #9
 8004da8:	d94e      	bls.n	8004e48 <_svfiprintf_r+0x17c>
 8004daa:	2900      	cmp	r1, #0
 8004dac:	d111      	bne.n	8004dd2 <_svfiprintf_r+0x106>
 8004dae:	e017      	b.n	8004de0 <_svfiprintf_r+0x114>
 8004db0:	3501      	adds	r5, #1
 8004db2:	e7af      	b.n	8004d14 <_svfiprintf_r+0x48>
 8004db4:	9b05      	ldr	r3, [sp, #20]
 8004db6:	6822      	ldr	r2, [r4, #0]
 8004db8:	1ac0      	subs	r0, r0, r3
 8004dba:	2301      	movs	r3, #1
 8004dbc:	4083      	lsls	r3, r0
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	002e      	movs	r6, r5
 8004dc2:	6023      	str	r3, [r4, #0]
 8004dc4:	e7cc      	b.n	8004d60 <_svfiprintf_r+0x94>
 8004dc6:	9b07      	ldr	r3, [sp, #28]
 8004dc8:	1d19      	adds	r1, r3, #4
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	9107      	str	r1, [sp, #28]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	db01      	blt.n	8004dd6 <_svfiprintf_r+0x10a>
 8004dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dd4:	e004      	b.n	8004de0 <_svfiprintf_r+0x114>
 8004dd6:	425b      	negs	r3, r3
 8004dd8:	60e3      	str	r3, [r4, #12]
 8004dda:	2302      	movs	r3, #2
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	6023      	str	r3, [r4, #0]
 8004de0:	782b      	ldrb	r3, [r5, #0]
 8004de2:	2b2e      	cmp	r3, #46	; 0x2e
 8004de4:	d10a      	bne.n	8004dfc <_svfiprintf_r+0x130>
 8004de6:	786b      	ldrb	r3, [r5, #1]
 8004de8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dea:	d135      	bne.n	8004e58 <_svfiprintf_r+0x18c>
 8004dec:	9b07      	ldr	r3, [sp, #28]
 8004dee:	3502      	adds	r5, #2
 8004df0:	1d1a      	adds	r2, r3, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	9207      	str	r2, [sp, #28]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	db2b      	blt.n	8004e52 <_svfiprintf_r+0x186>
 8004dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfc:	4e2f      	ldr	r6, [pc, #188]	; (8004ebc <_svfiprintf_r+0x1f0>)
 8004dfe:	2203      	movs	r2, #3
 8004e00:	0030      	movs	r0, r6
 8004e02:	7829      	ldrb	r1, [r5, #0]
 8004e04:	f000 fa08 	bl	8005218 <memchr>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d006      	beq.n	8004e1a <_svfiprintf_r+0x14e>
 8004e0c:	2340      	movs	r3, #64	; 0x40
 8004e0e:	1b80      	subs	r0, r0, r6
 8004e10:	4083      	lsls	r3, r0
 8004e12:	6822      	ldr	r2, [r4, #0]
 8004e14:	3501      	adds	r5, #1
 8004e16:	4313      	orrs	r3, r2
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	7829      	ldrb	r1, [r5, #0]
 8004e1c:	2206      	movs	r2, #6
 8004e1e:	4828      	ldr	r0, [pc, #160]	; (8004ec0 <_svfiprintf_r+0x1f4>)
 8004e20:	1c6e      	adds	r6, r5, #1
 8004e22:	7621      	strb	r1, [r4, #24]
 8004e24:	f000 f9f8 	bl	8005218 <memchr>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	d03c      	beq.n	8004ea6 <_svfiprintf_r+0x1da>
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <_svfiprintf_r+0x1f8>)
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d125      	bne.n	8004e7e <_svfiprintf_r+0x1b2>
 8004e32:	2207      	movs	r2, #7
 8004e34:	9b07      	ldr	r3, [sp, #28]
 8004e36:	3307      	adds	r3, #7
 8004e38:	4393      	bics	r3, r2
 8004e3a:	3308      	adds	r3, #8
 8004e3c:	9307      	str	r3, [sp, #28]
 8004e3e:	6963      	ldr	r3, [r4, #20]
 8004e40:	9a04      	ldr	r2, [sp, #16]
 8004e42:	189b      	adds	r3, r3, r2
 8004e44:	6163      	str	r3, [r4, #20]
 8004e46:	e764      	b.n	8004d12 <_svfiprintf_r+0x46>
 8004e48:	4343      	muls	r3, r0
 8004e4a:	0035      	movs	r5, r6
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	189b      	adds	r3, r3, r2
 8004e50:	e7a6      	b.n	8004da0 <_svfiprintf_r+0xd4>
 8004e52:	2301      	movs	r3, #1
 8004e54:	425b      	negs	r3, r3
 8004e56:	e7d0      	b.n	8004dfa <_svfiprintf_r+0x12e>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	200a      	movs	r0, #10
 8004e5c:	001a      	movs	r2, r3
 8004e5e:	3501      	adds	r5, #1
 8004e60:	6063      	str	r3, [r4, #4]
 8004e62:	7829      	ldrb	r1, [r5, #0]
 8004e64:	1c6e      	adds	r6, r5, #1
 8004e66:	3930      	subs	r1, #48	; 0x30
 8004e68:	2909      	cmp	r1, #9
 8004e6a:	d903      	bls.n	8004e74 <_svfiprintf_r+0x1a8>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0c5      	beq.n	8004dfc <_svfiprintf_r+0x130>
 8004e70:	9209      	str	r2, [sp, #36]	; 0x24
 8004e72:	e7c3      	b.n	8004dfc <_svfiprintf_r+0x130>
 8004e74:	4342      	muls	r2, r0
 8004e76:	0035      	movs	r5, r6
 8004e78:	2301      	movs	r3, #1
 8004e7a:	1852      	adds	r2, r2, r1
 8004e7c:	e7f1      	b.n	8004e62 <_svfiprintf_r+0x196>
 8004e7e:	aa07      	add	r2, sp, #28
 8004e80:	9200      	str	r2, [sp, #0]
 8004e82:	0021      	movs	r1, r4
 8004e84:	003a      	movs	r2, r7
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <_svfiprintf_r+0x1fc>)
 8004e88:	9803      	ldr	r0, [sp, #12]
 8004e8a:	e000      	b.n	8004e8e <_svfiprintf_r+0x1c2>
 8004e8c:	bf00      	nop
 8004e8e:	9004      	str	r0, [sp, #16]
 8004e90:	9b04      	ldr	r3, [sp, #16]
 8004e92:	3301      	adds	r3, #1
 8004e94:	d1d3      	bne.n	8004e3e <_svfiprintf_r+0x172>
 8004e96:	89bb      	ldrh	r3, [r7, #12]
 8004e98:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004e9a:	065b      	lsls	r3, r3, #25
 8004e9c:	d400      	bmi.n	8004ea0 <_svfiprintf_r+0x1d4>
 8004e9e:	e72c      	b.n	8004cfa <_svfiprintf_r+0x2e>
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	4240      	negs	r0, r0
 8004ea4:	e729      	b.n	8004cfa <_svfiprintf_r+0x2e>
 8004ea6:	aa07      	add	r2, sp, #28
 8004ea8:	9200      	str	r2, [sp, #0]
 8004eaa:	0021      	movs	r1, r4
 8004eac:	003a      	movs	r2, r7
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <_svfiprintf_r+0x1fc>)
 8004eb0:	9803      	ldr	r0, [sp, #12]
 8004eb2:	f000 f87b 	bl	8004fac <_printf_i>
 8004eb6:	e7ea      	b.n	8004e8e <_svfiprintf_r+0x1c2>
 8004eb8:	08005348 	.word	0x08005348
 8004ebc:	0800534e 	.word	0x0800534e
 8004ec0:	08005352 	.word	0x08005352
 8004ec4:	00000000 	.word	0x00000000
 8004ec8:	08004c09 	.word	0x08004c09

08004ecc <_printf_common>:
 8004ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ece:	0016      	movs	r6, r2
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	688a      	ldr	r2, [r1, #8]
 8004ed4:	690b      	ldr	r3, [r1, #16]
 8004ed6:	000c      	movs	r4, r1
 8004ed8:	9000      	str	r0, [sp, #0]
 8004eda:	4293      	cmp	r3, r2
 8004edc:	da00      	bge.n	8004ee0 <_printf_common+0x14>
 8004ede:	0013      	movs	r3, r2
 8004ee0:	0022      	movs	r2, r4
 8004ee2:	6033      	str	r3, [r6, #0]
 8004ee4:	3243      	adds	r2, #67	; 0x43
 8004ee6:	7812      	ldrb	r2, [r2, #0]
 8004ee8:	2a00      	cmp	r2, #0
 8004eea:	d001      	beq.n	8004ef0 <_printf_common+0x24>
 8004eec:	3301      	adds	r3, #1
 8004eee:	6033      	str	r3, [r6, #0]
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	069b      	lsls	r3, r3, #26
 8004ef4:	d502      	bpl.n	8004efc <_printf_common+0x30>
 8004ef6:	6833      	ldr	r3, [r6, #0]
 8004ef8:	3302      	adds	r3, #2
 8004efa:	6033      	str	r3, [r6, #0]
 8004efc:	6822      	ldr	r2, [r4, #0]
 8004efe:	2306      	movs	r3, #6
 8004f00:	0015      	movs	r5, r2
 8004f02:	401d      	ands	r5, r3
 8004f04:	421a      	tst	r2, r3
 8004f06:	d027      	beq.n	8004f58 <_printf_common+0x8c>
 8004f08:	0023      	movs	r3, r4
 8004f0a:	3343      	adds	r3, #67	; 0x43
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	1e5a      	subs	r2, r3, #1
 8004f10:	4193      	sbcs	r3, r2
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	0692      	lsls	r2, r2, #26
 8004f16:	d430      	bmi.n	8004f7a <_printf_common+0xae>
 8004f18:	0022      	movs	r2, r4
 8004f1a:	9901      	ldr	r1, [sp, #4]
 8004f1c:	9800      	ldr	r0, [sp, #0]
 8004f1e:	9d08      	ldr	r5, [sp, #32]
 8004f20:	3243      	adds	r2, #67	; 0x43
 8004f22:	47a8      	blx	r5
 8004f24:	3001      	adds	r0, #1
 8004f26:	d025      	beq.n	8004f74 <_printf_common+0xa8>
 8004f28:	2206      	movs	r2, #6
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	2500      	movs	r5, #0
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d105      	bne.n	8004f40 <_printf_common+0x74>
 8004f34:	6833      	ldr	r3, [r6, #0]
 8004f36:	68e5      	ldr	r5, [r4, #12]
 8004f38:	1aed      	subs	r5, r5, r3
 8004f3a:	43eb      	mvns	r3, r5
 8004f3c:	17db      	asrs	r3, r3, #31
 8004f3e:	401d      	ands	r5, r3
 8004f40:	68a3      	ldr	r3, [r4, #8]
 8004f42:	6922      	ldr	r2, [r4, #16]
 8004f44:	4293      	cmp	r3, r2
 8004f46:	dd01      	ble.n	8004f4c <_printf_common+0x80>
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	18ed      	adds	r5, r5, r3
 8004f4c:	2600      	movs	r6, #0
 8004f4e:	42b5      	cmp	r5, r6
 8004f50:	d120      	bne.n	8004f94 <_printf_common+0xc8>
 8004f52:	2000      	movs	r0, #0
 8004f54:	e010      	b.n	8004f78 <_printf_common+0xac>
 8004f56:	3501      	adds	r5, #1
 8004f58:	68e3      	ldr	r3, [r4, #12]
 8004f5a:	6832      	ldr	r2, [r6, #0]
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	42ab      	cmp	r3, r5
 8004f60:	ddd2      	ble.n	8004f08 <_printf_common+0x3c>
 8004f62:	0022      	movs	r2, r4
 8004f64:	2301      	movs	r3, #1
 8004f66:	9901      	ldr	r1, [sp, #4]
 8004f68:	9800      	ldr	r0, [sp, #0]
 8004f6a:	9f08      	ldr	r7, [sp, #32]
 8004f6c:	3219      	adds	r2, #25
 8004f6e:	47b8      	blx	r7
 8004f70:	3001      	adds	r0, #1
 8004f72:	d1f0      	bne.n	8004f56 <_printf_common+0x8a>
 8004f74:	2001      	movs	r0, #1
 8004f76:	4240      	negs	r0, r0
 8004f78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f7a:	2030      	movs	r0, #48	; 0x30
 8004f7c:	18e1      	adds	r1, r4, r3
 8004f7e:	3143      	adds	r1, #67	; 0x43
 8004f80:	7008      	strb	r0, [r1, #0]
 8004f82:	0021      	movs	r1, r4
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	3145      	adds	r1, #69	; 0x45
 8004f88:	7809      	ldrb	r1, [r1, #0]
 8004f8a:	18a2      	adds	r2, r4, r2
 8004f8c:	3243      	adds	r2, #67	; 0x43
 8004f8e:	3302      	adds	r3, #2
 8004f90:	7011      	strb	r1, [r2, #0]
 8004f92:	e7c1      	b.n	8004f18 <_printf_common+0x4c>
 8004f94:	0022      	movs	r2, r4
 8004f96:	2301      	movs	r3, #1
 8004f98:	9901      	ldr	r1, [sp, #4]
 8004f9a:	9800      	ldr	r0, [sp, #0]
 8004f9c:	9f08      	ldr	r7, [sp, #32]
 8004f9e:	321a      	adds	r2, #26
 8004fa0:	47b8      	blx	r7
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	d0e6      	beq.n	8004f74 <_printf_common+0xa8>
 8004fa6:	3601      	adds	r6, #1
 8004fa8:	e7d1      	b.n	8004f4e <_printf_common+0x82>
	...

08004fac <_printf_i>:
 8004fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fae:	b08b      	sub	sp, #44	; 0x2c
 8004fb0:	9206      	str	r2, [sp, #24]
 8004fb2:	000a      	movs	r2, r1
 8004fb4:	3243      	adds	r2, #67	; 0x43
 8004fb6:	9307      	str	r3, [sp, #28]
 8004fb8:	9005      	str	r0, [sp, #20]
 8004fba:	9204      	str	r2, [sp, #16]
 8004fbc:	7e0a      	ldrb	r2, [r1, #24]
 8004fbe:	000c      	movs	r4, r1
 8004fc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fc2:	2a78      	cmp	r2, #120	; 0x78
 8004fc4:	d809      	bhi.n	8004fda <_printf_i+0x2e>
 8004fc6:	2a62      	cmp	r2, #98	; 0x62
 8004fc8:	d80b      	bhi.n	8004fe2 <_printf_i+0x36>
 8004fca:	2a00      	cmp	r2, #0
 8004fcc:	d100      	bne.n	8004fd0 <_printf_i+0x24>
 8004fce:	e0be      	b.n	800514e <_printf_i+0x1a2>
 8004fd0:	497c      	ldr	r1, [pc, #496]	; (80051c4 <_printf_i+0x218>)
 8004fd2:	9103      	str	r1, [sp, #12]
 8004fd4:	2a58      	cmp	r2, #88	; 0x58
 8004fd6:	d100      	bne.n	8004fda <_printf_i+0x2e>
 8004fd8:	e093      	b.n	8005102 <_printf_i+0x156>
 8004fda:	0026      	movs	r6, r4
 8004fdc:	3642      	adds	r6, #66	; 0x42
 8004fde:	7032      	strb	r2, [r6, #0]
 8004fe0:	e022      	b.n	8005028 <_printf_i+0x7c>
 8004fe2:	0010      	movs	r0, r2
 8004fe4:	3863      	subs	r0, #99	; 0x63
 8004fe6:	2815      	cmp	r0, #21
 8004fe8:	d8f7      	bhi.n	8004fda <_printf_i+0x2e>
 8004fea:	f7fb f895 	bl	8000118 <__gnu_thumb1_case_shi>
 8004fee:	0016      	.short	0x0016
 8004ff0:	fff6001f 	.word	0xfff6001f
 8004ff4:	fff6fff6 	.word	0xfff6fff6
 8004ff8:	001ffff6 	.word	0x001ffff6
 8004ffc:	fff6fff6 	.word	0xfff6fff6
 8005000:	fff6fff6 	.word	0xfff6fff6
 8005004:	003600a3 	.word	0x003600a3
 8005008:	fff60083 	.word	0xfff60083
 800500c:	00b4fff6 	.word	0x00b4fff6
 8005010:	0036fff6 	.word	0x0036fff6
 8005014:	fff6fff6 	.word	0xfff6fff6
 8005018:	0087      	.short	0x0087
 800501a:	0026      	movs	r6, r4
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	3642      	adds	r6, #66	; 0x42
 8005020:	1d11      	adds	r1, r2, #4
 8005022:	6019      	str	r1, [r3, #0]
 8005024:	6813      	ldr	r3, [r2, #0]
 8005026:	7033      	strb	r3, [r6, #0]
 8005028:	2301      	movs	r3, #1
 800502a:	e0a2      	b.n	8005172 <_printf_i+0x1c6>
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	6809      	ldr	r1, [r1, #0]
 8005030:	1d02      	adds	r2, r0, #4
 8005032:	060d      	lsls	r5, r1, #24
 8005034:	d50b      	bpl.n	800504e <_printf_i+0xa2>
 8005036:	6805      	ldr	r5, [r0, #0]
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	2d00      	cmp	r5, #0
 800503c:	da03      	bge.n	8005046 <_printf_i+0x9a>
 800503e:	232d      	movs	r3, #45	; 0x2d
 8005040:	9a04      	ldr	r2, [sp, #16]
 8005042:	426d      	negs	r5, r5
 8005044:	7013      	strb	r3, [r2, #0]
 8005046:	4b5f      	ldr	r3, [pc, #380]	; (80051c4 <_printf_i+0x218>)
 8005048:	270a      	movs	r7, #10
 800504a:	9303      	str	r3, [sp, #12]
 800504c:	e01b      	b.n	8005086 <_printf_i+0xda>
 800504e:	6805      	ldr	r5, [r0, #0]
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	0649      	lsls	r1, r1, #25
 8005054:	d5f1      	bpl.n	800503a <_printf_i+0x8e>
 8005056:	b22d      	sxth	r5, r5
 8005058:	e7ef      	b.n	800503a <_printf_i+0x8e>
 800505a:	680d      	ldr	r5, [r1, #0]
 800505c:	6819      	ldr	r1, [r3, #0]
 800505e:	1d08      	adds	r0, r1, #4
 8005060:	6018      	str	r0, [r3, #0]
 8005062:	062e      	lsls	r6, r5, #24
 8005064:	d501      	bpl.n	800506a <_printf_i+0xbe>
 8005066:	680d      	ldr	r5, [r1, #0]
 8005068:	e003      	b.n	8005072 <_printf_i+0xc6>
 800506a:	066d      	lsls	r5, r5, #25
 800506c:	d5fb      	bpl.n	8005066 <_printf_i+0xba>
 800506e:	680d      	ldr	r5, [r1, #0]
 8005070:	b2ad      	uxth	r5, r5
 8005072:	4b54      	ldr	r3, [pc, #336]	; (80051c4 <_printf_i+0x218>)
 8005074:	2708      	movs	r7, #8
 8005076:	9303      	str	r3, [sp, #12]
 8005078:	2a6f      	cmp	r2, #111	; 0x6f
 800507a:	d000      	beq.n	800507e <_printf_i+0xd2>
 800507c:	3702      	adds	r7, #2
 800507e:	0023      	movs	r3, r4
 8005080:	2200      	movs	r2, #0
 8005082:	3343      	adds	r3, #67	; 0x43
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	6863      	ldr	r3, [r4, #4]
 8005088:	60a3      	str	r3, [r4, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	db03      	blt.n	8005096 <_printf_i+0xea>
 800508e:	2104      	movs	r1, #4
 8005090:	6822      	ldr	r2, [r4, #0]
 8005092:	438a      	bics	r2, r1
 8005094:	6022      	str	r2, [r4, #0]
 8005096:	2d00      	cmp	r5, #0
 8005098:	d102      	bne.n	80050a0 <_printf_i+0xf4>
 800509a:	9e04      	ldr	r6, [sp, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00c      	beq.n	80050ba <_printf_i+0x10e>
 80050a0:	9e04      	ldr	r6, [sp, #16]
 80050a2:	0028      	movs	r0, r5
 80050a4:	0039      	movs	r1, r7
 80050a6:	f7fb f8c7 	bl	8000238 <__aeabi_uidivmod>
 80050aa:	9b03      	ldr	r3, [sp, #12]
 80050ac:	3e01      	subs	r6, #1
 80050ae:	5c5b      	ldrb	r3, [r3, r1]
 80050b0:	7033      	strb	r3, [r6, #0]
 80050b2:	002b      	movs	r3, r5
 80050b4:	0005      	movs	r5, r0
 80050b6:	429f      	cmp	r7, r3
 80050b8:	d9f3      	bls.n	80050a2 <_printf_i+0xf6>
 80050ba:	2f08      	cmp	r7, #8
 80050bc:	d109      	bne.n	80050d2 <_printf_i+0x126>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	07db      	lsls	r3, r3, #31
 80050c2:	d506      	bpl.n	80050d2 <_printf_i+0x126>
 80050c4:	6862      	ldr	r2, [r4, #4]
 80050c6:	6923      	ldr	r3, [r4, #16]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	dc02      	bgt.n	80050d2 <_printf_i+0x126>
 80050cc:	2330      	movs	r3, #48	; 0x30
 80050ce:	3e01      	subs	r6, #1
 80050d0:	7033      	strb	r3, [r6, #0]
 80050d2:	9b04      	ldr	r3, [sp, #16]
 80050d4:	1b9b      	subs	r3, r3, r6
 80050d6:	6123      	str	r3, [r4, #16]
 80050d8:	9b07      	ldr	r3, [sp, #28]
 80050da:	0021      	movs	r1, r4
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	9805      	ldr	r0, [sp, #20]
 80050e0:	9b06      	ldr	r3, [sp, #24]
 80050e2:	aa09      	add	r2, sp, #36	; 0x24
 80050e4:	f7ff fef2 	bl	8004ecc <_printf_common>
 80050e8:	3001      	adds	r0, #1
 80050ea:	d147      	bne.n	800517c <_printf_i+0x1d0>
 80050ec:	2001      	movs	r0, #1
 80050ee:	4240      	negs	r0, r0
 80050f0:	b00b      	add	sp, #44	; 0x2c
 80050f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050f4:	2220      	movs	r2, #32
 80050f6:	6809      	ldr	r1, [r1, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	6022      	str	r2, [r4, #0]
 80050fc:	2278      	movs	r2, #120	; 0x78
 80050fe:	4932      	ldr	r1, [pc, #200]	; (80051c8 <_printf_i+0x21c>)
 8005100:	9103      	str	r1, [sp, #12]
 8005102:	0021      	movs	r1, r4
 8005104:	3145      	adds	r1, #69	; 0x45
 8005106:	700a      	strb	r2, [r1, #0]
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	c920      	ldmia	r1!, {r5}
 800510e:	0610      	lsls	r0, r2, #24
 8005110:	d402      	bmi.n	8005118 <_printf_i+0x16c>
 8005112:	0650      	lsls	r0, r2, #25
 8005114:	d500      	bpl.n	8005118 <_printf_i+0x16c>
 8005116:	b2ad      	uxth	r5, r5
 8005118:	6019      	str	r1, [r3, #0]
 800511a:	07d3      	lsls	r3, r2, #31
 800511c:	d502      	bpl.n	8005124 <_printf_i+0x178>
 800511e:	2320      	movs	r3, #32
 8005120:	4313      	orrs	r3, r2
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	2710      	movs	r7, #16
 8005126:	2d00      	cmp	r5, #0
 8005128:	d1a9      	bne.n	800507e <_printf_i+0xd2>
 800512a:	2220      	movs	r2, #32
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	4393      	bics	r3, r2
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	e7a4      	b.n	800507e <_printf_i+0xd2>
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	680d      	ldr	r5, [r1, #0]
 8005138:	1d10      	adds	r0, r2, #4
 800513a:	6949      	ldr	r1, [r1, #20]
 800513c:	6018      	str	r0, [r3, #0]
 800513e:	6813      	ldr	r3, [r2, #0]
 8005140:	062e      	lsls	r6, r5, #24
 8005142:	d501      	bpl.n	8005148 <_printf_i+0x19c>
 8005144:	6019      	str	r1, [r3, #0]
 8005146:	e002      	b.n	800514e <_printf_i+0x1a2>
 8005148:	066d      	lsls	r5, r5, #25
 800514a:	d5fb      	bpl.n	8005144 <_printf_i+0x198>
 800514c:	8019      	strh	r1, [r3, #0]
 800514e:	2300      	movs	r3, #0
 8005150:	9e04      	ldr	r6, [sp, #16]
 8005152:	6123      	str	r3, [r4, #16]
 8005154:	e7c0      	b.n	80050d8 <_printf_i+0x12c>
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	1d11      	adds	r1, r2, #4
 800515a:	6019      	str	r1, [r3, #0]
 800515c:	6816      	ldr	r6, [r2, #0]
 800515e:	2100      	movs	r1, #0
 8005160:	0030      	movs	r0, r6
 8005162:	6862      	ldr	r2, [r4, #4]
 8005164:	f000 f858 	bl	8005218 <memchr>
 8005168:	2800      	cmp	r0, #0
 800516a:	d001      	beq.n	8005170 <_printf_i+0x1c4>
 800516c:	1b80      	subs	r0, r0, r6
 800516e:	6060      	str	r0, [r4, #4]
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	6123      	str	r3, [r4, #16]
 8005174:	2300      	movs	r3, #0
 8005176:	9a04      	ldr	r2, [sp, #16]
 8005178:	7013      	strb	r3, [r2, #0]
 800517a:	e7ad      	b.n	80050d8 <_printf_i+0x12c>
 800517c:	0032      	movs	r2, r6
 800517e:	6923      	ldr	r3, [r4, #16]
 8005180:	9906      	ldr	r1, [sp, #24]
 8005182:	9805      	ldr	r0, [sp, #20]
 8005184:	9d07      	ldr	r5, [sp, #28]
 8005186:	47a8      	blx	r5
 8005188:	3001      	adds	r0, #1
 800518a:	d0af      	beq.n	80050ec <_printf_i+0x140>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	079b      	lsls	r3, r3, #30
 8005190:	d415      	bmi.n	80051be <_printf_i+0x212>
 8005192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005194:	68e0      	ldr	r0, [r4, #12]
 8005196:	4298      	cmp	r0, r3
 8005198:	daaa      	bge.n	80050f0 <_printf_i+0x144>
 800519a:	0018      	movs	r0, r3
 800519c:	e7a8      	b.n	80050f0 <_printf_i+0x144>
 800519e:	0022      	movs	r2, r4
 80051a0:	2301      	movs	r3, #1
 80051a2:	9906      	ldr	r1, [sp, #24]
 80051a4:	9805      	ldr	r0, [sp, #20]
 80051a6:	9e07      	ldr	r6, [sp, #28]
 80051a8:	3219      	adds	r2, #25
 80051aa:	47b0      	blx	r6
 80051ac:	3001      	adds	r0, #1
 80051ae:	d09d      	beq.n	80050ec <_printf_i+0x140>
 80051b0:	3501      	adds	r5, #1
 80051b2:	68e3      	ldr	r3, [r4, #12]
 80051b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	42ab      	cmp	r3, r5
 80051ba:	dcf0      	bgt.n	800519e <_printf_i+0x1f2>
 80051bc:	e7e9      	b.n	8005192 <_printf_i+0x1e6>
 80051be:	2500      	movs	r5, #0
 80051c0:	e7f7      	b.n	80051b2 <_printf_i+0x206>
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	08005359 	.word	0x08005359
 80051c8:	0800536a 	.word	0x0800536a

080051cc <memmove>:
 80051cc:	b510      	push	{r4, lr}
 80051ce:	4288      	cmp	r0, r1
 80051d0:	d902      	bls.n	80051d8 <memmove+0xc>
 80051d2:	188b      	adds	r3, r1, r2
 80051d4:	4298      	cmp	r0, r3
 80051d6:	d303      	bcc.n	80051e0 <memmove+0x14>
 80051d8:	2300      	movs	r3, #0
 80051da:	e007      	b.n	80051ec <memmove+0x20>
 80051dc:	5c8b      	ldrb	r3, [r1, r2]
 80051de:	5483      	strb	r3, [r0, r2]
 80051e0:	3a01      	subs	r2, #1
 80051e2:	d2fb      	bcs.n	80051dc <memmove+0x10>
 80051e4:	bd10      	pop	{r4, pc}
 80051e6:	5ccc      	ldrb	r4, [r1, r3]
 80051e8:	54c4      	strb	r4, [r0, r3]
 80051ea:	3301      	adds	r3, #1
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d1fa      	bne.n	80051e6 <memmove+0x1a>
 80051f0:	e7f8      	b.n	80051e4 <memmove+0x18>
	...

080051f4 <_sbrk_r>:
 80051f4:	2300      	movs	r3, #0
 80051f6:	b570      	push	{r4, r5, r6, lr}
 80051f8:	4d06      	ldr	r5, [pc, #24]	; (8005214 <_sbrk_r+0x20>)
 80051fa:	0004      	movs	r4, r0
 80051fc:	0008      	movs	r0, r1
 80051fe:	602b      	str	r3, [r5, #0]
 8005200:	f7fb ff84 	bl	800110c <_sbrk>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d103      	bne.n	8005210 <_sbrk_r+0x1c>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d000      	beq.n	8005210 <_sbrk_r+0x1c>
 800520e:	6023      	str	r3, [r4, #0]
 8005210:	bd70      	pop	{r4, r5, r6, pc}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	20000310 	.word	0x20000310

08005218 <memchr>:
 8005218:	b2c9      	uxtb	r1, r1
 800521a:	1882      	adds	r2, r0, r2
 800521c:	4290      	cmp	r0, r2
 800521e:	d101      	bne.n	8005224 <memchr+0xc>
 8005220:	2000      	movs	r0, #0
 8005222:	4770      	bx	lr
 8005224:	7803      	ldrb	r3, [r0, #0]
 8005226:	428b      	cmp	r3, r1
 8005228:	d0fb      	beq.n	8005222 <memchr+0xa>
 800522a:	3001      	adds	r0, #1
 800522c:	e7f6      	b.n	800521c <memchr+0x4>

0800522e <memcpy>:
 800522e:	2300      	movs	r3, #0
 8005230:	b510      	push	{r4, lr}
 8005232:	429a      	cmp	r2, r3
 8005234:	d100      	bne.n	8005238 <memcpy+0xa>
 8005236:	bd10      	pop	{r4, pc}
 8005238:	5ccc      	ldrb	r4, [r1, r3]
 800523a:	54c4      	strb	r4, [r0, r3]
 800523c:	3301      	adds	r3, #1
 800523e:	e7f8      	b.n	8005232 <memcpy+0x4>

08005240 <_realloc_r>:
 8005240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005242:	0007      	movs	r7, r0
 8005244:	000e      	movs	r6, r1
 8005246:	0014      	movs	r4, r2
 8005248:	2900      	cmp	r1, #0
 800524a:	d105      	bne.n	8005258 <_realloc_r+0x18>
 800524c:	0011      	movs	r1, r2
 800524e:	f7ff fc49 	bl	8004ae4 <_malloc_r>
 8005252:	0005      	movs	r5, r0
 8005254:	0028      	movs	r0, r5
 8005256:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005258:	2a00      	cmp	r2, #0
 800525a:	d103      	bne.n	8005264 <_realloc_r+0x24>
 800525c:	f7ff fbd6 	bl	8004a0c <_free_r>
 8005260:	0025      	movs	r5, r4
 8005262:	e7f7      	b.n	8005254 <_realloc_r+0x14>
 8005264:	f000 f81b 	bl	800529e <_malloc_usable_size_r>
 8005268:	9001      	str	r0, [sp, #4]
 800526a:	4284      	cmp	r4, r0
 800526c:	d803      	bhi.n	8005276 <_realloc_r+0x36>
 800526e:	0035      	movs	r5, r6
 8005270:	0843      	lsrs	r3, r0, #1
 8005272:	42a3      	cmp	r3, r4
 8005274:	d3ee      	bcc.n	8005254 <_realloc_r+0x14>
 8005276:	0021      	movs	r1, r4
 8005278:	0038      	movs	r0, r7
 800527a:	f7ff fc33 	bl	8004ae4 <_malloc_r>
 800527e:	1e05      	subs	r5, r0, #0
 8005280:	d0e8      	beq.n	8005254 <_realloc_r+0x14>
 8005282:	9b01      	ldr	r3, [sp, #4]
 8005284:	0022      	movs	r2, r4
 8005286:	429c      	cmp	r4, r3
 8005288:	d900      	bls.n	800528c <_realloc_r+0x4c>
 800528a:	001a      	movs	r2, r3
 800528c:	0031      	movs	r1, r6
 800528e:	0028      	movs	r0, r5
 8005290:	f7ff ffcd 	bl	800522e <memcpy>
 8005294:	0031      	movs	r1, r6
 8005296:	0038      	movs	r0, r7
 8005298:	f7ff fbb8 	bl	8004a0c <_free_r>
 800529c:	e7da      	b.n	8005254 <_realloc_r+0x14>

0800529e <_malloc_usable_size_r>:
 800529e:	1f0b      	subs	r3, r1, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	1f18      	subs	r0, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	da01      	bge.n	80052ac <_malloc_usable_size_r+0xe>
 80052a8:	580b      	ldr	r3, [r1, r0]
 80052aa:	18c0      	adds	r0, r0, r3
 80052ac:	4770      	bx	lr
	...

080052b0 <_init>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b6:	bc08      	pop	{r3}
 80052b8:	469e      	mov	lr, r3
 80052ba:	4770      	bx	lr

080052bc <_fini>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c2:	bc08      	pop	{r3}
 80052c4:	469e      	mov	lr, r3
 80052c6:	4770      	bx	lr
