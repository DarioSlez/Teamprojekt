
Team_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b0  080035b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035b8  080035b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  080035cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080035cc  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009111  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b30  00000000  00000000  00029188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  0002acb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000788  00000000  00000000  0002b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013e78  00000000  00000000  0002be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c986  00000000  00000000  0003fc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bffa  00000000  00000000  0004c60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022e8  00000000  00000000  000c8608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ca8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800357c 	.word	0x0800357c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800357c 	.word	0x0800357c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <RV3028C7_Backup>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void RV3028C7_Backup()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af04      	add	r7, sp, #16
	uint8_t BSM;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_EEPROM_Backup, 1, &BSM, 1, 1000); // lesen von register
 80004ae:	4812      	ldr	r0, [pc, #72]	; (80004f8 <RV3028C7_Backup+0x50>)
 80004b0:	23fa      	movs	r3, #250	; 0xfa
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	9302      	str	r3, [sp, #8]
 80004b6:	2301      	movs	r3, #1
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	1dfb      	adds	r3, r7, #7
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	2301      	movs	r3, #1
 80004c0:	2237      	movs	r2, #55	; 0x37
 80004c2:	21a4      	movs	r1, #164	; 0xa4
 80004c4:	f001 f8ac 	bl	8001620 <HAL_I2C_Mem_Read>
	BSM |= (1 << 2); // setzen von interrupt enable bit
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2204      	movs	r2, #4
 80004ce:	4313      	orrs	r3, r2
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_EEPROM_Backup, 1,  &BSM, 1, 1000);
 80004d6:	4808      	ldr	r0, [pc, #32]	; (80004f8 <RV3028C7_Backup+0x50>)
 80004d8:	23fa      	movs	r3, #250	; 0xfa
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	9302      	str	r3, [sp, #8]
 80004de:	2301      	movs	r3, #1
 80004e0:	9301      	str	r3, [sp, #4]
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2301      	movs	r3, #1
 80004e8:	2237      	movs	r2, #55	; 0x37
 80004ea:	21a4      	movs	r1, #164	; 0xa4
 80004ec:	f000 ff6a 	bl	80013c4 <HAL_I2C_Mem_Write>
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000028 	.word	0x20000028

080004fc <RV3028C7_Reset>:

void RV3028C7_Reset()
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af04      	add	r7, sp, #16
	uint8_t TE;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1, &TE, 1, 1000); // lesen von register
 8000502:	4833      	ldr	r0, [pc, #204]	; (80005d0 <RV3028C7_Reset+0xd4>)
 8000504:	23fa      	movs	r3, #250	; 0xfa
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	9302      	str	r3, [sp, #8]
 800050a:	2301      	movs	r3, #1
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	1dfb      	adds	r3, r7, #7
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	220f      	movs	r2, #15
 8000516:	21a4      	movs	r1, #164	; 0xa4
 8000518:	f001 f882 	bl	8001620 <HAL_I2C_Mem_Read>
	TE &= ~(1 << 2); // setzen von interrupt enable bit
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2204      	movs	r2, #4
 8000522:	4393      	bics	r3, r2
 8000524:	b2da      	uxtb	r2, r3
 8000526:	1dfb      	adds	r3, r7, #7
 8000528:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1,  &TE, 1, 1000);
 800052a:	4829      	ldr	r0, [pc, #164]	; (80005d0 <RV3028C7_Reset+0xd4>)
 800052c:	23fa      	movs	r3, #250	; 0xfa
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	9302      	str	r3, [sp, #8]
 8000532:	2301      	movs	r3, #1
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2301      	movs	r3, #1
 800053c:	220f      	movs	r2, #15
 800053e:	21a4      	movs	r1, #164	; 0xa4
 8000540:	f000 ff40 	bl	80013c4 <HAL_I2C_Mem_Write>

	uint8_t TIE;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_2, 1, &TIE, 1, 1000); // lesen von register
 8000544:	4822      	ldr	r0, [pc, #136]	; (80005d0 <RV3028C7_Reset+0xd4>)
 8000546:	23fa      	movs	r3, #250	; 0xfa
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	9302      	str	r3, [sp, #8]
 800054c:	2301      	movs	r3, #1
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	2301      	movs	r3, #1
 8000556:	2210      	movs	r2, #16
 8000558:	21a4      	movs	r1, #164	; 0xa4
 800055a:	f001 f861 	bl	8001620 <HAL_I2C_Mem_Read>
	TIE &= ~(1 << 4); // setzen von interrupt enable bit
 800055e:	1dbb      	adds	r3, r7, #6
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2210      	movs	r2, #16
 8000564:	4393      	bics	r3, r2
 8000566:	b2da      	uxtb	r2, r3
 8000568:	1dbb      	adds	r3, r7, #6
 800056a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_2, 1,  &TIE, 1, 1000);
 800056c:	4818      	ldr	r0, [pc, #96]	; (80005d0 <RV3028C7_Reset+0xd4>)
 800056e:	23fa      	movs	r3, #250	; 0xfa
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	9302      	str	r3, [sp, #8]
 8000574:	2301      	movs	r3, #1
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	1dbb      	adds	r3, r7, #6
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2301      	movs	r3, #1
 800057e:	2210      	movs	r2, #16
 8000580:	21a4      	movs	r1, #164	; 0xa4
 8000582:	f000 ff1f 	bl	80013c4 <HAL_I2C_Mem_Write>

	uint8_t TF;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Status, 1, &TF, 1, 1000); // lesen von register
 8000586:	4812      	ldr	r0, [pc, #72]	; (80005d0 <RV3028C7_Reset+0xd4>)
 8000588:	23fa      	movs	r3, #250	; 0xfa
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	9302      	str	r3, [sp, #8]
 800058e:	2301      	movs	r3, #1
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	1d7b      	adds	r3, r7, #5
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2301      	movs	r3, #1
 8000598:	220e      	movs	r2, #14
 800059a:	21a4      	movs	r1, #164	; 0xa4
 800059c:	f001 f840 	bl	8001620 <HAL_I2C_Mem_Read>
	TF &= ~(1 << 3); // setzen von interrupt enable bit
 80005a0:	1d7b      	adds	r3, r7, #5
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2208      	movs	r2, #8
 80005a6:	4393      	bics	r3, r2
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	1d7b      	adds	r3, r7, #5
 80005ac:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Status, 1,  &TF, 1, 1000);
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <RV3028C7_Reset+0xd4>)
 80005b0:	23fa      	movs	r3, #250	; 0xfa
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	9302      	str	r3, [sp, #8]
 80005b6:	2301      	movs	r3, #1
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	1d7b      	adds	r3, r7, #5
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2301      	movs	r3, #1
 80005c0:	220e      	movs	r2, #14
 80005c2:	21a4      	movs	r1, #164	; 0xa4
 80005c4:	f000 fefe 	bl	80013c4 <HAL_I2C_Mem_Write>
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000028 	.word	0x20000028

080005d4 <RV3028C7_Init>:

void RV3028C7_Init(uint8_t timer_val)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b089      	sub	sp, #36	; 0x24
 80005d8:	af04      	add	r7, sp, #16
 80005da:	0002      	movs	r2, r0
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	701a      	strb	r2, [r3, #0]
	uint8_t TRPT;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1, &TRPT, 1, 1000); // lesen von register
 80005e0:	484e      	ldr	r0, [pc, #312]	; (800071c <RV3028C7_Init+0x148>)
 80005e2:	23fa      	movs	r3, #250	; 0xfa
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	9302      	str	r3, [sp, #8]
 80005e8:	2301      	movs	r3, #1
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	240f      	movs	r4, #15
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2301      	movs	r3, #1
 80005f4:	220f      	movs	r2, #15
 80005f6:	21a4      	movs	r1, #164	; 0xa4
 80005f8:	f001 f812 	bl	8001620 <HAL_I2C_Mem_Read>
	TRPT |= (1 << 7); // setzen von interrupt enable bit
 80005fc:	0021      	movs	r1, r4
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	4252      	negs	r2, r2
 8000606:	4313      	orrs	r3, r2
 8000608:	b2da      	uxtb	r2, r3
 800060a:	187b      	adds	r3, r7, r1
 800060c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1,  &TRPT, 1, 1000);
 800060e:	4843      	ldr	r0, [pc, #268]	; (800071c <RV3028C7_Init+0x148>)
 8000610:	23fa      	movs	r3, #250	; 0xfa
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	9302      	str	r3, [sp, #8]
 8000616:	2301      	movs	r3, #1
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	187b      	adds	r3, r7, r1
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2301      	movs	r3, #1
 8000620:	220f      	movs	r2, #15
 8000622:	21a4      	movs	r1, #164	; 0xa4
 8000624:	f000 fece 	bl	80013c4 <HAL_I2C_Mem_Write>

	uint8_t TD;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1, &TD, 1, 1000); // lesen von register
 8000628:	483c      	ldr	r0, [pc, #240]	; (800071c <RV3028C7_Init+0x148>)
 800062a:	23fa      	movs	r3, #250	; 0xfa
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	2301      	movs	r3, #1
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	240e      	movs	r4, #14
 8000636:	193b      	adds	r3, r7, r4
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	220f      	movs	r2, #15
 800063e:	21a4      	movs	r1, #164	; 0xa4
 8000640:	f000 ffee 	bl	8001620 <HAL_I2C_Mem_Read>
	TD |= 0x02; // setzen von interrupt enable bit
 8000644:	0021      	movs	r1, r4
 8000646:	187b      	adds	r3, r7, r1
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2202      	movs	r2, #2
 800064c:	4313      	orrs	r3, r2
 800064e:	b2da      	uxtb	r2, r3
 8000650:	187b      	adds	r3, r7, r1
 8000652:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1,  &TD, 1, 1000);
 8000654:	4831      	ldr	r0, [pc, #196]	; (800071c <RV3028C7_Init+0x148>)
 8000656:	23fa      	movs	r3, #250	; 0xfa
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	2301      	movs	r3, #1
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	187b      	adds	r3, r7, r1
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2301      	movs	r3, #1
 8000666:	220f      	movs	r2, #15
 8000668:	21a4      	movs	r1, #164	; 0xa4
 800066a:	f000 feab 	bl	80013c4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Timer_Val_0, 1,  &timer_val, 1, 1000);
 800066e:	482b      	ldr	r0, [pc, #172]	; (800071c <RV3028C7_Init+0x148>)
 8000670:	23fa      	movs	r3, #250	; 0xfa
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	9302      	str	r3, [sp, #8]
 8000676:	2301      	movs	r3, #1
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	220a      	movs	r2, #10
 8000682:	21a4      	movs	r1, #164	; 0xa4
 8000684:	f000 fe9e 	bl	80013c4 <HAL_I2C_Mem_Write>

	uint8_t TIE;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_2, 1, &TIE, 1, 1000); // lesen von register
 8000688:	4824      	ldr	r0, [pc, #144]	; (800071c <RV3028C7_Init+0x148>)
 800068a:	23fa      	movs	r3, #250	; 0xfa
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	9302      	str	r3, [sp, #8]
 8000690:	2301      	movs	r3, #1
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	240d      	movs	r4, #13
 8000696:	193b      	adds	r3, r7, r4
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2210      	movs	r2, #16
 800069e:	21a4      	movs	r1, #164	; 0xa4
 80006a0:	f000 ffbe 	bl	8001620 <HAL_I2C_Mem_Read>
	TIE |= (1 << 4); // setzen von interrupt enable bit
 80006a4:	0021      	movs	r1, r4
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2210      	movs	r2, #16
 80006ac:	4313      	orrs	r3, r2
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_2, 1,  &TIE, 1, 1000);
 80006b4:	4819      	ldr	r0, [pc, #100]	; (800071c <RV3028C7_Init+0x148>)
 80006b6:	23fa      	movs	r3, #250	; 0xfa
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	9302      	str	r3, [sp, #8]
 80006bc:	2301      	movs	r3, #1
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	2210      	movs	r2, #16
 80006c8:	21a4      	movs	r1, #164	; 0xa4
 80006ca:	f000 fe7b 	bl	80013c4 <HAL_I2C_Mem_Write>

	uint8_t TE;
	HAL_I2C_Mem_Read(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1, &TE, 1, 1000); // lesen von register
 80006ce:	4813      	ldr	r0, [pc, #76]	; (800071c <RV3028C7_Init+0x148>)
 80006d0:	23fa      	movs	r3, #250	; 0xfa
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	2301      	movs	r3, #1
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	240c      	movs	r4, #12
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2301      	movs	r3, #1
 80006e2:	220f      	movs	r2, #15
 80006e4:	21a4      	movs	r1, #164	; 0xa4
 80006e6:	f000 ff9b 	bl	8001620 <HAL_I2C_Mem_Read>
	TE |= (1 << 2); // setzen von interrupt enable bit
 80006ea:	0021      	movs	r1, r4
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2204      	movs	r2, #4
 80006f2:	4313      	orrs	r3, r2
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RV3028C7_Address << 1, RV_Control_1, 1,  &TE, 1, 1000);
 80006fa:	4808      	ldr	r0, [pc, #32]	; (800071c <RV3028C7_Init+0x148>)
 80006fc:	23fa      	movs	r3, #250	; 0xfa
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	9302      	str	r3, [sp, #8]
 8000702:	2301      	movs	r3, #1
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	187b      	adds	r3, r7, r1
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2301      	movs	r3, #1
 800070c:	220f      	movs	r2, #15
 800070e:	21a4      	movs	r1, #164	; 0xa4
 8000710:	f000 fe58 	bl	80013c4 <HAL_I2C_Mem_Write>
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b005      	add	sp, #20
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	20000028 	.word	0x20000028

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f000 fa8d 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f85b 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072e:	f000 f945 	bl	80009bc <MX_GPIO_Init>
  MX_RTC_Init();
 8000732:	f000 f90f 	bl	8000954 <MX_RTC_Init>
  MX_I2C1_Init();
 8000736:	f000 f8cd 	bl	80008d4 <MX_I2C1_Init>
    //Clock_Devider();


    /*******************************************************************RTC***************************************************************************************/

    if(HAL_I2C_IsDeviceReady(&hi2c1, PCF8523_Address << 1, 2, 100) == HAL_OK)
 800073a:	4829      	ldr	r0, [pc, #164]	; (80007e0 <main+0xc0>)
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	2202      	movs	r2, #2
 8000740:	21d0      	movs	r1, #208	; 0xd0
 8000742:	f001 f8a1 	bl	8001888 <HAL_I2C_IsDeviceReady>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d117      	bne.n	800077a <main+0x5a>
    {
  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800074a:	23a0      	movs	r3, #160	; 0xa0
 800074c:	05db      	lsls	r3, r3, #23
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	0018      	movs	r0, r3
 8000754:	f000 fd83 	bl	800125e <HAL_GPIO_WritePin>
  	  HAL_Delay(1000);
 8000758:	23fa      	movs	r3, #250	; 0xfa
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	0018      	movs	r0, r3
 800075e:	f000 fae1 	bl	8000d24 <HAL_Delay>
  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000762:	23a0      	movs	r3, #160	; 0xa0
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fd77 	bl	800125e <HAL_GPIO_WritePin>
  	  HAL_Delay(1000);
 8000770:	23fa      	movs	r3, #250	; 0xfa
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	0018      	movs	r0, r3
 8000776:	f000 fad5 	bl	8000d24 <HAL_Delay>

    //Enable_interrupt();
    //TimerA_Init(0x04);
    //Bat_Mode();

    uint8_t periode = 10;
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	220a      	movs	r2, #10
 800077e:	701a      	strb	r2, [r3, #0]
    RV3028C7_Reset();
 8000780:	f7ff febc 	bl	80004fc <RV3028C7_Reset>
    RV3028C7_Init(periode);
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	0018      	movs	r0, r3
 800078a:	f7ff ff23 	bl	80005d4 <RV3028C7_Init>
    RV3028C7_Backup();
 800078e:	f7ff fe8b 	bl	80004a8 <RV3028C7_Backup>
		  HAL_Delay(1000);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		  HAL_Delay(1000);
	  }*/

	  interrupt = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000792:	1dbc      	adds	r4, r7, #6
 8000794:	23a0      	movs	r3, #160	; 0xa0
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	2110      	movs	r1, #16
 800079a:	0018      	movs	r0, r3
 800079c:	f000 fd42 	bl	8001224 <HAL_GPIO_ReadPin>
 80007a0:	0003      	movs	r3, r0
 80007a2:	7023      	strb	r3, [r4, #0]

	 	  if (interrupt == 0)
 80007a4:	1dbb      	adds	r3, r7, #6
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1f2      	bne.n	8000792 <main+0x72>
	 		  //HAL_I2C_Mem_Write(&hi2c1, PCF8523_Address << 1, Control_2, 1, &flag, 1, 1000); //clear flag

	 		   */


	 		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007ac:	23a0      	movs	r3, #160	; 0xa0
 80007ae:	05db      	lsls	r3, r3, #23
 80007b0:	2201      	movs	r2, #1
 80007b2:	2120      	movs	r1, #32
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 fd52 	bl	800125e <HAL_GPIO_WritePin>
	 		  HAL_Delay(1000);
 80007ba:	23fa      	movs	r3, #250	; 0xfa
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fab0 	bl	8000d24 <HAL_Delay>
	 		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007c4:	23a0      	movs	r3, #160	; 0xa0
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	2200      	movs	r2, #0
 80007ca:	2120      	movs	r1, #32
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 fd46 	bl	800125e <HAL_GPIO_WritePin>
	 		  HAL_Delay(1000);
 80007d2:	23fa      	movs	r3, #250	; 0xfa
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 faa4 	bl	8000d24 <HAL_Delay>
	  interrupt = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80007dc:	e7d9      	b.n	8000792 <main+0x72>
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	20000028 	.word	0x20000028

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b09f      	sub	sp, #124	; 0x7c
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	2440      	movs	r4, #64	; 0x40
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	0018      	movs	r0, r3
 80007f0:	2338      	movs	r3, #56	; 0x38
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f002 fe95 	bl	8003524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fa:	232c      	movs	r3, #44	; 0x2c
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	0018      	movs	r0, r3
 8000800:	2314      	movs	r3, #20
 8000802:	001a      	movs	r2, r3
 8000804:	2100      	movs	r1, #0
 8000806:	f002 fe8d 	bl	8003524 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	0018      	movs	r0, r3
 800080e:	2328      	movs	r3, #40	; 0x28
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f002 fe86 	bl	8003524 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <SystemClock_Config+0xe8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a2c      	ldr	r2, [pc, #176]	; (80008d0 <SystemClock_Config+0xec>)
 800081e:	401a      	ands	r2, r3
 8000820:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <SystemClock_Config+0xe8>)
 8000822:	2180      	movs	r1, #128	; 0x80
 8000824:	0109      	lsls	r1, r1, #4
 8000826:	430a      	orrs	r2, r1
 8000828:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800082a:	0021      	movs	r1, r4
 800082c:	187b      	adds	r3, r7, r1
 800082e:	220a      	movs	r2, #10
 8000830:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2201      	movs	r2, #1
 8000836:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2210      	movs	r2, #16
 800083c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2201      	movs	r2, #1
 8000842:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2202      	movs	r2, #2
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	0412      	lsls	r2, r2, #16
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	187b      	adds	r3, r7, r1
 8000860:	0018      	movs	r0, r3
 8000862:	f001 fcbd 	bl	80021e0 <HAL_RCC_OscConfig>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800086a:	f000 f919 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	212c      	movs	r1, #44	; 0x2c
 8000870:	187b      	adds	r3, r7, r1
 8000872:	220f      	movs	r2, #15
 8000874:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2203      	movs	r2, #3
 800087a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2100      	movs	r1, #0
 8000892:	0018      	movs	r0, r3
 8000894:	f002 f878 	bl	8002988 <HAL_RCC_ClockConfig>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800089c:	f000 f900 	bl	8000aa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2228      	movs	r2, #40	; 0x28
 80008a4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	0292      	lsls	r2, r2, #10
 80008b2:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	0018      	movs	r0, r3
 80008b8:	f002 fa54 	bl	8002d64 <HAL_RCCEx_PeriphCLKConfig>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80008c0:	f000 f8ee 	bl	8000aa0 <Error_Handler>
  }
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b01f      	add	sp, #124	; 0x7c
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	40007000 	.word	0x40007000
 80008d0:	ffffe7ff 	.word	0xffffe7ff

080008d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_I2C1_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <MX_I2C1_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_I2C1_Init+0x74>)
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <MX_I2C1_Init+0x7c>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_I2C1_Init+0x74>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_I2C1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_I2C1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_I2C1_Init+0x74>)
 8000910:	0018      	movs	r0, r3
 8000912:	f000 fcc1 	bl	8001298 <HAL_I2C_Init>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800091a:	f000 f8c1 	bl	8000aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_I2C1_Init+0x74>)
 8000920:	2100      	movs	r1, #0
 8000922:	0018      	movs	r0, r3
 8000924:	f001 fbc4 	bl	80020b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800092c:	f000 f8b8 	bl	8000aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <MX_I2C1_Init+0x74>)
 8000932:	2100      	movs	r1, #0
 8000934:	0018      	movs	r0, r3
 8000936:	f001 fc07 	bl	8002148 <HAL_I2CEx_ConfigDigitalFilter>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 f8af 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000028 	.word	0x20000028
 800094c:	40005400 	.word	0x40005400
 8000950:	00303d5b 	.word	0x00303d5b

08000954 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_RTC_Init+0x60>)
 800095a:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <MX_RTC_Init+0x64>)
 800095c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_RTC_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_RTC_Init+0x60>)
 8000966:	227f      	movs	r2, #127	; 0x7f
 8000968:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_RTC_Init+0x60>)
 800096c:	22ff      	movs	r2, #255	; 0xff
 800096e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_RTC_Init+0x60>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_RTC_Init+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_RTC_Init+0x60>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_RTC_Init+0x60>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_RTC_Init+0x60>)
 800098a:	0018      	movs	r0, r3
 800098c:	f002 fb88 	bl	80030a0 <HAL_RTC_Init>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000994:	f000 f884 	bl	8000aa0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_RTC_Init+0x60>)
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	0018      	movs	r0, r3
 80009a0:	f002 fcb0 	bl	8003304 <HAL_RTCEx_SetWakeUpTimer_IT>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80009a8:	f000 f87a 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	2000007c 	.word	0x2000007c
 80009b8:	40002800 	.word	0x40002800

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	240c      	movs	r4, #12
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	0018      	movs	r0, r3
 80009c8:	2314      	movs	r3, #20
 80009ca:	001a      	movs	r2, r3
 80009cc:	2100      	movs	r1, #0
 80009ce:	f002 fda9 	bl	8003524 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <MX_GPIO_Init+0xdc>)
 80009d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009d6:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <MX_GPIO_Init+0xdc>)
 80009d8:	2104      	movs	r1, #4
 80009da:	430a      	orrs	r2, r1
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80009de:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <MX_GPIO_Init+0xdc>)
 80009e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e2:	2204      	movs	r2, #4
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <MX_GPIO_Init+0xdc>)
 80009ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ee:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <MX_GPIO_Init+0xdc>)
 80009f0:	2180      	movs	r1, #128	; 0x80
 80009f2:	430a      	orrs	r2, r1
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80009f6:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <MX_GPIO_Init+0xdc>)
 80009f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	4013      	ands	r3, r2
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <MX_GPIO_Init+0xdc>)
 8000a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a06:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <MX_GPIO_Init+0xdc>)
 8000a08:	2101      	movs	r1, #1
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a0e:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_GPIO_Init+0xdc>)
 8000a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a12:	2201      	movs	r2, #1
 8000a14:	4013      	ands	r3, r2
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a1a:	23a0      	movs	r3, #160	; 0xa0
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 fc1b 	bl	800125e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	0192      	lsls	r2, r2, #6
 8000a2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <MX_GPIO_Init+0xe0>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	0010      	movs	r0, r2
 8000a44:	f000 fa70 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2210      	movs	r2, #16
 8000a4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2201      	movs	r2, #1
 8000a58:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	193a      	adds	r2, r7, r4
 8000a5c:	23a0      	movs	r3, #160	; 0xa0
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	0011      	movs	r1, r2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 fa60 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a68:	0021      	movs	r1, r4
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2220      	movs	r2, #32
 8000a6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2201      	movs	r2, #1
 8000a74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	187a      	adds	r2, r7, r1
 8000a84:	23a0      	movs	r3, #160	; 0xa0
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	0011      	movs	r1, r2
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fa4c 	bl	8000f28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b009      	add	sp, #36	; 0x24
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	50000800 	.word	0x50000800

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <HAL_MspInit+0x24>)
 8000ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_MspInit+0x24>)
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <HAL_MspInit+0x24>)
 8000abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_MspInit+0x24>)
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	0549      	lsls	r1, r1, #21
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	240c      	movs	r4, #12
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	2314      	movs	r3, #20
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f002 fd1c 	bl	8003524 <memset>
  if(hi2c->Instance==I2C1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <HAL_I2C_MspInit+0x80>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d12a      	bne.n	8000b4c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_I2C_MspInit+0x84>)
 8000af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <HAL_I2C_MspInit+0x84>)
 8000afc:	2101      	movs	r1, #1
 8000afe:	430a      	orrs	r2, r1
 8000b00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_I2C_MspInit+0x84>)
 8000b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b06:	2201      	movs	r2, #1
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	22c0      	movs	r2, #192	; 0xc0
 8000b12:	00d2      	lsls	r2, r2, #3
 8000b14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b16:	0021      	movs	r1, r4
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2212      	movs	r2, #18
 8000b1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2203      	movs	r2, #3
 8000b28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2206      	movs	r2, #6
 8000b2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	187a      	adds	r2, r7, r1
 8000b32:	23a0      	movs	r3, #160	; 0xa0
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 f9f5 	bl	8000f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_I2C_MspInit+0x84>)
 8000b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_I2C_MspInit+0x84>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	0389      	lsls	r1, r1, #14
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b009      	add	sp, #36	; 0x24
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	40005400 	.word	0x40005400
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_RTC_MspInit+0x38>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d10e      	bne.n	8000b8c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_RTC_MspInit+0x3c>)
 8000b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_RTC_MspInit+0x3c>)
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	02c9      	lsls	r1, r1, #11
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2002      	movs	r0, #2
 8000b82:	f000 f99f 	bl	8000ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000b86:	2002      	movs	r0, #2
 8000b88:	f000 f9b1 	bl	8000eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40002800 	.word	0x40002800
 8000b98:	40021000 	.word	0x40021000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f894 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <RTC_IRQHandler+0x14>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f002 fc6e 	bl	80034b4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	2000007c 	.word	0x2000007c

08000be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bf2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf4:	f7ff fff6 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	; (8000c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <LoopForever+0xe>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	; (8000c3c <LoopForever+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f002 fc89 	bl	8003534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c22:	f7ff fd7d 	bl	8000720 <main>

08000c26 <LoopForever>:

LoopForever:
    b LoopForever
 8000c26:	e7fe      	b.n	8000c26 <LoopForever>
   ldr   r0, =_estack
 8000c28:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c34:	080035c0 	.word	0x080035c0
  ldr r2, =_sbss
 8000c38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c3c:	200000a4 	.word	0x200000a4

08000c40 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_COMP_IRQHandler>
	...

08000c44 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_Init+0x3c>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_Init+0x3c>)
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 f811 	bl	8000c84 <HAL_InitTick>
 8000c62:	1e03      	subs	r3, r0, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e001      	b.n	8000c72 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c6e:	f7ff ff1d 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
}
 8000c76:	0018      	movs	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	40022000 	.word	0x40022000

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_InitTick+0x5c>)
 8000c8e:	681c      	ldr	r4, [r3, #0]
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_InitTick+0x60>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	0019      	movs	r1, r3
 8000c96:	23fa      	movs	r3, #250	; 0xfa
 8000c98:	0098      	lsls	r0, r3, #2
 8000c9a:	f7ff fa35 	bl	8000108 <__udivsi3>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0020      	movs	r0, r4
 8000ca4:	f7ff fa30 	bl	8000108 <__udivsi3>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 f92f 	bl	8000f0e <HAL_SYSTICK_Config>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e00f      	b.n	8000cd8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	d80b      	bhi.n	8000cd6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 f8fc 	bl	8000ec4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_InitTick+0x64>)
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b003      	add	sp, #12
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_IncTick+0x1c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	18d2      	adds	r2, r2, r3
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_IncTick+0x20>)
 8000cfe:	601a      	str	r2, [r3, #0]
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200000a0 	.word	0x200000a0

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b02      	ldr	r3, [pc, #8]	; (8000d20 <HAL_GetTick+0x10>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	200000a0 	.word	0x200000a0

08000d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d2c:	f7ff fff0 	bl	8000d10 <HAL_GetTick>
 8000d30:	0003      	movs	r3, r0
 8000d32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	d005      	beq.n	8000d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_Delay+0x44>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	001a      	movs	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	189b      	adds	r3, r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	f7ff ffe0 	bl	8000d10 <HAL_GetTick>
 8000d50:	0002      	movs	r2, r0
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d8f7      	bhi.n	8000d4c <HAL_Delay+0x28>
  {
  }
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b004      	add	sp, #16
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	20000008 	.word	0x20000008

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d7e:	d809      	bhi.n	8000d94 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	001a      	movs	r2, r3
 8000d86:	231f      	movs	r3, #31
 8000d88:	401a      	ands	r2, r3
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_EnableIRQ+0x30>)
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4091      	lsls	r1, r2
 8000d90:	000a      	movs	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]
  }
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b002      	add	sp, #8
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	0002      	movs	r2, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b7f      	cmp	r3, #127	; 0x7f
 8000db4:	d828      	bhi.n	8000e08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db6:	4a2f      	ldr	r2, [pc, #188]	; (8000e74 <__NVIC_SetPriority+0xd4>)
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	33c0      	adds	r3, #192	; 0xc0
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	589b      	ldr	r3, [r3, r2]
 8000dc6:	1dfa      	adds	r2, r7, #7
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	0011      	movs	r1, r2
 8000dcc:	2203      	movs	r2, #3
 8000dce:	400a      	ands	r2, r1
 8000dd0:	00d2      	lsls	r2, r2, #3
 8000dd2:	21ff      	movs	r1, #255	; 0xff
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	43d2      	mvns	r2, r2
 8000dda:	401a      	ands	r2, r3
 8000ddc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	019b      	lsls	r3, r3, #6
 8000de2:	22ff      	movs	r2, #255	; 0xff
 8000de4:	401a      	ands	r2, r3
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	0018      	movs	r0, r3
 8000dec:	2303      	movs	r3, #3
 8000dee:	4003      	ands	r3, r0
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df4:	481f      	ldr	r0, [pc, #124]	; (8000e74 <__NVIC_SetPriority+0xd4>)
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	33c0      	adds	r3, #192	; 0xc0
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e06:	e031      	b.n	8000e6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <__NVIC_SetPriority+0xd8>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	0019      	movs	r1, r3
 8000e10:	230f      	movs	r3, #15
 8000e12:	400b      	ands	r3, r1
 8000e14:	3b08      	subs	r3, #8
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3306      	adds	r3, #6
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	18d3      	adds	r3, r2, r3
 8000e1e:	3304      	adds	r3, #4
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	1dfa      	adds	r2, r7, #7
 8000e24:	7812      	ldrb	r2, [r2, #0]
 8000e26:	0011      	movs	r1, r2
 8000e28:	2203      	movs	r2, #3
 8000e2a:	400a      	ands	r2, r1
 8000e2c:	00d2      	lsls	r2, r2, #3
 8000e2e:	21ff      	movs	r1, #255	; 0xff
 8000e30:	4091      	lsls	r1, r2
 8000e32:	000a      	movs	r2, r1
 8000e34:	43d2      	mvns	r2, r2
 8000e36:	401a      	ands	r2, r3
 8000e38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	019b      	lsls	r3, r3, #6
 8000e3e:	22ff      	movs	r2, #255	; 0xff
 8000e40:	401a      	ands	r2, r3
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	0018      	movs	r0, r3
 8000e48:	2303      	movs	r3, #3
 8000e4a:	4003      	ands	r3, r0
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e50:	4809      	ldr	r0, [pc, #36]	; (8000e78 <__NVIC_SetPriority+0xd8>)
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	001c      	movs	r4, r3
 8000e58:	230f      	movs	r3, #15
 8000e5a:	4023      	ands	r3, r4
 8000e5c:	3b08      	subs	r3, #8
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	430a      	orrs	r2, r1
 8000e62:	3306      	adds	r3, #6
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	18c3      	adds	r3, r0, r3
 8000e68:	3304      	adds	r3, #4
 8000e6a:	601a      	str	r2, [r3, #0]
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b003      	add	sp, #12
 8000e72:	bd90      	pop	{r4, r7, pc}
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	045b      	lsls	r3, r3, #17
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d301      	bcc.n	8000e94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e90:	2301      	movs	r3, #1
 8000e92:	e010      	b.n	8000eb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <SysTick_Config+0x44>)
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	3a01      	subs	r2, #1
 8000e9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	425b      	negs	r3, r3
 8000ea0:	2103      	movs	r1, #3
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f7ff ff7c 	bl	8000da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SysTick_Config+0x44>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SysTick_Config+0x44>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	210f      	movs	r1, #15
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	1c02      	adds	r2, r0, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff ff5d 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b004      	add	sp, #16
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	0002      	movs	r2, r0
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff ff33 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff ffaf 	bl	8000e7c <SysTick_Config>
 8000f1e:	0003      	movs	r3, r0
}
 8000f20:	0018      	movs	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b002      	add	sp, #8
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f3e:	e155      	b.n	80011ec <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4091      	lsls	r1, r2
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d100      	bne.n	8000f58 <HAL_GPIO_Init+0x30>
 8000f56:	e146      	b.n	80011e6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d005      	beq.n	8000f70 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2203      	movs	r2, #3
 8000f6a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d130      	bne.n	8000fd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	0013      	movs	r3, r2
 8000f80:	43da      	mvns	r2, r3
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	091b      	lsrs	r3, r3, #4
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d017      	beq.n	800100e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2203      	movs	r2, #3
 8001014:	4013      	ands	r3, r2
 8001016:	2b02      	cmp	r3, #2
 8001018:	d123      	bne.n	8001062 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	0092      	lsls	r2, r2, #2
 8001024:	58d3      	ldr	r3, [r2, r3]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	2207      	movs	r2, #7
 800102c:	4013      	ands	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	43da      	mvns	r2, r3
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2107      	movs	r1, #7
 8001046:	400b      	ands	r3, r1
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	6939      	ldr	r1, [r7, #16]
 8001060:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2203      	movs	r2, #3
 8001080:	401a      	ands	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	23c0      	movs	r3, #192	; 0xc0
 800109c:	029b      	lsls	r3, r3, #10
 800109e:	4013      	ands	r3, r2
 80010a0:	d100      	bne.n	80010a4 <HAL_GPIO_Init+0x17c>
 80010a2:	e0a0      	b.n	80011e6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a4:	4b57      	ldr	r3, [pc, #348]	; (8001204 <HAL_GPIO_Init+0x2dc>)
 80010a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a8:	4b56      	ldr	r3, [pc, #344]	; (8001204 <HAL_GPIO_Init+0x2dc>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	430a      	orrs	r2, r1
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b0:	4a55      	ldr	r2, [pc, #340]	; (8001208 <HAL_GPIO_Init+0x2e0>)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	589b      	ldr	r3, [r3, r2]
 80010bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2203      	movs	r2, #3
 80010c2:	4013      	ands	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	409a      	lsls	r2, r3
 80010ca:	0013      	movs	r3, r2
 80010cc:	43da      	mvns	r2, r3
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	23a0      	movs	r3, #160	; 0xa0
 80010d8:	05db      	lsls	r3, r3, #23
 80010da:	429a      	cmp	r2, r3
 80010dc:	d01f      	beq.n	800111e <HAL_GPIO_Init+0x1f6>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4a      	ldr	r2, [pc, #296]	; (800120c <HAL_GPIO_Init+0x2e4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x1f2>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a49      	ldr	r2, [pc, #292]	; (8001210 <HAL_GPIO_Init+0x2e8>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x1ee>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a48      	ldr	r2, [pc, #288]	; (8001214 <HAL_GPIO_Init+0x2ec>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x1ea>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a47      	ldr	r2, [pc, #284]	; (8001218 <HAL_GPIO_Init+0x2f0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x1e6>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a46      	ldr	r2, [pc, #280]	; (800121c <HAL_GPIO_Init+0x2f4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x1e2>
 8001106:	2305      	movs	r3, #5
 8001108:	e00a      	b.n	8001120 <HAL_GPIO_Init+0x1f8>
 800110a:	2306      	movs	r3, #6
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x1f8>
 800110e:	2304      	movs	r3, #4
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x1f8>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x1f8>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x1f8>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x1f8>
 800111e:	2300      	movs	r3, #0
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	2103      	movs	r1, #3
 8001124:	400a      	ands	r2, r1
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4935      	ldr	r1, [pc, #212]	; (8001208 <HAL_GPIO_Init+0x2e0>)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b38      	ldr	r3, [pc, #224]	; (8001220 <HAL_GPIO_Init+0x2f8>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43da      	mvns	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	035b      	lsls	r3, r3, #13
 8001156:	4013      	ands	r3, r2
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <HAL_GPIO_Init+0x2f8>)
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001168:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_GPIO_Init+0x2f8>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43da      	mvns	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	039b      	lsls	r3, r3, #14
 8001180:	4013      	ands	r3, r2
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <HAL_GPIO_Init+0x2f8>)
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001192:	4b23      	ldr	r3, [pc, #140]	; (8001220 <HAL_GPIO_Init+0x2f8>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43da      	mvns	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	029b      	lsls	r3, r3, #10
 80011aa:	4013      	ands	r3, r2
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_GPIO_Init+0x2f8>)
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_GPIO_Init+0x2f8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43da      	mvns	r2, r3
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	025b      	lsls	r3, r3, #9
 80011d4:	4013      	ands	r3, r2
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_GPIO_Init+0x2f8>)
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	40da      	lsrs	r2, r3
 80011f4:	1e13      	subs	r3, r2, #0
 80011f6:	d000      	beq.n	80011fa <HAL_GPIO_Init+0x2d2>
 80011f8:	e6a2      	b.n	8000f40 <HAL_GPIO_Init+0x18>
  }
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b006      	add	sp, #24
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	40010000 	.word	0x40010000
 800120c:	50000400 	.word	0x50000400
 8001210:	50000800 	.word	0x50000800
 8001214:	50000c00 	.word	0x50000c00
 8001218:	50001000 	.word	0x50001000
 800121c:	50001c00 	.word	0x50001c00
 8001220:	40010400 	.word	0x40010400

08001224 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	000a      	movs	r2, r1
 800122e:	1cbb      	adds	r3, r7, #2
 8001230:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	1cba      	adds	r2, r7, #2
 8001238:	8812      	ldrh	r2, [r2, #0]
 800123a:	4013      	ands	r3, r2
 800123c:	d004      	beq.n	8001248 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800123e:	230f      	movs	r3, #15
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e003      	b.n	8001250 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001248:	230f      	movs	r3, #15
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001250:	230f      	movs	r3, #15
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	781b      	ldrb	r3, [r3, #0]
}
 8001256:	0018      	movs	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	0008      	movs	r0, r1
 8001268:	0011      	movs	r1, r2
 800126a:	1cbb      	adds	r3, r7, #2
 800126c:	1c02      	adds	r2, r0, #0
 800126e:	801a      	strh	r2, [r3, #0]
 8001270:	1c7b      	adds	r3, r7, #1
 8001272:	1c0a      	adds	r2, r1, #0
 8001274:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001276:	1c7b      	adds	r3, r7, #1
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127e:	1cbb      	adds	r3, r7, #2
 8001280:	881a      	ldrh	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001286:	e003      	b.n	8001290 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001288:	1cbb      	adds	r3, r7, #2
 800128a:	881a      	ldrh	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e082      	b.n	80013b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2241      	movs	r2, #65	; 0x41
 80012ae:	5c9b      	ldrb	r3, [r3, r2]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d107      	bne.n	80012c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2240      	movs	r2, #64	; 0x40
 80012ba:	2100      	movs	r1, #0
 80012bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7ff fc07 	bl	8000ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2241      	movs	r2, #65	; 0x41
 80012ca:	2124      	movs	r1, #36	; 0x24
 80012cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2101      	movs	r1, #1
 80012da:	438a      	bics	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4934      	ldr	r1, [pc, #208]	; (80013b8 <HAL_I2C_Init+0x120>)
 80012e8:	400a      	ands	r2, r1
 80012ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4931      	ldr	r1, [pc, #196]	; (80013bc <HAL_I2C_Init+0x124>)
 80012f8:	400a      	ands	r2, r1
 80012fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d108      	bne.n	8001316 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0209      	lsls	r1, r1, #8
 8001310:	430a      	orrs	r2, r1
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	e007      	b.n	8001326 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2184      	movs	r1, #132	; 0x84
 8001320:	0209      	lsls	r1, r1, #8
 8001322:	430a      	orrs	r2, r1
 8001324:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d104      	bne.n	8001338 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	491f      	ldr	r1, [pc, #124]	; (80013c0 <HAL_I2C_Init+0x128>)
 8001344:	430a      	orrs	r2, r1
 8001346:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	491a      	ldr	r1, [pc, #104]	; (80013bc <HAL_I2C_Init+0x124>)
 8001354:	400a      	ands	r2, r1
 8001356:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	431a      	orrs	r2, r3
 8001362:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69d9      	ldr	r1, [r3, #28]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1a      	ldr	r2, [r3, #32]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2101      	movs	r1, #1
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2241      	movs	r2, #65	; 0x41
 800139c:	2120      	movs	r1, #32
 800139e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2242      	movs	r2, #66	; 0x42
 80013aa:	2100      	movs	r1, #0
 80013ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b002      	add	sp, #8
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	f0ffffff 	.word	0xf0ffffff
 80013bc:	ffff7fff 	.word	0xffff7fff
 80013c0:	02008000 	.word	0x02008000

080013c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	000c      	movs	r4, r1
 80013ce:	0010      	movs	r0, r2
 80013d0:	0019      	movs	r1, r3
 80013d2:	230a      	movs	r3, #10
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	1c22      	adds	r2, r4, #0
 80013d8:	801a      	strh	r2, [r3, #0]
 80013da:	2308      	movs	r3, #8
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	1c02      	adds	r2, r0, #0
 80013e0:	801a      	strh	r2, [r3, #0]
 80013e2:	1dbb      	adds	r3, r7, #6
 80013e4:	1c0a      	adds	r2, r1, #0
 80013e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2241      	movs	r2, #65	; 0x41
 80013ec:	5c9b      	ldrb	r3, [r3, r2]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b20      	cmp	r3, #32
 80013f2:	d000      	beq.n	80013f6 <HAL_I2C_Mem_Write+0x32>
 80013f4:	e10c      	b.n	8001610 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80013f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <HAL_I2C_Mem_Write+0x42>
 80013fc:	232c      	movs	r3, #44	; 0x2c
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d105      	bne.n	8001412 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e0ff      	b.n	8001612 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2240      	movs	r2, #64	; 0x40
 8001416:	5c9b      	ldrb	r3, [r3, r2]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d101      	bne.n	8001420 <HAL_I2C_Mem_Write+0x5c>
 800141c:	2302      	movs	r3, #2
 800141e:	e0f8      	b.n	8001612 <HAL_I2C_Mem_Write+0x24e>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2240      	movs	r2, #64	; 0x40
 8001424:	2101      	movs	r1, #1
 8001426:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001428:	f7ff fc72 	bl	8000d10 <HAL_GetTick>
 800142c:	0003      	movs	r3, r0
 800142e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	0219      	lsls	r1, r3, #8
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2319      	movs	r3, #25
 800143c:	2201      	movs	r2, #1
 800143e:	f000 fc25 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d001      	beq.n	800144a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0e3      	b.n	8001612 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2241      	movs	r2, #65	; 0x41
 800144e:	2121      	movs	r1, #33	; 0x21
 8001450:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2242      	movs	r2, #66	; 0x42
 8001456:	2140      	movs	r1, #64	; 0x40
 8001458:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	222c      	movs	r2, #44	; 0x2c
 800146a:	18ba      	adds	r2, r7, r2
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001476:	1dbb      	adds	r3, r7, #6
 8001478:	881c      	ldrh	r4, [r3, #0]
 800147a:	2308      	movs	r3, #8
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	881a      	ldrh	r2, [r3, #0]
 8001480:	230a      	movs	r3, #10
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	8819      	ldrh	r1, [r3, #0]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	0023      	movs	r3, r4
 8001492:	f000 fb13 	bl	8001abc <I2C_RequestMemoryWrite>
 8001496:	1e03      	subs	r3, r0, #0
 8001498:	d005      	beq.n	80014a6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	2100      	movs	r1, #0
 80014a0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e0b5      	b.n	8001612 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	2bff      	cmp	r3, #255	; 0xff
 80014ae:	d911      	bls.n	80014d4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	22ff      	movs	r2, #255	; 0xff
 80014b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	045c      	lsls	r4, r3, #17
 80014c0:	230a      	movs	r3, #10
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	8819      	ldrh	r1, [r3, #0]
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	2300      	movs	r3, #0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	0023      	movs	r3, r4
 80014ce:	f000 fdb5 	bl	800203c <I2C_TransferConfig>
 80014d2:	e012      	b.n	80014fa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d8:	b29a      	uxth	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	049c      	lsls	r4, r3, #18
 80014e8:	230a      	movs	r3, #10
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	8819      	ldrh	r1, [r3, #0]
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	2300      	movs	r3, #0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	0023      	movs	r3, r4
 80014f6:	f000 fda1 	bl	800203c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	0018      	movs	r0, r3
 8001502:	f000 fc11 	bl	8001d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001506:	1e03      	subs	r3, r0, #0
 8001508:	d001      	beq.n	800150e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e081      	b.n	8001612 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001528:	b29b      	uxth	r3, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001536:	3b01      	subs	r3, #1
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001542:	b29b      	uxth	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d03a      	beq.n	80015be <HAL_I2C_Mem_Write+0x1fa>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154c:	2b00      	cmp	r3, #0
 800154e:	d136      	bne.n	80015be <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	0013      	movs	r3, r2
 800155a:	2200      	movs	r2, #0
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	f000 fb95 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 8001562:	1e03      	subs	r3, r0, #0
 8001564:	d001      	beq.n	800156a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e053      	b.n	8001612 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156e:	b29b      	uxth	r3, r3
 8001570:	2bff      	cmp	r3, #255	; 0xff
 8001572:	d911      	bls.n	8001598 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	22ff      	movs	r2, #255	; 0xff
 8001578:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800157e:	b2da      	uxtb	r2, r3
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	045c      	lsls	r4, r3, #17
 8001584:	230a      	movs	r3, #10
 8001586:	18fb      	adds	r3, r7, r3
 8001588:	8819      	ldrh	r1, [r3, #0]
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	2300      	movs	r3, #0
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	0023      	movs	r3, r4
 8001592:	f000 fd53 	bl	800203c <I2C_TransferConfig>
 8001596:	e012      	b.n	80015be <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159c:	b29a      	uxth	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	049c      	lsls	r4, r3, #18
 80015ac:	230a      	movs	r3, #10
 80015ae:	18fb      	adds	r3, r7, r3
 80015b0:	8819      	ldrh	r1, [r3, #0]
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	2300      	movs	r3, #0
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	0023      	movs	r3, r4
 80015ba:	f000 fd3f 	bl	800203c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d198      	bne.n	80014fa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 fbf0 	bl	8001db4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015d4:	1e03      	subs	r3, r0, #0
 80015d6:	d001      	beq.n	80015dc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e01a      	b.n	8001612 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2220      	movs	r2, #32
 80015e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	490b      	ldr	r1, [pc, #44]	; (800161c <HAL_I2C_Mem_Write+0x258>)
 80015f0:	400a      	ands	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2241      	movs	r2, #65	; 0x41
 80015f8:	2120      	movs	r1, #32
 80015fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2242      	movs	r2, #66	; 0x42
 8001600:	2100      	movs	r1, #0
 8001602:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	2100      	movs	r1, #0
 800160a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	e000      	b.n	8001612 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001610:	2302      	movs	r3, #2
  }
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b007      	add	sp, #28
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	fe00e800 	.word	0xfe00e800

08001620 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af02      	add	r7, sp, #8
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	000c      	movs	r4, r1
 800162a:	0010      	movs	r0, r2
 800162c:	0019      	movs	r1, r3
 800162e:	230a      	movs	r3, #10
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	1c22      	adds	r2, r4, #0
 8001634:	801a      	strh	r2, [r3, #0]
 8001636:	2308      	movs	r3, #8
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	1c02      	adds	r2, r0, #0
 800163c:	801a      	strh	r2, [r3, #0]
 800163e:	1dbb      	adds	r3, r7, #6
 8001640:	1c0a      	adds	r2, r1, #0
 8001642:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2241      	movs	r2, #65	; 0x41
 8001648:	5c9b      	ldrb	r3, [r3, r2]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b20      	cmp	r3, #32
 800164e:	d000      	beq.n	8001652 <HAL_I2C_Mem_Read+0x32>
 8001650:	e110      	b.n	8001874 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001654:	2b00      	cmp	r3, #0
 8001656:	d004      	beq.n	8001662 <HAL_I2C_Mem_Read+0x42>
 8001658:	232c      	movs	r3, #44	; 0x2c
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d105      	bne.n	800166e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e103      	b.n	8001876 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2240      	movs	r2, #64	; 0x40
 8001672:	5c9b      	ldrb	r3, [r3, r2]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_I2C_Mem_Read+0x5c>
 8001678:	2302      	movs	r3, #2
 800167a:	e0fc      	b.n	8001876 <HAL_I2C_Mem_Read+0x256>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2240      	movs	r2, #64	; 0x40
 8001680:	2101      	movs	r1, #1
 8001682:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001684:	f7ff fb44 	bl	8000d10 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	0219      	lsls	r1, r3, #8
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2319      	movs	r3, #25
 8001698:	2201      	movs	r2, #1
 800169a:	f000 faf7 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 800169e:	1e03      	subs	r3, r0, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0e7      	b.n	8001876 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2241      	movs	r2, #65	; 0x41
 80016aa:	2122      	movs	r1, #34	; 0x22
 80016ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2242      	movs	r2, #66	; 0x42
 80016b2:	2140      	movs	r1, #64	; 0x40
 80016b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	222c      	movs	r2, #44	; 0x2c
 80016c6:	18ba      	adds	r2, r7, r2
 80016c8:	8812      	ldrh	r2, [r2, #0]
 80016ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016d2:	1dbb      	adds	r3, r7, #6
 80016d4:	881c      	ldrh	r4, [r3, #0]
 80016d6:	2308      	movs	r3, #8
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	881a      	ldrh	r2, [r3, #0]
 80016dc:	230a      	movs	r3, #10
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	8819      	ldrh	r1, [r3, #0]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	0023      	movs	r3, r4
 80016ee:	f000 fa49 	bl	8001b84 <I2C_RequestMemoryRead>
 80016f2:	1e03      	subs	r3, r0, #0
 80016f4:	d005      	beq.n	8001702 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2240      	movs	r2, #64	; 0x40
 80016fa:	2100      	movs	r1, #0
 80016fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0b9      	b.n	8001876 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001706:	b29b      	uxth	r3, r3
 8001708:	2bff      	cmp	r3, #255	; 0xff
 800170a:	d911      	bls.n	8001730 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	22ff      	movs	r2, #255	; 0xff
 8001710:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001716:	b2da      	uxtb	r2, r3
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	045c      	lsls	r4, r3, #17
 800171c:	230a      	movs	r3, #10
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	8819      	ldrh	r1, [r3, #0]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	4b56      	ldr	r3, [pc, #344]	; (8001880 <HAL_I2C_Mem_Read+0x260>)
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	0023      	movs	r3, r4
 800172a:	f000 fc87 	bl	800203c <I2C_TransferConfig>
 800172e:	e012      	b.n	8001756 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29a      	uxth	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173e:	b2da      	uxtb	r2, r3
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	049c      	lsls	r4, r3, #18
 8001744:	230a      	movs	r3, #10
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	8819      	ldrh	r1, [r3, #0]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	4b4c      	ldr	r3, [pc, #304]	; (8001880 <HAL_I2C_Mem_Read+0x260>)
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	0023      	movs	r3, r4
 8001752:	f000 fc73 	bl	800203c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	0013      	movs	r3, r2
 8001760:	2200      	movs	r2, #0
 8001762:	2104      	movs	r1, #4
 8001764:	f000 fa92 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 8001768:	1e03      	subs	r3, r0, #0
 800176a:	d001      	beq.n	8001770 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e082      	b.n	8001876 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178c:	3b01      	subs	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001798:	b29b      	uxth	r3, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d03a      	beq.n	8001822 <HAL_I2C_Mem_Read+0x202>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d136      	bne.n	8001822 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	0013      	movs	r3, r2
 80017be:	2200      	movs	r2, #0
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	f000 fa63 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e053      	b.n	8001876 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	2bff      	cmp	r3, #255	; 0xff
 80017d6:	d911      	bls.n	80017fc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	22ff      	movs	r2, #255	; 0xff
 80017dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	045c      	lsls	r4, r3, #17
 80017e8:	230a      	movs	r3, #10
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	8819      	ldrh	r1, [r3, #0]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	2300      	movs	r3, #0
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	0023      	movs	r3, r4
 80017f6:	f000 fc21 	bl	800203c <I2C_TransferConfig>
 80017fa:	e012      	b.n	8001822 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180a:	b2da      	uxtb	r2, r3
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	049c      	lsls	r4, r3, #18
 8001810:	230a      	movs	r3, #10
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	8819      	ldrh	r1, [r3, #0]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	2300      	movs	r3, #0
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	0023      	movs	r3, r4
 800181e:	f000 fc0d 	bl	800203c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001826:	b29b      	uxth	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d194      	bne.n	8001756 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	0018      	movs	r0, r3
 8001834:	f000 fabe 	bl	8001db4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001838:	1e03      	subs	r3, r0, #0
 800183a:	d001      	beq.n	8001840 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e01a      	b.n	8001876 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2220      	movs	r2, #32
 8001846:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	490c      	ldr	r1, [pc, #48]	; (8001884 <HAL_I2C_Mem_Read+0x264>)
 8001854:	400a      	ands	r2, r1
 8001856:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2241      	movs	r2, #65	; 0x41
 800185c:	2120      	movs	r1, #32
 800185e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2242      	movs	r2, #66	; 0x42
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2240      	movs	r2, #64	; 0x40
 800186c:	2100      	movs	r1, #0
 800186e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	e000      	b.n	8001876 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001874:	2302      	movs	r3, #2
  }
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b007      	add	sp, #28
 800187c:	bd90      	pop	{r4, r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	80002400 	.word	0x80002400
 8001884:	fe00e800 	.word	0xfe00e800

08001888 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af02      	add	r7, sp, #8
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	230a      	movs	r3, #10
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	1c0a      	adds	r2, r1, #0
 800189a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2241      	movs	r2, #65	; 0x41
 80018a4:	5c9b      	ldrb	r3, [r3, r2]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	d000      	beq.n	80018ae <HAL_I2C_IsDeviceReady+0x26>
 80018ac:	e0fd      	b.n	8001aaa <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	699a      	ldr	r2, [r3, #24]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	401a      	ands	r2, r3
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	429a      	cmp	r2, r3
 80018c0:	d101      	bne.n	80018c6 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80018c2:	2302      	movs	r3, #2
 80018c4:	e0f2      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2240      	movs	r2, #64	; 0x40
 80018ca:	5c9b      	ldrb	r3, [r3, r2]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_I2C_IsDeviceReady+0x4c>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e0eb      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x224>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2240      	movs	r2, #64	; 0x40
 80018d8:	2101      	movs	r1, #1
 80018da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2241      	movs	r2, #65	; 0x41
 80018e0:	2124      	movs	r1, #36	; 0x24
 80018e2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d107      	bne.n	8001902 <HAL_I2C_IsDeviceReady+0x7a>
 80018f2:	230a      	movs	r3, #10
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	059b      	lsls	r3, r3, #22
 80018fa:	0d9b      	lsrs	r3, r3, #22
 80018fc:	4a6d      	ldr	r2, [pc, #436]	; (8001ab4 <HAL_I2C_IsDeviceReady+0x22c>)
 80018fe:	431a      	orrs	r2, r3
 8001900:	e006      	b.n	8001910 <HAL_I2C_IsDeviceReady+0x88>
 8001902:	230a      	movs	r3, #10
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	059b      	lsls	r3, r3, #22
 800190a:	0d9b      	lsrs	r3, r3, #22
 800190c:	4a6a      	ldr	r2, [pc, #424]	; (8001ab8 <HAL_I2C_IsDeviceReady+0x230>)
 800190e:	431a      	orrs	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001916:	f7ff f9fb 	bl	8000d10 <HAL_GetTick>
 800191a:	0003      	movs	r3, r0
 800191c:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2220      	movs	r2, #32
 8001926:	4013      	ands	r3, r2
 8001928:	3b20      	subs	r3, #32
 800192a:	425a      	negs	r2, r3
 800192c:	4153      	adcs	r3, r2
 800192e:	b2da      	uxtb	r2, r3
 8001930:	231f      	movs	r3, #31
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2210      	movs	r2, #16
 800193e:	4013      	ands	r3, r2
 8001940:	3b10      	subs	r3, #16
 8001942:	425a      	negs	r2, r3
 8001944:	4153      	adcs	r3, r2
 8001946:	b2da      	uxtb	r2, r3
 8001948:	231e      	movs	r3, #30
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800194e:	e035      	b.n	80019bc <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	d01a      	beq.n	800198c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001956:	f7ff f9db 	bl	8000d10 <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d302      	bcc.n	800196c <HAL_I2C_IsDeviceReady+0xe4>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10f      	bne.n	800198c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2241      	movs	r2, #65	; 0x41
 8001970:	2120      	movs	r1, #32
 8001972:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001978:	2220      	movs	r2, #32
 800197a:	431a      	orrs	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2240      	movs	r2, #64	; 0x40
 8001984:	2100      	movs	r1, #0
 8001986:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e08f      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2220      	movs	r2, #32
 8001994:	4013      	ands	r3, r2
 8001996:	3b20      	subs	r3, #32
 8001998:	425a      	negs	r2, r3
 800199a:	4153      	adcs	r3, r2
 800199c:	b2da      	uxtb	r2, r3
 800199e:	231f      	movs	r3, #31
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2210      	movs	r2, #16
 80019ac:	4013      	ands	r3, r2
 80019ae:	3b10      	subs	r3, #16
 80019b0:	425a      	negs	r2, r3
 80019b2:	4153      	adcs	r3, r2
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	231e      	movs	r3, #30
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80019bc:	231f      	movs	r3, #31
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d104      	bne.n	80019d0 <HAL_I2C_IsDeviceReady+0x148>
 80019c6:	231e      	movs	r3, #30
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0bf      	beq.n	8001950 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2210      	movs	r2, #16
 80019d8:	4013      	ands	r3, r2
 80019da:	2b10      	cmp	r3, #16
 80019dc:	d01a      	beq.n	8001a14 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	0013      	movs	r3, r2
 80019e8:	2200      	movs	r2, #0
 80019ea:	2120      	movs	r1, #32
 80019ec:	f000 f94e 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e059      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2220      	movs	r2, #32
 80019fe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2241      	movs	r2, #65	; 0x41
 8001a04:	2120      	movs	r1, #32
 8001a06:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e04b      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2120      	movs	r1, #32
 8001a22:	f000 f933 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e03e      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2210      	movs	r2, #16
 8001a34:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d119      	bne.n	8001a7a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	01c9      	lsls	r1, r1, #7
 8001a54:	430a      	orrs	r2, r1
 8001a56:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	0013      	movs	r3, r2
 8001a62:	2200      	movs	r2, #0
 8001a64:	2120      	movs	r1, #32
 8001a66:	f000 f911 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e01c      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2220      	movs	r2, #32
 8001a78:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d900      	bls.n	8001a8a <HAL_I2C_IsDeviceReady+0x202>
 8001a88:	e72f      	b.n	80018ea <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2241      	movs	r2, #65	; 0x41
 8001a8e:	2120      	movs	r1, #32
 8001a90:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	2220      	movs	r2, #32
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2240      	movs	r2, #64	; 0x40
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
  }
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b008      	add	sp, #32
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	02002000 	.word	0x02002000
 8001ab8:	02002800 	.word	0x02002800

08001abc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	000c      	movs	r4, r1
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	0019      	movs	r1, r3
 8001aca:	250a      	movs	r5, #10
 8001acc:	197b      	adds	r3, r7, r5
 8001ace:	1c22      	adds	r2, r4, #0
 8001ad0:	801a      	strh	r2, [r3, #0]
 8001ad2:	2308      	movs	r3, #8
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	1c02      	adds	r2, r0, #0
 8001ad8:	801a      	strh	r2, [r3, #0]
 8001ada:	1dbb      	adds	r3, r7, #6
 8001adc:	1c0a      	adds	r2, r1, #0
 8001ade:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ae0:	1dbb      	adds	r3, r7, #6
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	045c      	lsls	r4, r3, #17
 8001aea:	197b      	adds	r3, r7, r5
 8001aec:	8819      	ldrh	r1, [r3, #0]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <I2C_RequestMemoryWrite+0xc4>)
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	0023      	movs	r3, r4
 8001af6:	f000 faa1 	bl	800203c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afc:	6a39      	ldr	r1, [r7, #32]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 f911 	bl	8001d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b06:	1e03      	subs	r3, r0, #0
 8001b08:	d001      	beq.n	8001b0e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e033      	b.n	8001b76 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b0e:	1dbb      	adds	r3, r7, #6
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d107      	bne.n	8001b26 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b16:	2308      	movs	r3, #8
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
 8001b24:	e019      	b.n	8001b5a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b26:	2308      	movs	r3, #8
 8001b28:	18fb      	adds	r3, r7, r3
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3a:	6a39      	ldr	r1, [r7, #32]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 f8f2 	bl	8001d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b44:	1e03      	subs	r3, r0, #0
 8001b46:	d001      	beq.n	8001b4c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e014      	b.n	8001b76 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b5a:	6a3a      	ldr	r2, [r7, #32]
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	0013      	movs	r3, r2
 8001b64:	2200      	movs	r2, #0
 8001b66:	2180      	movs	r1, #128	; 0x80
 8001b68:	f000 f890 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 8001b6c:	1e03      	subs	r3, r0, #0
 8001b6e:	d001      	beq.n	8001b74 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	80002000 	.word	0x80002000

08001b84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	000c      	movs	r4, r1
 8001b8e:	0010      	movs	r0, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	250a      	movs	r5, #10
 8001b94:	197b      	adds	r3, r7, r5
 8001b96:	1c22      	adds	r2, r4, #0
 8001b98:	801a      	strh	r2, [r3, #0]
 8001b9a:	2308      	movs	r3, #8
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	1c02      	adds	r2, r0, #0
 8001ba0:	801a      	strh	r2, [r3, #0]
 8001ba2:	1dbb      	adds	r3, r7, #6
 8001ba4:	1c0a      	adds	r2, r1, #0
 8001ba6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ba8:	1dbb      	adds	r3, r7, #6
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	197b      	adds	r3, r7, r5
 8001bb0:	8819      	ldrh	r1, [r3, #0]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <I2C_RequestMemoryRead+0xc0>)
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f000 fa3f 	bl	800203c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc0:	6a39      	ldr	r1, [r7, #32]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f000 f8af 	bl	8001d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bca:	1e03      	subs	r3, r0, #0
 8001bcc:	d001      	beq.n	8001bd2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e033      	b.n	8001c3a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bd2:	1dbb      	adds	r3, r7, #6
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d107      	bne.n	8001bea <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bda:	2308      	movs	r3, #8
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
 8001be8:	e019      	b.n	8001c1e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bea:	2308      	movs	r3, #8
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	6a39      	ldr	r1, [r7, #32]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 f890 	bl	8001d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c08:	1e03      	subs	r3, r0, #0
 8001c0a:	d001      	beq.n	8001c10 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e014      	b.n	8001c3a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c10:	2308      	movs	r3, #8
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c1e:	6a3a      	ldr	r2, [r7, #32]
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	0013      	movs	r3, r2
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2140      	movs	r1, #64	; 0x40
 8001c2c:	f000 f82e 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 8001c30:	1e03      	subs	r3, r0, #0
 8001c32:	d001      	beq.n	8001c38 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b004      	add	sp, #16
 8001c40:	bdb0      	pop	{r4, r5, r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	80002000 	.word	0x80002000

08001c48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2202      	movs	r2, #2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d103      	bne.n	8001c66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2200      	movs	r2, #0
 8001c64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d007      	beq.n	8001c84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2101      	movs	r1, #1
 8001c80:	430a      	orrs	r2, r1
 8001c82:	619a      	str	r2, [r3, #24]
  }
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	1dfb      	adds	r3, r7, #7
 8001c9a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c9c:	e030      	b.n	8001d00 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	d02d      	beq.n	8001d00 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca4:	f7ff f834 	bl	8000d10 <HAL_GetTick>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d302      	bcc.n	8001cba <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d122      	bne.n	8001d00 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	425a      	negs	r2, r3
 8001cca:	4153      	adcs	r3, r2
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	001a      	movs	r2, r3
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d113      	bne.n	8001d00 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	2220      	movs	r2, #32
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2241      	movs	r2, #65	; 0x41
 8001ce8:	2120      	movs	r1, #32
 8001cea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2242      	movs	r2, #66	; 0x42
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e00f      	b.n	8001d20 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	425a      	negs	r2, r3
 8001d10:	4153      	adcs	r3, r2
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	001a      	movs	r2, r3
 8001d16:	1dfb      	adds	r3, r7, #7
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d0bf      	beq.n	8001c9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b004      	add	sp, #16
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d34:	e032      	b.n	8001d9c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f000 f87d 	bl	8001e3c <I2C_IsErrorOccurred>
 8001d42:	1e03      	subs	r3, r0, #0
 8001d44:	d001      	beq.n	8001d4a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e030      	b.n	8001dac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	d025      	beq.n	8001d9c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d50:	f7fe ffde 	bl	8000d10 <HAL_GetTick>
 8001d54:	0002      	movs	r2, r0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d302      	bcc.n	8001d66 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d11a      	bne.n	8001d9c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d013      	beq.n	8001d9c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d78:	2220      	movs	r2, #32
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2241      	movs	r2, #65	; 0x41
 8001d84:	2120      	movs	r1, #32
 8001d86:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2242      	movs	r2, #66	; 0x42
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2240      	movs	r2, #64	; 0x40
 8001d94:	2100      	movs	r1, #0
 8001d96:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e007      	b.n	8001dac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2202      	movs	r2, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d1c5      	bne.n	8001d36 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b004      	add	sp, #16
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dc0:	e02f      	b.n	8001e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f000 f837 	bl	8001e3c <I2C_IsErrorOccurred>
 8001dce:	1e03      	subs	r3, r0, #0
 8001dd0:	d001      	beq.n	8001dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e02d      	b.n	8001e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd6:	f7fe ff9b 	bl	8000d10 <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d302      	bcc.n	8001dec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d11a      	bne.n	8001e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2220      	movs	r2, #32
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d013      	beq.n	8001e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	2220      	movs	r2, #32
 8001e00:	431a      	orrs	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2241      	movs	r2, #65	; 0x41
 8001e0a:	2120      	movs	r1, #32
 8001e0c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2242      	movs	r2, #66	; 0x42
 8001e12:	2100      	movs	r1, #0
 8001e14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2240      	movs	r2, #64	; 0x40
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e007      	b.n	8001e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d1c8      	bne.n	8001dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	0018      	movs	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b004      	add	sp, #16
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b08b      	sub	sp, #44	; 0x2c
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e48:	2327      	movs	r3, #39	; 0x27
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2210      	movs	r2, #16
 8001e64:	4013      	ands	r3, r2
 8001e66:	d100      	bne.n	8001e6a <I2C_IsErrorOccurred+0x2e>
 8001e68:	e082      	b.n	8001f70 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2210      	movs	r2, #16
 8001e70:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e72:	e060      	b.n	8001f36 <I2C_IsErrorOccurred+0xfa>
 8001e74:	2427      	movs	r4, #39	; 0x27
 8001e76:	193b      	adds	r3, r7, r4
 8001e78:	193a      	adds	r2, r7, r4
 8001e7a:	7812      	ldrb	r2, [r2, #0]
 8001e7c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	3301      	adds	r3, #1
 8001e82:	d058      	beq.n	8001f36 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e84:	f7fe ff44 	bl	8000d10 <HAL_GetTick>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d306      	bcc.n	8001ea2 <I2C_IsErrorOccurred+0x66>
 8001e94:	193b      	adds	r3, r7, r4
 8001e96:	193a      	adds	r2, r7, r4
 8001e98:	7812      	ldrb	r2, [r2, #0]
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d149      	bne.n	8001f36 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	01db      	lsls	r3, r3, #7
 8001eac:	4013      	ands	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001eb0:	2013      	movs	r0, #19
 8001eb2:	183b      	adds	r3, r7, r0
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	2142      	movs	r1, #66	; 0x42
 8001eb8:	5c52      	ldrb	r2, [r2, r1]
 8001eba:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d126      	bne.n	8001f1e <I2C_IsErrorOccurred+0xe2>
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	01db      	lsls	r3, r3, #7
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d021      	beq.n	8001f1e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001eda:	183b      	adds	r3, r7, r0
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	d01d      	beq.n	8001f1e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	01c9      	lsls	r1, r1, #7
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ef4:	f7fe ff0c 	bl	8000d10 <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001efc:	e00f      	b.n	8001f1e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001efe:	f7fe ff07 	bl	8000d10 <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b19      	cmp	r3, #25
 8001f0a:	d908      	bls.n	8001f1e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	4313      	orrs	r3, r2
 8001f12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f14:	2327      	movs	r3, #39	; 0x27
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]

              break;
 8001f1c:	e00b      	b.n	8001f36 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2220      	movs	r2, #32
 8001f26:	4013      	ands	r3, r2
 8001f28:	2127      	movs	r1, #39	; 0x27
 8001f2a:	187a      	adds	r2, r7, r1
 8001f2c:	1879      	adds	r1, r7, r1
 8001f2e:	7809      	ldrb	r1, [r1, #0]
 8001f30:	7011      	strb	r1, [r2, #0]
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d1e3      	bne.n	8001efe <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d004      	beq.n	8001f4e <I2C_IsErrorOccurred+0x112>
 8001f44:	2327      	movs	r3, #39	; 0x27
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d092      	beq.n	8001e74 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f4e:	2327      	movs	r3, #39	; 0x27
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d103      	bne.n	8001f60 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	2204      	movs	r2, #4
 8001f64:	4313      	orrs	r3, r2
 8001f66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f68:	2327      	movs	r3, #39	; 0x27
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d00c      	beq.n	8001f9c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	2201      	movs	r2, #1
 8001f86:	4313      	orrs	r3, r2
 8001f88:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	0052      	lsls	r2, r2, #1
 8001f92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f94:	2327      	movs	r3, #39	; 0x27
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d00c      	beq.n	8001fc0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	4313      	orrs	r3, r2
 8001fac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	00d2      	lsls	r2, r2, #3
 8001fb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fb8:	2327      	movs	r3, #39	; 0x27
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d00c      	beq.n	8001fe4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2280      	movs	r2, #128	; 0x80
 8001fd8:	0092      	lsls	r2, r2, #2
 8001fda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fdc:	2327      	movs	r3, #39	; 0x27
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001fe4:	2327      	movs	r3, #39	; 0x27
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01d      	beq.n	800202a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff fe29 	bl	8001c48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	490d      	ldr	r1, [pc, #52]	; (8002038 <I2C_IsErrorOccurred+0x1fc>)
 8002002:	400a      	ands	r2, r1
 8002004:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	431a      	orrs	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2241      	movs	r2, #65	; 0x41
 8002016:	2120      	movs	r1, #32
 8002018:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2242      	movs	r2, #66	; 0x42
 800201e:	2100      	movs	r1, #0
 8002020:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2240      	movs	r2, #64	; 0x40
 8002026:	2100      	movs	r1, #0
 8002028:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800202a:	2327      	movs	r3, #39	; 0x27
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	781b      	ldrb	r3, [r3, #0]
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	b00b      	add	sp, #44	; 0x2c
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	fe00e800 	.word	0xfe00e800

0800203c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	0008      	movs	r0, r1
 8002046:	0011      	movs	r1, r2
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	240a      	movs	r4, #10
 800204c:	193b      	adds	r3, r7, r4
 800204e:	1c02      	adds	r2, r0, #0
 8002050:	801a      	strh	r2, [r3, #0]
 8002052:	2009      	movs	r0, #9
 8002054:	183b      	adds	r3, r7, r0
 8002056:	1c0a      	adds	r2, r1, #0
 8002058:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800205a:	193b      	adds	r3, r7, r4
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	059b      	lsls	r3, r3, #22
 8002060:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002062:	183b      	adds	r3, r7, r0
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	0419      	lsls	r1, r3, #16
 8002068:	23ff      	movs	r3, #255	; 0xff
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800206e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002076:	4313      	orrs	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	085b      	lsrs	r3, r3, #1
 800207c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002086:	0d51      	lsrs	r1, r2, #21
 8002088:	2280      	movs	r2, #128	; 0x80
 800208a:	00d2      	lsls	r2, r2, #3
 800208c:	400a      	ands	r2, r1
 800208e:	4907      	ldr	r1, [pc, #28]	; (80020ac <I2C_TransferConfig+0x70>)
 8002090:	430a      	orrs	r2, r1
 8002092:	43d2      	mvns	r2, r2
 8002094:	401a      	ands	r2, r3
 8002096:	0011      	movs	r1, r2
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b007      	add	sp, #28
 80020a8:	bd90      	pop	{r4, r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	03ff63ff 	.word	0x03ff63ff

080020b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2241      	movs	r2, #65	; 0x41
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	d138      	bne.n	8002138 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2240      	movs	r2, #64	; 0x40
 80020ca:	5c9b      	ldrb	r3, [r3, r2]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e032      	b.n	800213a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2240      	movs	r2, #64	; 0x40
 80020d8:	2101      	movs	r1, #1
 80020da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2241      	movs	r2, #65	; 0x41
 80020e0:	2124      	movs	r1, #36	; 0x24
 80020e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2101      	movs	r1, #1
 80020f0:	438a      	bics	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4911      	ldr	r1, [pc, #68]	; (8002144 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002100:	400a      	ands	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6819      	ldr	r1, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2101      	movs	r1, #1
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2241      	movs	r2, #65	; 0x41
 8002128:	2120      	movs	r1, #32
 800212a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2240      	movs	r2, #64	; 0x40
 8002130:	2100      	movs	r1, #0
 8002132:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	e000      	b.n	800213a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002138:	2302      	movs	r3, #2
  }
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b002      	add	sp, #8
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	ffffefff 	.word	0xffffefff

08002148 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2241      	movs	r2, #65	; 0x41
 8002156:	5c9b      	ldrb	r3, [r3, r2]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b20      	cmp	r3, #32
 800215c:	d139      	bne.n	80021d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2240      	movs	r2, #64	; 0x40
 8002162:	5c9b      	ldrb	r3, [r3, r2]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002168:	2302      	movs	r3, #2
 800216a:	e033      	b.n	80021d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	2101      	movs	r1, #1
 8002172:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2241      	movs	r2, #65	; 0x41
 8002178:	2124      	movs	r1, #36	; 0x24
 800217a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2101      	movs	r1, #1
 8002188:	438a      	bics	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002198:	4013      	ands	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2101      	movs	r1, #1
 80021ba:	430a      	orrs	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2241      	movs	r2, #65	; 0x41
 80021c2:	2120      	movs	r1, #32
 80021c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2240      	movs	r2, #64	; 0x40
 80021ca:	2100      	movs	r1, #0
 80021cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
  }
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b004      	add	sp, #16
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	fffff0ff 	.word	0xfffff0ff

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b5b0      	push	{r4, r5, r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f000 fbbf 	bl	8002972 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f4:	4bc9      	ldr	r3, [pc, #804]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	220c      	movs	r2, #12
 80021fa:	4013      	ands	r3, r2
 80021fc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021fe:	4bc7      	ldr	r3, [pc, #796]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	025b      	lsls	r3, r3, #9
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2201      	movs	r2, #1
 8002210:	4013      	ands	r3, r2
 8002212:	d100      	bne.n	8002216 <HAL_RCC_OscConfig+0x36>
 8002214:	e07e      	b.n	8002314 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d007      	beq.n	800222c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b0c      	cmp	r3, #12
 8002220:	d112      	bne.n	8002248 <HAL_RCC_OscConfig+0x68>
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	025b      	lsls	r3, r3, #9
 8002228:	429a      	cmp	r2, r3
 800222a:	d10d      	bne.n	8002248 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	4bbb      	ldr	r3, [pc, #748]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	029b      	lsls	r3, r3, #10
 8002234:	4013      	ands	r3, r2
 8002236:	d100      	bne.n	800223a <HAL_RCC_OscConfig+0x5a>
 8002238:	e06b      	b.n	8002312 <HAL_RCC_OscConfig+0x132>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d167      	bne.n	8002312 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	f000 fb95 	bl	8002972 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	025b      	lsls	r3, r3, #9
 8002250:	429a      	cmp	r2, r3
 8002252:	d107      	bne.n	8002264 <HAL_RCC_OscConfig+0x84>
 8002254:	4bb1      	ldr	r3, [pc, #708]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4bb0      	ldr	r3, [pc, #704]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 800225a:	2180      	movs	r1, #128	; 0x80
 800225c:	0249      	lsls	r1, r1, #9
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	e027      	b.n	80022b4 <HAL_RCC_OscConfig+0xd4>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	23a0      	movs	r3, #160	; 0xa0
 800226a:	02db      	lsls	r3, r3, #11
 800226c:	429a      	cmp	r2, r3
 800226e:	d10e      	bne.n	800228e <HAL_RCC_OscConfig+0xae>
 8002270:	4baa      	ldr	r3, [pc, #680]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4ba9      	ldr	r3, [pc, #676]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	02c9      	lsls	r1, r1, #11
 800227a:	430a      	orrs	r2, r1
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	4ba7      	ldr	r3, [pc, #668]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4ba6      	ldr	r3, [pc, #664]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	0249      	lsls	r1, r1, #9
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	e012      	b.n	80022b4 <HAL_RCC_OscConfig+0xd4>
 800228e:	4ba3      	ldr	r3, [pc, #652]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4ba2      	ldr	r3, [pc, #648]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002294:	49a2      	ldr	r1, [pc, #648]	; (8002520 <HAL_RCC_OscConfig+0x340>)
 8002296:	400a      	ands	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	4ba0      	ldr	r3, [pc, #640]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	025b      	lsls	r3, r3, #9
 80022a2:	4013      	ands	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4b9c      	ldr	r3, [pc, #624]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b9b      	ldr	r3, [pc, #620]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 80022ae:	499d      	ldr	r1, [pc, #628]	; (8002524 <HAL_RCC_OscConfig+0x344>)
 80022b0:	400a      	ands	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d015      	beq.n	80022e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fd28 	bl	8000d10 <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022c4:	e009      	b.n	80022da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c6:	f7fe fd23 	bl	8000d10 <HAL_GetTick>
 80022ca:	0002      	movs	r2, r0
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b64      	cmp	r3, #100	; 0x64
 80022d2:	d902      	bls.n	80022da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	f000 fb4c 	bl	8002972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022da:	4b90      	ldr	r3, [pc, #576]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	029b      	lsls	r3, r3, #10
 80022e2:	4013      	ands	r3, r2
 80022e4:	d0ef      	beq.n	80022c6 <HAL_RCC_OscConfig+0xe6>
 80022e6:	e015      	b.n	8002314 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe fd12 	bl	8000d10 <HAL_GetTick>
 80022ec:	0003      	movs	r3, r0
 80022ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f2:	f7fe fd0d 	bl	8000d10 <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b64      	cmp	r3, #100	; 0x64
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e336      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002304:	4b85      	ldr	r3, [pc, #532]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	029b      	lsls	r3, r3, #10
 800230c:	4013      	ands	r3, r2
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x112>
 8002310:	e000      	b.n	8002314 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002312:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2202      	movs	r2, #2
 800231a:	4013      	ands	r3, r2
 800231c:	d100      	bne.n	8002320 <HAL_RCC_OscConfig+0x140>
 800231e:	e099      	b.n	8002454 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	2220      	movs	r2, #32
 800232a:	4013      	ands	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800232e:	4b7b      	ldr	r3, [pc, #492]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4b7a      	ldr	r3, [pc, #488]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002334:	2120      	movs	r1, #32
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	2220      	movs	r2, #32
 800233e:	4393      	bics	r3, r2
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	2b04      	cmp	r3, #4
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b0c      	cmp	r3, #12
 800234c:	d13e      	bne.n	80023cc <HAL_RCC_OscConfig+0x1ec>
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d13b      	bne.n	80023cc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002354:	4b71      	ldr	r3, [pc, #452]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2204      	movs	r2, #4
 800235a:	4013      	ands	r3, r2
 800235c:	d004      	beq.n	8002368 <HAL_RCC_OscConfig+0x188>
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e304      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b6c      	ldr	r3, [pc, #432]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a6e      	ldr	r2, [pc, #440]	; (8002528 <HAL_RCC_OscConfig+0x348>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	021a      	lsls	r2, r3, #8
 8002378:	4b68      	ldr	r3, [pc, #416]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800237e:	4b67      	ldr	r3, [pc, #412]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2209      	movs	r2, #9
 8002384:	4393      	bics	r3, r2
 8002386:	0019      	movs	r1, r3
 8002388:	4b64      	ldr	r3, [pc, #400]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 800238a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002390:	f000 fc42 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002394:	0001      	movs	r1, r0
 8002396:	4b61      	ldr	r3, [pc, #388]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	220f      	movs	r2, #15
 800239e:	4013      	ands	r3, r2
 80023a0:	4a62      	ldr	r2, [pc, #392]	; (800252c <HAL_RCC_OscConfig+0x34c>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	000a      	movs	r2, r1
 80023a6:	40da      	lsrs	r2, r3
 80023a8:	4b61      	ldr	r3, [pc, #388]	; (8002530 <HAL_RCC_OscConfig+0x350>)
 80023aa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80023ac:	4b61      	ldr	r3, [pc, #388]	; (8002534 <HAL_RCC_OscConfig+0x354>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2513      	movs	r5, #19
 80023b2:	197c      	adds	r4, r7, r5
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7fe fc65 	bl	8000c84 <HAL_InitTick>
 80023ba:	0003      	movs	r3, r0
 80023bc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80023be:	197b      	adds	r3, r7, r5
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d046      	beq.n	8002454 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80023c6:	197b      	adds	r3, r7, r5
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	e2d2      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d027      	beq.n	8002422 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80023d2:	4b52      	ldr	r3, [pc, #328]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2209      	movs	r2, #9
 80023d8:	4393      	bics	r3, r2
 80023da:	0019      	movs	r1, r3
 80023dc:	4b4f      	ldr	r3, [pc, #316]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 80023de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe fc94 	bl	8000d10 <HAL_GetTick>
 80023e8:	0003      	movs	r3, r0
 80023ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ee:	f7fe fc8f 	bl	8000d10 <HAL_GetTick>
 80023f2:	0002      	movs	r2, r0
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e2b8      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002400:	4b46      	ldr	r3, [pc, #280]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2204      	movs	r2, #4
 8002406:	4013      	ands	r3, r2
 8002408:	d0f1      	beq.n	80023ee <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240a:	4b44      	ldr	r3, [pc, #272]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4a46      	ldr	r2, [pc, #280]	; (8002528 <HAL_RCC_OscConfig+0x348>)
 8002410:	4013      	ands	r3, r2
 8002412:	0019      	movs	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	021a      	lsls	r2, r3, #8
 800241a:	4b40      	ldr	r3, [pc, #256]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	e018      	b.n	8002454 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002422:	4b3e      	ldr	r3, [pc, #248]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002428:	2101      	movs	r1, #1
 800242a:	438a      	bics	r2, r1
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7fe fc6f 	bl	8000d10 <HAL_GetTick>
 8002432:	0003      	movs	r3, r0
 8002434:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002438:	f7fe fc6a 	bl	8000d10 <HAL_GetTick>
 800243c:	0002      	movs	r2, r0
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e293      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800244a:	4b34      	ldr	r3, [pc, #208]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2204      	movs	r2, #4
 8002450:	4013      	ands	r3, r2
 8002452:	d1f1      	bne.n	8002438 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2210      	movs	r2, #16
 800245a:	4013      	ands	r3, r2
 800245c:	d100      	bne.n	8002460 <HAL_RCC_OscConfig+0x280>
 800245e:	e0a2      	b.n	80025a6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d140      	bne.n	80024e8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4013      	ands	r3, r2
 8002470:	d005      	beq.n	800247e <HAL_RCC_OscConfig+0x29e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e279      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800247e:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4a2d      	ldr	r2, [pc, #180]	; (8002538 <HAL_RCC_OscConfig+0x358>)
 8002484:	4013      	ands	r3, r2
 8002486:	0019      	movs	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800248c:	4b23      	ldr	r3, [pc, #140]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 800248e:	430a      	orrs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	0a19      	lsrs	r1, r3, #8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	061a      	lsls	r2, r3, #24
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	0b5b      	lsrs	r3, r3, #13
 80024ac:	3301      	adds	r3, #1
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	0212      	lsls	r2, r2, #8
 80024b2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	210f      	movs	r1, #15
 80024bc:	400b      	ands	r3, r1
 80024be:	491b      	ldr	r1, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x34c>)
 80024c0:	5ccb      	ldrb	r3, [r1, r3]
 80024c2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024c4:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <HAL_RCC_OscConfig+0x350>)
 80024c6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80024c8:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <HAL_RCC_OscConfig+0x354>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2513      	movs	r5, #19
 80024ce:	197c      	adds	r4, r7, r5
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7fe fbd7 	bl	8000c84 <HAL_InitTick>
 80024d6:	0003      	movs	r3, r0
 80024d8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80024da:	197b      	adds	r3, r7, r5
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d061      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80024e2:	197b      	adds	r3, r7, r5
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	e244      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d040      	beq.n	8002572 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_OscConfig+0x33c>)
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	0049      	lsls	r1, r1, #1
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7fe fc07 	bl	8000d10 <HAL_GetTick>
 8002502:	0003      	movs	r3, r0
 8002504:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002506:	e019      	b.n	800253c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002508:	f7fe fc02 	bl	8000d10 <HAL_GetTick>
 800250c:	0002      	movs	r2, r0
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d912      	bls.n	800253c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e22b      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	40021000 	.word	0x40021000
 8002520:	fffeffff 	.word	0xfffeffff
 8002524:	fffbffff 	.word	0xfffbffff
 8002528:	ffffe0ff 	.word	0xffffe0ff
 800252c:	08003594 	.word	0x08003594
 8002530:	20000000 	.word	0x20000000
 8002534:	20000004 	.word	0x20000004
 8002538:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800253c:	4bca      	ldr	r3, [pc, #808]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4013      	ands	r3, r2
 8002546:	d0df      	beq.n	8002508 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002548:	4bc7      	ldr	r3, [pc, #796]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4ac7      	ldr	r2, [pc, #796]	; (800286c <HAL_RCC_OscConfig+0x68c>)
 800254e:	4013      	ands	r3, r2
 8002550:	0019      	movs	r1, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002556:	4bc4      	ldr	r3, [pc, #784]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 8002558:	430a      	orrs	r2, r1
 800255a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800255c:	4bc2      	ldr	r3, [pc, #776]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	0a19      	lsrs	r1, r3, #8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	061a      	lsls	r2, r3, #24
 800256a:	4bbf      	ldr	r3, [pc, #764]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 800256c:	430a      	orrs	r2, r1
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	e019      	b.n	80025a6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002572:	4bbd      	ldr	r3, [pc, #756]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4bbc      	ldr	r3, [pc, #752]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 8002578:	49bd      	ldr	r1, [pc, #756]	; (8002870 <HAL_RCC_OscConfig+0x690>)
 800257a:	400a      	ands	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe fbc7 	bl	8000d10 <HAL_GetTick>
 8002582:	0003      	movs	r3, r0
 8002584:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002588:	f7fe fbc2 	bl	8000d10 <HAL_GetTick>
 800258c:	0002      	movs	r2, r0
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1eb      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800259a:	4bb3      	ldr	r3, [pc, #716]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4013      	ands	r3, r2
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2208      	movs	r2, #8
 80025ac:	4013      	ands	r3, r2
 80025ae:	d036      	beq.n	800261e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d019      	beq.n	80025ec <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b8:	4bab      	ldr	r3, [pc, #684]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80025ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025bc:	4baa      	ldr	r3, [pc, #680]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80025be:	2101      	movs	r1, #1
 80025c0:	430a      	orrs	r2, r1
 80025c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c4:	f7fe fba4 	bl	8000d10 <HAL_GetTick>
 80025c8:	0003      	movs	r3, r0
 80025ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ce:	f7fe fb9f 	bl	8000d10 <HAL_GetTick>
 80025d2:	0002      	movs	r2, r0
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1c8      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025e0:	4ba1      	ldr	r3, [pc, #644]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80025e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e4:	2202      	movs	r2, #2
 80025e6:	4013      	ands	r3, r2
 80025e8:	d0f1      	beq.n	80025ce <HAL_RCC_OscConfig+0x3ee>
 80025ea:	e018      	b.n	800261e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ec:	4b9e      	ldr	r3, [pc, #632]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80025ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025f0:	4b9d      	ldr	r3, [pc, #628]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80025f2:	2101      	movs	r1, #1
 80025f4:	438a      	bics	r2, r1
 80025f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f8:	f7fe fb8a 	bl	8000d10 <HAL_GetTick>
 80025fc:	0003      	movs	r3, r0
 80025fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002602:	f7fe fb85 	bl	8000d10 <HAL_GetTick>
 8002606:	0002      	movs	r2, r0
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e1ae      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002614:	4b94      	ldr	r3, [pc, #592]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 8002616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002618:	2202      	movs	r2, #2
 800261a:	4013      	ands	r3, r2
 800261c:	d1f1      	bne.n	8002602 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2204      	movs	r2, #4
 8002624:	4013      	ands	r3, r2
 8002626:	d100      	bne.n	800262a <HAL_RCC_OscConfig+0x44a>
 8002628:	e0ae      	b.n	8002788 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262a:	2023      	movs	r0, #35	; 0x23
 800262c:	183b      	adds	r3, r7, r0
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b8d      	ldr	r3, [pc, #564]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 8002634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	055b      	lsls	r3, r3, #21
 800263a:	4013      	ands	r3, r2
 800263c:	d109      	bne.n	8002652 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	4b8a      	ldr	r3, [pc, #552]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 8002640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002642:	4b89      	ldr	r3, [pc, #548]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	0549      	lsls	r1, r1, #21
 8002648:	430a      	orrs	r2, r1
 800264a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800264c:	183b      	adds	r3, r7, r0
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002652:	4b88      	ldr	r3, [pc, #544]	; (8002874 <HAL_RCC_OscConfig+0x694>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4013      	ands	r3, r2
 800265c:	d11a      	bne.n	8002694 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265e:	4b85      	ldr	r3, [pc, #532]	; (8002874 <HAL_RCC_OscConfig+0x694>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b84      	ldr	r3, [pc, #528]	; (8002874 <HAL_RCC_OscConfig+0x694>)
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	0049      	lsls	r1, r1, #1
 8002668:	430a      	orrs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266c:	f7fe fb50 	bl	8000d10 <HAL_GetTick>
 8002670:	0003      	movs	r3, r0
 8002672:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002676:	f7fe fb4b 	bl	8000d10 <HAL_GetTick>
 800267a:	0002      	movs	r2, r0
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b64      	cmp	r3, #100	; 0x64
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e174      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	4b7a      	ldr	r3, [pc, #488]	; (8002874 <HAL_RCC_OscConfig+0x694>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4013      	ands	r3, r2
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	429a      	cmp	r2, r3
 800269e:	d107      	bne.n	80026b0 <HAL_RCC_OscConfig+0x4d0>
 80026a0:	4b71      	ldr	r3, [pc, #452]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80026a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026a4:	4b70      	ldr	r3, [pc, #448]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80026a6:	2180      	movs	r1, #128	; 0x80
 80026a8:	0049      	lsls	r1, r1, #1
 80026aa:	430a      	orrs	r2, r1
 80026ac:	651a      	str	r2, [r3, #80]	; 0x50
 80026ae:	e031      	b.n	8002714 <HAL_RCC_OscConfig+0x534>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10c      	bne.n	80026d2 <HAL_RCC_OscConfig+0x4f2>
 80026b8:	4b6b      	ldr	r3, [pc, #428]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80026ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026bc:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80026be:	496c      	ldr	r1, [pc, #432]	; (8002870 <HAL_RCC_OscConfig+0x690>)
 80026c0:	400a      	ands	r2, r1
 80026c2:	651a      	str	r2, [r3, #80]	; 0x50
 80026c4:	4b68      	ldr	r3, [pc, #416]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80026c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026c8:	4b67      	ldr	r3, [pc, #412]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80026ca:	496b      	ldr	r1, [pc, #428]	; (8002878 <HAL_RCC_OscConfig+0x698>)
 80026cc:	400a      	ands	r2, r1
 80026ce:	651a      	str	r2, [r3, #80]	; 0x50
 80026d0:	e020      	b.n	8002714 <HAL_RCC_OscConfig+0x534>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	23a0      	movs	r3, #160	; 0xa0
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	429a      	cmp	r2, r3
 80026dc:	d10e      	bne.n	80026fc <HAL_RCC_OscConfig+0x51c>
 80026de:	4b62      	ldr	r3, [pc, #392]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80026e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026e2:	4b61      	ldr	r3, [pc, #388]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	00c9      	lsls	r1, r1, #3
 80026e8:	430a      	orrs	r2, r1
 80026ea:	651a      	str	r2, [r3, #80]	; 0x50
 80026ec:	4b5e      	ldr	r3, [pc, #376]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80026ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026f0:	4b5d      	ldr	r3, [pc, #372]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	0049      	lsls	r1, r1, #1
 80026f6:	430a      	orrs	r2, r1
 80026f8:	651a      	str	r2, [r3, #80]	; 0x50
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0x534>
 80026fc:	4b5a      	ldr	r3, [pc, #360]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80026fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002700:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 8002702:	495b      	ldr	r1, [pc, #364]	; (8002870 <HAL_RCC_OscConfig+0x690>)
 8002704:	400a      	ands	r2, r1
 8002706:	651a      	str	r2, [r3, #80]	; 0x50
 8002708:	4b57      	ldr	r3, [pc, #348]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 800270a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800270c:	4b56      	ldr	r3, [pc, #344]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 800270e:	495a      	ldr	r1, [pc, #360]	; (8002878 <HAL_RCC_OscConfig+0x698>)
 8002710:	400a      	ands	r2, r1
 8002712:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d015      	beq.n	8002748 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271c:	f7fe faf8 	bl	8000d10 <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002724:	e009      	b.n	800273a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7fe faf3 	bl	8000d10 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	4a52      	ldr	r2, [pc, #328]	; (800287c <HAL_RCC_OscConfig+0x69c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e11b      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800273a:	4b4b      	ldr	r3, [pc, #300]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 800273c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d0ef      	beq.n	8002726 <HAL_RCC_OscConfig+0x546>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002748:	f7fe fae2 	bl	8000d10 <HAL_GetTick>
 800274c:	0003      	movs	r3, r0
 800274e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002750:	e009      	b.n	8002766 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7fe fadd 	bl	8000d10 <HAL_GetTick>
 8002756:	0002      	movs	r2, r0
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	4a47      	ldr	r2, [pc, #284]	; (800287c <HAL_RCC_OscConfig+0x69c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e105      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002766:	4b40      	ldr	r3, [pc, #256]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 8002768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4013      	ands	r3, r2
 8002770:	d1ef      	bne.n	8002752 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002772:	2323      	movs	r3, #35	; 0x23
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d105      	bne.n	8002788 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277c:	4b3a      	ldr	r3, [pc, #232]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 800277e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002780:	4b39      	ldr	r3, [pc, #228]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 8002782:	493f      	ldr	r1, [pc, #252]	; (8002880 <HAL_RCC_OscConfig+0x6a0>)
 8002784:	400a      	ands	r2, r1
 8002786:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2220      	movs	r2, #32
 800278e:	4013      	ands	r3, r2
 8002790:	d049      	beq.n	8002826 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d026      	beq.n	80027e8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800279a:	4b33      	ldr	r3, [pc, #204]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	4b32      	ldr	r3, [pc, #200]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80027a0:	2101      	movs	r1, #1
 80027a2:	430a      	orrs	r2, r1
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	4b30      	ldr	r3, [pc, #192]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80027a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027aa:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80027ac:	2101      	movs	r1, #1
 80027ae:	430a      	orrs	r2, r1
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34
 80027b2:	4b34      	ldr	r3, [pc, #208]	; (8002884 <HAL_RCC_OscConfig+0x6a4>)
 80027b4:	6a1a      	ldr	r2, [r3, #32]
 80027b6:	4b33      	ldr	r3, [pc, #204]	; (8002884 <HAL_RCC_OscConfig+0x6a4>)
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	0189      	lsls	r1, r1, #6
 80027bc:	430a      	orrs	r2, r1
 80027be:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe faa6 	bl	8000d10 <HAL_GetTick>
 80027c4:	0003      	movs	r3, r0
 80027c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ca:	f7fe faa1 	bl	8000d10 <HAL_GetTick>
 80027ce:	0002      	movs	r2, r0
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e0ca      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027dc:	4b22      	ldr	r3, [pc, #136]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2202      	movs	r2, #2
 80027e2:	4013      	ands	r3, r2
 80027e4:	d0f1      	beq.n	80027ca <HAL_RCC_OscConfig+0x5ea>
 80027e6:	e01e      	b.n	8002826 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80027e8:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 80027ee:	2101      	movs	r1, #1
 80027f0:	438a      	bics	r2, r1
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_RCC_OscConfig+0x6a4>)
 80027f6:	6a1a      	ldr	r2, [r3, #32]
 80027f8:	4b22      	ldr	r3, [pc, #136]	; (8002884 <HAL_RCC_OscConfig+0x6a4>)
 80027fa:	4923      	ldr	r1, [pc, #140]	; (8002888 <HAL_RCC_OscConfig+0x6a8>)
 80027fc:	400a      	ands	r2, r1
 80027fe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe fa86 	bl	8000d10 <HAL_GetTick>
 8002804:	0003      	movs	r3, r0
 8002806:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800280a:	f7fe fa81 	bl	8000d10 <HAL_GetTick>
 800280e:	0002      	movs	r2, r0
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0aa      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2202      	movs	r2, #2
 8002822:	4013      	ands	r3, r2
 8002824:	d1f1      	bne.n	800280a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	2b00      	cmp	r3, #0
 800282c:	d100      	bne.n	8002830 <HAL_RCC_OscConfig+0x650>
 800282e:	e09f      	b.n	8002970 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b0c      	cmp	r3, #12
 8002834:	d100      	bne.n	8002838 <HAL_RCC_OscConfig+0x658>
 8002836:	e078      	b.n	800292a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	2b02      	cmp	r3, #2
 800283e:	d159      	bne.n	80028f4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_RCC_OscConfig+0x688>)
 8002846:	4911      	ldr	r1, [pc, #68]	; (800288c <HAL_RCC_OscConfig+0x6ac>)
 8002848:	400a      	ands	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe fa60 	bl	8000d10 <HAL_GetTick>
 8002850:	0003      	movs	r3, r0
 8002852:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002854:	e01c      	b.n	8002890 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002856:	f7fe fa5b 	bl	8000d10 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d915      	bls.n	8002890 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e084      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
 8002868:	40021000 	.word	0x40021000
 800286c:	ffff1fff 	.word	0xffff1fff
 8002870:	fffffeff 	.word	0xfffffeff
 8002874:	40007000 	.word	0x40007000
 8002878:	fffffbff 	.word	0xfffffbff
 800287c:	00001388 	.word	0x00001388
 8002880:	efffffff 	.word	0xefffffff
 8002884:	40010000 	.word	0x40010000
 8002888:	ffffdfff 	.word	0xffffdfff
 800288c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002890:	4b3a      	ldr	r3, [pc, #232]	; (800297c <HAL_RCC_OscConfig+0x79c>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	049b      	lsls	r3, r3, #18
 8002898:	4013      	ands	r3, r2
 800289a:	d1dc      	bne.n	8002856 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289c:	4b37      	ldr	r3, [pc, #220]	; (800297c <HAL_RCC_OscConfig+0x79c>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a37      	ldr	r2, [pc, #220]	; (8002980 <HAL_RCC_OscConfig+0x7a0>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	0019      	movs	r1, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b4:	431a      	orrs	r2, r3
 80028b6:	4b31      	ldr	r3, [pc, #196]	; (800297c <HAL_RCC_OscConfig+0x79c>)
 80028b8:	430a      	orrs	r2, r1
 80028ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028bc:	4b2f      	ldr	r3, [pc, #188]	; (800297c <HAL_RCC_OscConfig+0x79c>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b2e      	ldr	r3, [pc, #184]	; (800297c <HAL_RCC_OscConfig+0x79c>)
 80028c2:	2180      	movs	r1, #128	; 0x80
 80028c4:	0449      	lsls	r1, r1, #17
 80028c6:	430a      	orrs	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fe fa21 	bl	8000d10 <HAL_GetTick>
 80028ce:	0003      	movs	r3, r0
 80028d0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d4:	f7fe fa1c 	bl	8000d10 <HAL_GetTick>
 80028d8:	0002      	movs	r2, r0
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e045      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80028e6:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_RCC_OscConfig+0x79c>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	049b      	lsls	r3, r3, #18
 80028ee:	4013      	ands	r3, r2
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x6f4>
 80028f2:	e03d      	b.n	8002970 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f4:	4b21      	ldr	r3, [pc, #132]	; (800297c <HAL_RCC_OscConfig+0x79c>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b20      	ldr	r3, [pc, #128]	; (800297c <HAL_RCC_OscConfig+0x79c>)
 80028fa:	4922      	ldr	r1, [pc, #136]	; (8002984 <HAL_RCC_OscConfig+0x7a4>)
 80028fc:	400a      	ands	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fe fa06 	bl	8000d10 <HAL_GetTick>
 8002904:	0003      	movs	r3, r0
 8002906:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290a:	f7fe fa01 	bl	8000d10 <HAL_GetTick>
 800290e:	0002      	movs	r2, r0
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e02a      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800291c:	4b17      	ldr	r3, [pc, #92]	; (800297c <HAL_RCC_OscConfig+0x79c>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	049b      	lsls	r3, r3, #18
 8002924:	4013      	ands	r3, r2
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_OscConfig+0x72a>
 8002928:	e022      	b.n	8002970 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e01d      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_RCC_OscConfig+0x79c>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	025b      	lsls	r3, r3, #9
 8002942:	401a      	ands	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	429a      	cmp	r2, r3
 800294a:	d10f      	bne.n	800296c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	23f0      	movs	r3, #240	; 0xf0
 8002950:	039b      	lsls	r3, r3, #14
 8002952:	401a      	ands	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d107      	bne.n	800296c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	23c0      	movs	r3, #192	; 0xc0
 8002960:	041b      	lsls	r3, r3, #16
 8002962:	401a      	ands	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b00a      	add	sp, #40	; 0x28
 8002978:	bdb0      	pop	{r4, r5, r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	40021000 	.word	0x40021000
 8002980:	ff02ffff 	.word	0xff02ffff
 8002984:	feffffff 	.word	0xfeffffff

08002988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002988:	b5b0      	push	{r4, r5, r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e128      	b.n	8002bee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800299c:	4b96      	ldr	r3, [pc, #600]	; (8002bf8 <HAL_RCC_ClockConfig+0x270>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2201      	movs	r2, #1
 80029a2:	4013      	ands	r3, r2
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d91e      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b93      	ldr	r3, [pc, #588]	; (8002bf8 <HAL_RCC_ClockConfig+0x270>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2201      	movs	r2, #1
 80029b0:	4393      	bics	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	4b90      	ldr	r3, [pc, #576]	; (8002bf8 <HAL_RCC_ClockConfig+0x270>)
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029bc:	f7fe f9a8 	bl	8000d10 <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c4:	e009      	b.n	80029da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c6:	f7fe f9a3 	bl	8000d10 <HAL_GetTick>
 80029ca:	0002      	movs	r2, r0
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	4a8a      	ldr	r2, [pc, #552]	; (8002bfc <HAL_RCC_ClockConfig+0x274>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e109      	b.n	8002bee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b87      	ldr	r3, [pc, #540]	; (8002bf8 <HAL_RCC_ClockConfig+0x270>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2201      	movs	r2, #1
 80029e0:	4013      	ands	r3, r2
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1ee      	bne.n	80029c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2202      	movs	r2, #2
 80029ee:	4013      	ands	r3, r2
 80029f0:	d009      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f2:	4b83      	ldr	r3, [pc, #524]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	22f0      	movs	r2, #240	; 0xf0
 80029f8:	4393      	bics	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	4b7f      	ldr	r3, [pc, #508]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002a02:	430a      	orrs	r2, r1
 8002a04:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d100      	bne.n	8002a12 <HAL_RCC_ClockConfig+0x8a>
 8002a10:	e089      	b.n	8002b26 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a1a:	4b79      	ldr	r3, [pc, #484]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	029b      	lsls	r3, r3, #10
 8002a22:	4013      	ands	r3, r2
 8002a24:	d120      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0e1      	b.n	8002bee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a32:	4b73      	ldr	r3, [pc, #460]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	049b      	lsls	r3, r3, #18
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d114      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0d5      	b.n	8002bee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d106      	bne.n	8002a58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a4a:	4b6d      	ldr	r3, [pc, #436]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	4013      	ands	r3, r2
 8002a52:	d109      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0ca      	b.n	8002bee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a58:	4b69      	ldr	r3, [pc, #420]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0c2      	b.n	8002bee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a68:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	4393      	bics	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4b62      	ldr	r3, [pc, #392]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a7c:	f7fe f948 	bl	8000d10 <HAL_GetTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d111      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a8c:	e009      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8e:	f7fe f93f 	bl	8000d10 <HAL_GetTick>
 8002a92:	0002      	movs	r2, r0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <HAL_RCC_ClockConfig+0x274>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e0a5      	b.n	8002bee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa2:	4b57      	ldr	r3, [pc, #348]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d1ef      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x106>
 8002aae:	e03a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d111      	bne.n	8002adc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab8:	e009      	b.n	8002ace <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aba:	f7fe f929 	bl	8000d10 <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	4a4d      	ldr	r2, [pc, #308]	; (8002bfc <HAL_RCC_ClockConfig+0x274>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e08f      	b.n	8002bee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ace:	4b4c      	ldr	r3, [pc, #304]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b0c      	cmp	r3, #12
 8002ad8:	d1ef      	bne.n	8002aba <HAL_RCC_ClockConfig+0x132>
 8002ada:	e024      	b.n	8002b26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d11b      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ae4:	e009      	b.n	8002afa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae6:	f7fe f913 	bl	8000d10 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	4a42      	ldr	r2, [pc, #264]	; (8002bfc <HAL_RCC_ClockConfig+0x274>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e079      	b.n	8002bee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002afa:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	220c      	movs	r2, #12
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d1ef      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x15e>
 8002b06:	e00e      	b.n	8002b26 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7fe f902 	bl	8000d10 <HAL_GetTick>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	4a3a      	ldr	r2, [pc, #232]	; (8002bfc <HAL_RCC_ClockConfig+0x274>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e068      	b.n	8002bee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b1c:	4b38      	ldr	r3, [pc, #224]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	220c      	movs	r2, #12
 8002b22:	4013      	ands	r3, r2
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b26:	4b34      	ldr	r3, [pc, #208]	; (8002bf8 <HAL_RCC_ClockConfig+0x270>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d21e      	bcs.n	8002b72 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b34:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <HAL_RCC_ClockConfig+0x270>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4393      	bics	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	4b2e      	ldr	r3, [pc, #184]	; (8002bf8 <HAL_RCC_ClockConfig+0x270>)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b46:	f7fe f8e3 	bl	8000d10 <HAL_GetTick>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	e009      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fe f8de 	bl	8000d10 <HAL_GetTick>
 8002b54:	0002      	movs	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <HAL_RCC_ClockConfig+0x274>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e044      	b.n	8002bee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b64:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <HAL_RCC_ClockConfig+0x270>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d1ee      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2204      	movs	r2, #4
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d009      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7c:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4a20      	ldr	r2, [pc, #128]	; (8002c04 <HAL_RCC_ClockConfig+0x27c>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2208      	movs	r2, #8
 8002b96:	4013      	ands	r3, r2
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b9a:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <HAL_RCC_ClockConfig+0x280>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	00da      	lsls	r2, r3, #3
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002bac:	430a      	orrs	r2, r1
 8002bae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bb0:	f000 f832 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002bb4:	0001      	movs	r1, r0
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <HAL_RCC_ClockConfig+0x284>)
 8002bc2:	5cd3      	ldrb	r3, [r2, r3]
 8002bc4:	000a      	movs	r2, r1
 8002bc6:	40da      	lsrs	r2, r3
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <HAL_RCC_ClockConfig+0x288>)
 8002bca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_RCC_ClockConfig+0x28c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	250b      	movs	r5, #11
 8002bd2:	197c      	adds	r4, r7, r5
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7fe f855 	bl	8000c84 <HAL_InitTick>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002bde:	197b      	adds	r3, r7, r5
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002be6:	197b      	adds	r3, r7, r5
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	e000      	b.n	8002bee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b004      	add	sp, #16
 8002bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	40022000 	.word	0x40022000
 8002bfc:	00001388 	.word	0x00001388
 8002c00:	40021000 	.word	0x40021000
 8002c04:	fffff8ff 	.word	0xfffff8ff
 8002c08:	ffffc7ff 	.word	0xffffc7ff
 8002c0c:	08003594 	.word	0x08003594
 8002c10:	20000000 	.word	0x20000000
 8002c14:	20000004 	.word	0x20000004

08002c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c18:	b5b0      	push	{r4, r5, r7, lr}
 8002c1a:	b08e      	sub	sp, #56	; 0x38
 8002c1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002c1e:	4b4c      	ldr	r3, [pc, #304]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c26:	230c      	movs	r3, #12
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d014      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x40>
 8002c2e:	d900      	bls.n	8002c32 <HAL_RCC_GetSysClockFreq+0x1a>
 8002c30:	e07b      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x112>
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d002      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x24>
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d00b      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c3a:	e076      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c3c:	4b44      	ldr	r3, [pc, #272]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2210      	movs	r2, #16
 8002c42:	4013      	ands	r3, r2
 8002c44:	d002      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002c46:	4b43      	ldr	r3, [pc, #268]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c48:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002c4a:	e07c      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002c4c:	4b42      	ldr	r3, [pc, #264]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x140>)
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c50:	e079      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c52:	4b42      	ldr	r3, [pc, #264]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x144>)
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c56:	e076      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	0c9a      	lsrs	r2, r3, #18
 8002c5c:	230f      	movs	r3, #15
 8002c5e:	401a      	ands	r2, r3
 8002c60:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x148>)
 8002c62:	5c9b      	ldrb	r3, [r3, r2]
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	0d9a      	lsrs	r2, r3, #22
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	3301      	adds	r3, #1
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c72:	4b37      	ldr	r3, [pc, #220]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	025b      	lsls	r3, r3, #9
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d01a      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	4a35      	ldr	r2, [pc, #212]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x144>)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	69b8      	ldr	r0, [r7, #24]
 8002c8c:	69f9      	ldr	r1, [r7, #28]
 8002c8e:	f7fd fae7 	bl	8000260 <__aeabi_lmul>
 8002c92:	0002      	movs	r2, r0
 8002c94:	000b      	movs	r3, r1
 8002c96:	0010      	movs	r0, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f7fd fabb 	bl	8000220 <__aeabi_uldivmod>
 8002caa:	0002      	movs	r2, r0
 8002cac:	000b      	movs	r3, r1
 8002cae:	0013      	movs	r3, r2
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb2:	e037      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002cb4:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2210      	movs	r2, #16
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d01a      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	4a23      	ldr	r2, [pc, #140]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	68b8      	ldr	r0, [r7, #8]
 8002ccc:	68f9      	ldr	r1, [r7, #12]
 8002cce:	f7fd fac7 	bl	8000260 <__aeabi_lmul>
 8002cd2:	0002      	movs	r2, r0
 8002cd4:	000b      	movs	r3, r1
 8002cd6:	0010      	movs	r0, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f7fd fa9b 	bl	8000220 <__aeabi_uldivmod>
 8002cea:	0002      	movs	r2, r0
 8002cec:	000b      	movs	r3, r1
 8002cee:	0013      	movs	r3, r2
 8002cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf2:	e017      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	4a16      	ldr	r2, [pc, #88]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x140>)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f7fd faae 	bl	8000260 <__aeabi_lmul>
 8002d04:	0002      	movs	r2, r0
 8002d06:	000b      	movs	r3, r1
 8002d08:	0010      	movs	r0, r2
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	001c      	movs	r4, r3
 8002d10:	2300      	movs	r3, #0
 8002d12:	001d      	movs	r5, r3
 8002d14:	0022      	movs	r2, r4
 8002d16:	002b      	movs	r3, r5
 8002d18:	f7fd fa82 	bl	8000220 <__aeabi_uldivmod>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	000b      	movs	r3, r1
 8002d20:	0013      	movs	r3, r2
 8002d22:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d28:	e00d      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0b5b      	lsrs	r3, r3, #13
 8002d30:	2207      	movs	r2, #7
 8002d32:	4013      	ands	r3, r2
 8002d34:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	2280      	movs	r2, #128	; 0x80
 8002d3c:	0212      	lsls	r2, r2, #8
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	0013      	movs	r3, r2
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d44:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b00e      	add	sp, #56	; 0x38
 8002d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d50:	40021000 	.word	0x40021000
 8002d54:	003d0900 	.word	0x003d0900
 8002d58:	00f42400 	.word	0x00f42400
 8002d5c:	007a1200 	.word	0x007a1200
 8002d60:	080035a4 	.word	0x080035a4

08002d64 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002d6c:	2317      	movs	r3, #23
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d106      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	4013      	ands	r3, r2
 8002d88:	d100      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002d8a:	e104      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8c:	4bb9      	ldr	r3, [pc, #740]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	055b      	lsls	r3, r3, #21
 8002d94:	4013      	ands	r3, r2
 8002d96:	d10a      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d98:	4bb6      	ldr	r3, [pc, #728]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d9c:	4bb5      	ldr	r3, [pc, #724]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d9e:	2180      	movs	r1, #128	; 0x80
 8002da0:	0549      	lsls	r1, r1, #21
 8002da2:	430a      	orrs	r2, r1
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002da6:	2317      	movs	r3, #23
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dae:	4bb2      	ldr	r3, [pc, #712]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4013      	ands	r3, r2
 8002db8:	d11a      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dba:	4baf      	ldr	r3, [pc, #700]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bae      	ldr	r3, [pc, #696]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	0049      	lsls	r1, r1, #1
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc8:	f7fd ffa2 	bl	8000d10 <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	e008      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd2:	f7fd ff9d 	bl	8000d10 <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b64      	cmp	r3, #100	; 0x64
 8002dde:	d901      	bls.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e143      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	4ba4      	ldr	r3, [pc, #656]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4013      	ands	r3, r2
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002df0:	4ba0      	ldr	r3, [pc, #640]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	23c0      	movs	r3, #192	; 0xc0
 8002df6:	039b      	lsls	r3, r3, #14
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	23c0      	movs	r3, #192	; 0xc0
 8002e02:	039b      	lsls	r3, r3, #14
 8002e04:	4013      	ands	r3, r2
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	23c0      	movs	r3, #192	; 0xc0
 8002e12:	039b      	lsls	r3, r3, #14
 8002e14:	4013      	ands	r3, r2
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	23c0      	movs	r3, #192	; 0xc0
 8002e22:	029b      	lsls	r3, r3, #10
 8002e24:	401a      	ands	r2, r3
 8002e26:	23c0      	movs	r3, #192	; 0xc0
 8002e28:	029b      	lsls	r3, r3, #10
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d10a      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e2e:	4b91      	ldr	r3, [pc, #580]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	029b      	lsls	r3, r3, #10
 8002e36:	401a      	ands	r2, r3
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	029b      	lsls	r3, r3, #10
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e113      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002e44:	4b8b      	ldr	r3, [pc, #556]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e48:	23c0      	movs	r3, #192	; 0xc0
 8002e4a:	029b      	lsls	r3, r3, #10
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d049      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	23c0      	movs	r3, #192	; 0xc0
 8002e5c:	029b      	lsls	r3, r3, #10
 8002e5e:	4013      	ands	r3, r2
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d004      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d10d      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	23c0      	movs	r3, #192	; 0xc0
 8002e76:	029b      	lsls	r3, r3, #10
 8002e78:	4013      	ands	r3, r2
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d034      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d02e      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e8c:	4b79      	ldr	r3, [pc, #484]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e90:	4a7a      	ldr	r2, [pc, #488]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e96:	4b77      	ldr	r3, [pc, #476]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e9a:	4b76      	ldr	r3, [pc, #472]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	0309      	lsls	r1, r1, #12
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea4:	4b73      	ldr	r3, [pc, #460]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ea8:	4b72      	ldr	r3, [pc, #456]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eaa:	4975      	ldr	r1, [pc, #468]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002eac:	400a      	ands	r2, r1
 8002eae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002eb0:	4b70      	ldr	r3, [pc, #448]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d014      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fd ff26 	bl	8000d10 <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ec8:	e009      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7fd ff21 	bl	8000d10 <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	4a6b      	ldr	r2, [pc, #428]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0c6      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ede:	4b65      	ldr	r3, [pc, #404]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d0ef      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d01f      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	23c0      	movs	r3, #192	; 0xc0
 8002efc:	029b      	lsls	r3, r3, #10
 8002efe:	401a      	ands	r2, r3
 8002f00:	23c0      	movs	r3, #192	; 0xc0
 8002f02:	029b      	lsls	r3, r3, #10
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d10c      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002f08:	4b5a      	ldr	r3, [pc, #360]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a5e      	ldr	r2, [pc, #376]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	23c0      	movs	r3, #192	; 0xc0
 8002f18:	039b      	lsls	r3, r3, #14
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	4b55      	ldr	r3, [pc, #340]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	4b54      	ldr	r3, [pc, #336]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	23c0      	movs	r3, #192	; 0xc0
 8002f2c:	029b      	lsls	r3, r3, #10
 8002f2e:	401a      	ands	r2, r3
 8002f30:	4b50      	ldr	r3, [pc, #320]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f32:	430a      	orrs	r2, r1
 8002f34:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d01f      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	23c0      	movs	r3, #192	; 0xc0
 8002f46:	029b      	lsls	r3, r3, #10
 8002f48:	401a      	ands	r2, r3
 8002f4a:	23c0      	movs	r3, #192	; 0xc0
 8002f4c:	029b      	lsls	r3, r3, #10
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002f52:	4b48      	ldr	r3, [pc, #288]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a4c      	ldr	r2, [pc, #304]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	23c0      	movs	r3, #192	; 0xc0
 8002f62:	039b      	lsls	r3, r3, #14
 8002f64:	401a      	ands	r2, r3
 8002f66:	4b43      	ldr	r3, [pc, #268]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f6e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	23c0      	movs	r3, #192	; 0xc0
 8002f76:	029b      	lsls	r3, r3, #10
 8002f78:	401a      	ands	r2, r3
 8002f7a:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f80:	2317      	movs	r3, #23
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f8e:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f90:	493e      	ldr	r1, [pc, #248]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002f92:	400a      	ands	r2, r1
 8002f94:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d009      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fa0:	4b34      	ldr	r3, [pc, #208]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	4393      	bics	r3, r2
 8002fa8:	0019      	movs	r1, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	4b31      	ldr	r3, [pc, #196]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fbe:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	220c      	movs	r2, #12
 8002fc4:	4393      	bics	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	4b29      	ldr	r3, [pc, #164]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d009      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fdc:	4b25      	ldr	r3, [pc, #148]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe0:	4a2b      	ldr	r2, [pc, #172]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fec:	430a      	orrs	r2, r1
 8002fee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d009      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	4a25      	ldr	r2, [pc, #148]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003000:	4013      	ands	r3, r2
 8003002:	0019      	movs	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800300a:	430a      	orrs	r2, r1
 800300c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4013      	ands	r3, r2
 8003018:	d009      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800301a:	4b16      	ldr	r3, [pc, #88]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	4a17      	ldr	r2, [pc, #92]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003020:	4013      	ands	r3, r2
 8003022:	0019      	movs	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800302a:	430a      	orrs	r2, r1
 800302c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2240      	movs	r2, #64	; 0x40
 8003034:	4013      	ands	r3, r2
 8003036:	d009      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003038:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800303a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003048:	430a      	orrs	r2, r1
 800304a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2280      	movs	r2, #128	; 0x80
 8003052:	4013      	ands	r3, r2
 8003054:	d009      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003056:	4b07      	ldr	r3, [pc, #28]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305a:	4a10      	ldr	r2, [pc, #64]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800305c:	4013      	ands	r3, r2
 800305e:	0019      	movs	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1a      	ldr	r2, [r3, #32]
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003066:	430a      	orrs	r2, r1
 8003068:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	0018      	movs	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	b006      	add	sp, #24
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	40007000 	.word	0x40007000
 800307c:	fffcffff 	.word	0xfffcffff
 8003080:	fff7ffff 	.word	0xfff7ffff
 8003084:	00001388 	.word	0x00001388
 8003088:	ffcfffff 	.word	0xffcfffff
 800308c:	efffffff 	.word	0xefffffff
 8003090:	fffff3ff 	.word	0xfffff3ff
 8003094:	ffffcfff 	.word	0xffffcfff
 8003098:	fbffffff 	.word	0xfbffffff
 800309c:	fff3ffff 	.word	0xfff3ffff

080030a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80030a8:	230f      	movs	r3, #15
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e088      	b.n	80031cc <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2221      	movs	r2, #33	; 0x21
 80030be:	5c9b      	ldrb	r3, [r3, r2]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	2100      	movs	r1, #0
 80030cc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7fd fd43 	bl	8000b5c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2221      	movs	r2, #33	; 0x21
 80030da:	2102      	movs	r1, #2
 80030dc:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2210      	movs	r2, #16
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d05f      	beq.n	80031ac <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	22ca      	movs	r2, #202	; 0xca
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2253      	movs	r2, #83	; 0x53
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80030fc:	250f      	movs	r5, #15
 80030fe:	197c      	adds	r4, r7, r5
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	0018      	movs	r0, r3
 8003104:	f000 f890 	bl	8003228 <RTC_EnterInitMode>
 8003108:	0003      	movs	r3, r0
 800310a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800310c:	0028      	movs	r0, r5
 800310e:	183b      	adds	r3, r7, r0
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d12c      	bne.n	8003170 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	492c      	ldr	r1, [pc, #176]	; (80031d4 <HAL_RTC_Init+0x134>)
 8003122:	400a      	ands	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6899      	ldr	r1, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	68d2      	ldr	r2, [r2, #12]
 800314c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6919      	ldr	r1, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	041a      	lsls	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003162:	183c      	adds	r4, r7, r0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	0018      	movs	r0, r3
 8003168:	f000 f8a2 	bl	80032b0 <RTC_ExitInitMode>
 800316c:	0003      	movs	r3, r0
 800316e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003170:	230f      	movs	r3, #15
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d113      	bne.n	80031a2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2103      	movs	r1, #3
 8003186:	438a      	bics	r2, r1
 8003188:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	22ff      	movs	r2, #255	; 0xff
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24
 80031aa:	e003      	b.n	80031b4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80031ac:	230f      	movs	r3, #15
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80031b4:	230f      	movs	r3, #15
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d103      	bne.n	80031c6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2221      	movs	r2, #33	; 0x21
 80031c2:	2101      	movs	r1, #1
 80031c4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80031c6:	230f      	movs	r3, #15
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	781b      	ldrb	r3, [r3, #0]
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b004      	add	sp, #16
 80031d2:	bdb0      	pop	{r4, r5, r7, pc}
 80031d4:	ff8fffbf 	.word	0xff8fffbf

080031d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <HAL_RTC_WaitForSynchro+0x4c>)
 80031ea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ec:	f7fd fd90 	bl	8000d10 <HAL_GetTick>
 80031f0:	0003      	movs	r3, r0
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80031f4:	e00a      	b.n	800320c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031f6:	f7fd fd8b 	bl	8000d10 <HAL_GetTick>
 80031fa:	0002      	movs	r2, r0
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1ad2      	subs	r2, r2, r3
 8003200:	23fa      	movs	r3, #250	; 0xfa
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	429a      	cmp	r2, r3
 8003206:	d901      	bls.n	800320c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e006      	b.n	800321a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	4013      	ands	r3, r2
 8003216:	d0ee      	beq.n	80031f6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b004      	add	sp, #16
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	0001ff5f 	.word	0x0001ff5f

08003228 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003234:	230f      	movs	r3, #15
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2240      	movs	r2, #64	; 0x40
 8003244:	4013      	ands	r3, r2
 8003246:	d12c      	bne.n	80032a2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	430a      	orrs	r2, r1
 8003256:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003258:	f7fd fd5a 	bl	8000d10 <HAL_GetTick>
 800325c:	0003      	movs	r3, r0
 800325e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003260:	e014      	b.n	800328c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003262:	f7fd fd55 	bl	8000d10 <HAL_GetTick>
 8003266:	0002      	movs	r2, r0
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	1ad2      	subs	r2, r2, r3
 800326c:	200f      	movs	r0, #15
 800326e:	183b      	adds	r3, r7, r0
 8003270:	1839      	adds	r1, r7, r0
 8003272:	7809      	ldrb	r1, [r1, #0]
 8003274:	7019      	strb	r1, [r3, #0]
 8003276:	23fa      	movs	r3, #250	; 0xfa
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	429a      	cmp	r2, r3
 800327c:	d906      	bls.n	800328c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2221      	movs	r2, #33	; 0x21
 8003282:	2104      	movs	r1, #4
 8003284:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003286:	183b      	adds	r3, r7, r0
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2240      	movs	r2, #64	; 0x40
 8003294:	4013      	ands	r3, r2
 8003296:	d104      	bne.n	80032a2 <RTC_EnterInitMode+0x7a>
 8003298:	230f      	movs	r3, #15
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d1df      	bne.n	8003262 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80032a2:	230f      	movs	r3, #15
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	781b      	ldrb	r3, [r3, #0]
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b004      	add	sp, #16
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b8:	240f      	movs	r4, #15
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2180      	movs	r1, #128	; 0x80
 80032cc:	438a      	bics	r2, r1
 80032ce:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2220      	movs	r2, #32
 80032d8:	4013      	ands	r3, r2
 80032da:	d10c      	bne.n	80032f6 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	0018      	movs	r0, r3
 80032e0:	f7ff ff7a 	bl	80031d8 <HAL_RTC_WaitForSynchro>
 80032e4:	1e03      	subs	r3, r0, #0
 80032e6:	d006      	beq.n	80032f6 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2221      	movs	r2, #33	; 0x21
 80032ec:	2104      	movs	r1, #4
 80032ee:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80032f0:	193b      	adds	r3, r7, r4
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80032f6:	230f      	movs	r3, #15
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	781b      	ldrb	r3, [r3, #0]
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	b005      	add	sp, #20
 8003302:	bd90      	pop	{r4, r7, pc}

08003304 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003310:	4b64      	ldr	r3, [pc, #400]	; (80034a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	22fa      	movs	r2, #250	; 0xfa
 8003316:	01d1      	lsls	r1, r2, #7
 8003318:	0018      	movs	r0, r3
 800331a:	f7fc fef5 	bl	8000108 <__udivsi3>
 800331e:	0003      	movs	r3, r0
 8003320:	001a      	movs	r2, r3
 8003322:	0013      	movs	r3, r2
 8003324:	015b      	lsls	r3, r3, #5
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	189b      	adds	r3, r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	5c9b      	ldrb	r3, [r3, r2]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 800333a:	2302      	movs	r3, #2
 800333c:	e0ad      	b.n	800349a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	2101      	movs	r1, #1
 8003344:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2221      	movs	r2, #33	; 0x21
 800334a:	2102      	movs	r1, #2
 800334c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	22ca      	movs	r2, #202	; 0xca
 8003354:	625a      	str	r2, [r3, #36]	; 0x24
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2253      	movs	r2, #83	; 0x53
 800335c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4013      	ands	r3, r2
 800336a:	d019      	beq.n	80033a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	3b01      	subs	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10d      	bne.n	8003394 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	22ff      	movs	r2, #255	; 0xff
 800337e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2221      	movs	r2, #33	; 0x21
 8003384:	2103      	movs	r1, #3
 8003386:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	2100      	movs	r1, #0
 800338e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e082      	b.n	800349a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2204      	movs	r2, #4
 800339c:	4013      	ands	r3, r2
 800339e:	d1e5      	bne.n	800336c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	493f      	ldr	r1, [pc, #252]	; (80034a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80033ac:	400a      	ands	r2, r1
 80033ae:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	22ff      	movs	r2, #255	; 0xff
 80033b8:	401a      	ands	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	493b      	ldr	r1, [pc, #236]	; (80034ac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80033c0:	430a      	orrs	r2, r1
 80033c2:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80033c4:	4b37      	ldr	r3, [pc, #220]	; (80034a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	22fa      	movs	r2, #250	; 0xfa
 80033ca:	01d1      	lsls	r1, r2, #7
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7fc fe9b 	bl	8000108 <__udivsi3>
 80033d2:	0003      	movs	r3, r0
 80033d4:	001a      	movs	r2, r3
 80033d6:	0013      	movs	r3, r2
 80033d8:	015b      	lsls	r3, r3, #5
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	189b      	adds	r3, r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10d      	bne.n	800340c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	22ff      	movs	r2, #255	; 0xff
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2221      	movs	r2, #33	; 0x21
 80033fc:	2103      	movs	r1, #3
 80033fe:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	2100      	movs	r1, #0
 8003406:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e046      	b.n	800349a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2204      	movs	r2, #4
 8003414:	4013      	ands	r3, r2
 8003416:	d0e5      	beq.n	80033e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2107      	movs	r1, #7
 8003424:	438a      	bics	r2, r1
 8003426:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6899      	ldr	r1, [r3, #8]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	430a      	orrs	r2, r1
 8003436:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003446:	2180      	movs	r1, #128	; 0x80
 8003448:	0349      	lsls	r1, r1, #13
 800344a:	430a      	orrs	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800344e:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003454:	2180      	movs	r1, #128	; 0x80
 8003456:	0349      	lsls	r1, r1, #13
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2180      	movs	r1, #128	; 0x80
 8003468:	01c9      	lsls	r1, r1, #7
 800346a:	430a      	orrs	r2, r1
 800346c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	00c9      	lsls	r1, r1, #3
 800347c:	430a      	orrs	r2, r1
 800347e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	22ff      	movs	r2, #255	; 0xff
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2221      	movs	r2, #33	; 0x21
 800348c:	2101      	movs	r1, #1
 800348e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b006      	add	sp, #24
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	20000000 	.word	0x20000000
 80034a8:	fffffbff 	.word	0xfffffbff
 80034ac:	fffffb7f 	.word	0xfffffb7f
 80034b0:	40010400 	.word	0x40010400

080034b4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80034bc:	4b13      	ldr	r3, [pc, #76]	; (800350c <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	0352      	lsls	r2, r2, #13
 80034c2:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	01db      	lsls	r3, r3, #7
 80034ce:	4013      	ands	r3, r2
 80034d0:	d014      	beq.n	80034fc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4013      	ands	r3, r2
 80034de:	d00d      	beq.n	80034fc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	22ff      	movs	r2, #255	; 0xff
 80034e8:	401a      	ands	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4908      	ldr	r1, [pc, #32]	; (8003510 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80034f0:	430a      	orrs	r2, r1
 80034f2:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	0018      	movs	r0, r3
 80034f8:	f000 f80c 	bl	8003514 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2221      	movs	r2, #33	; 0x21
 8003500:	2101      	movs	r1, #1
 8003502:	5499      	strb	r1, [r3, r2]
}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40010400 	.word	0x40010400
 8003510:	fffffb7f 	.word	0xfffffb7f

08003514 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b002      	add	sp, #8
 8003522:	bd80      	pop	{r7, pc}

08003524 <memset>:
 8003524:	0003      	movs	r3, r0
 8003526:	1882      	adds	r2, r0, r2
 8003528:	4293      	cmp	r3, r2
 800352a:	d100      	bne.n	800352e <memset+0xa>
 800352c:	4770      	bx	lr
 800352e:	7019      	strb	r1, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	e7f9      	b.n	8003528 <memset+0x4>

08003534 <__libc_init_array>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	2600      	movs	r6, #0
 8003538:	4c0c      	ldr	r4, [pc, #48]	; (800356c <__libc_init_array+0x38>)
 800353a:	4d0d      	ldr	r5, [pc, #52]	; (8003570 <__libc_init_array+0x3c>)
 800353c:	1b64      	subs	r4, r4, r5
 800353e:	10a4      	asrs	r4, r4, #2
 8003540:	42a6      	cmp	r6, r4
 8003542:	d109      	bne.n	8003558 <__libc_init_array+0x24>
 8003544:	2600      	movs	r6, #0
 8003546:	f000 f819 	bl	800357c <_init>
 800354a:	4c0a      	ldr	r4, [pc, #40]	; (8003574 <__libc_init_array+0x40>)
 800354c:	4d0a      	ldr	r5, [pc, #40]	; (8003578 <__libc_init_array+0x44>)
 800354e:	1b64      	subs	r4, r4, r5
 8003550:	10a4      	asrs	r4, r4, #2
 8003552:	42a6      	cmp	r6, r4
 8003554:	d105      	bne.n	8003562 <__libc_init_array+0x2e>
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	00b3      	lsls	r3, r6, #2
 800355a:	58eb      	ldr	r3, [r5, r3]
 800355c:	4798      	blx	r3
 800355e:	3601      	adds	r6, #1
 8003560:	e7ee      	b.n	8003540 <__libc_init_array+0xc>
 8003562:	00b3      	lsls	r3, r6, #2
 8003564:	58eb      	ldr	r3, [r5, r3]
 8003566:	4798      	blx	r3
 8003568:	3601      	adds	r6, #1
 800356a:	e7f2      	b.n	8003552 <__libc_init_array+0x1e>
 800356c:	080035b8 	.word	0x080035b8
 8003570:	080035b8 	.word	0x080035b8
 8003574:	080035bc 	.word	0x080035bc
 8003578:	080035b8 	.word	0x080035b8

0800357c <_init>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003582:	bc08      	pop	{r3}
 8003584:	469e      	mov	lr, r3
 8003586:	4770      	bx	lr

08003588 <_fini>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358e:	bc08      	pop	{r3}
 8003590:	469e      	mov	lr, r3
 8003592:	4770      	bx	lr
